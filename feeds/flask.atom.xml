<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Flask</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/flask.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-07-01T20:31:00+02:00</updated><entry><title>Flask Web Server Port Mapping</title><link href="https://pybit.es/flask-ports.html" rel="alternate"></link><published>2017-07-01T20:31:00+02:00</published><updated>2017-07-01T20:31:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-01:/flask-ports.html</id><summary type="html">&lt;p&gt;A quick post on Flask App port mapping&lt;/p&gt;</summary><content type="html">&lt;p&gt;If like me you’re obsessed with Python Flask, you might have asked yourself, “How on Earth do I run multiple Flask apps at the same time?!”.&lt;/p&gt;
&lt;p&gt;It’s actually pretty simple!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What Happens at Default Settings&lt;/h2&gt;
&lt;p&gt;Before I get to the solution, I’ll first show you what happens if you leave everything at the default settings as it’s important to know.&lt;/p&gt;
&lt;p&gt;For this test I’m running my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; and my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/083"&gt;Timezone List App&lt;/a&gt; together.&lt;/p&gt;
&lt;p&gt;The app you launch &lt;em&gt;first&lt;/em&gt; will always take priority. In this case, my Pay Calculator interface shows up on 127.0.0.1:5000. The interesting thing is that when I run the Timezone App, there’s no error. Python still launches a web server on 127.0.0.1:5000.&lt;/p&gt;
&lt;p&gt;The catch is that all calls from my browser to localhost (127.0.0.1) are routed to the web server created by the Pay Calc app. If I try and browse to a web page that is &lt;em&gt;unique&lt;/em&gt; to the Timezone App, I get a 404 error. The page doesn’t exist in the Pay Calc app and therefore the call fails.&lt;/p&gt;
&lt;p&gt;As expected, the second I CTRL+C my Pay Calc app, everything springs to life for the Timezone app. Browsing to localhost brings up the Timezone interface and browsing to the aforementioned unique page works.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Specify a Port!&lt;/h2&gt;
&lt;p&gt;The solution? Specify a port number!&lt;/p&gt;
&lt;p&gt;In Flask code, it’s the &lt;code&gt;app.run()&lt;/code&gt; code that kicks everything off. Without that code, there’s no app.&lt;/p&gt;
&lt;p&gt;By default, this starts the web server on 127.0.0.1:5000. We can change this!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(port=5001)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Believe it or not, it’s as simple as that!&lt;/p&gt;
&lt;p&gt;Throw the port number you want to access the web app from to &lt;code&gt;app.run()&lt;/code&gt; and the web server launches on that port. So simple and easy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion and Discussion&lt;/h2&gt;
&lt;p&gt;This is as simple as it gets. There is however something else to discuss.&lt;/p&gt;
&lt;p&gt;If you’re trying to run two or more concurrent web apps, it’s likely that you want these apps running in a sort of “production” environment. That is, you want them running all the time, it’s no longer just for a test.&lt;/p&gt;
&lt;p&gt;That’s exactly my case. I want a few Flask apps running from my NAS on my local network at home.&lt;/p&gt;
&lt;p&gt;The web server bundled in Flask is a development server. It may be fine for my home network but best practice mandates I use a dedicated web server like &lt;a href="http://nginx.org/en/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or another question, should I even use Flask for making production apps? Once I get to this level of production should I be moving to Django?&lt;/p&gt;
&lt;p&gt;I’m actually not too sure! I’m definitely keen to hear everyone’s opinion on this. What do you use (if at all) for this sort of thing?&lt;/p&gt;
&lt;p&gt;Do you use Flask for small apps and testing and Django for the bigger and badder stuff?&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="learning"></category><category term="ports"></category><category term="apps"></category></entry><entry><title>Flask Sessions</title><link href="https://pybit.es/flask-sessions.html" rel="alternate"></link><published>2017-06-02T21:57:00+02:00</published><updated>2017-06-02T21:57:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-02:/flask-sessions.html</id><summary type="html">&lt;p&gt;In this quick post I discuss Flask Sessions and provide a few use cases.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More Flask?! Yes! More Flask! I apologise for nothing! This is however a quick article for anyone wanting to learn about Flask Session Objects.&lt;/p&gt;
&lt;p&gt;One of my most exciting discoveries as of late has been the &lt;code&gt;session&lt;/code&gt; object. I stumbled upon this useful little thing while making my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s discuss sessions in the usual Julian format.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Flask Session Object?&lt;/h2&gt;
&lt;p&gt;Think of a Flask Session Object as a special variable that persists for the life of the browser session that’s connected to the Flask app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Say What?!&lt;/h2&gt;
&lt;p&gt;Well, here:&lt;/p&gt;
&lt;p&gt;I wanted to make a pay calculator web application that allowed me to calculate how much money I’d be paid based on me entering my hourly wage and how many hours I worked. Simple right?&lt;/p&gt;
&lt;p&gt;Well, what if, as part of this app, I want to have another web page that could extrapolate my entire annual salary from just the hourly wage? I don’t want these two functions to exist on the same page.&lt;/p&gt;
&lt;p&gt;I also don’t want to ask the user to enter in their salary every time they flick between these two pages/apps, that’d be annoying right? I’d need a variable that could store the hourly wage and keep that data accessible to any of the web apps running from this Flask app.&lt;/p&gt;
&lt;p&gt;This is where you’d use a &lt;code&gt;session&lt;/code&gt; object. You’d assign the user’s hourly wage to the &lt;code&gt;session&lt;/code&gt; object which you would then make available to use across different web pages in your app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Code Me Up!&lt;/h2&gt;
&lt;p&gt;The thing that surprised me was how simple it was. Coding wise, you use the object in exactly the same way you’d use a normal variable. It still has to abide by normal global/local rules in your code too.&lt;/p&gt;
&lt;p&gt;To assign the hourly wage to a &lt;code&gt;session&lt;/code&gt; object I did this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code on the right is just pulling in the data from the HTML form with the name “wage”. It stores that as a float into a &lt;code&gt;session&lt;/code&gt; object of the same name (wage).&lt;/p&gt;
&lt;p&gt;It’s seriously as simple as that.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Super Secret Keys&lt;/h2&gt;
&lt;p&gt;I know all of this sounds a lot like cookies. It should. Flask &lt;code&gt;session&lt;/code&gt; objects exist on top of standard cookies. All that’s different is that the cookie is locked down with a secret key.&lt;/p&gt;
&lt;p&gt;This does not mean the data is private! The cookie data is visible but &lt;strong&gt;cannot be modified unless you have the secret key&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This secret key needs to be accessible to your app code. You’d preferably make it an environment variable that isn’t accessible to the outside world. I made mine as complex as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.secret_key = &amp;quot;Test_Secret_Key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Test_Secret_Key&lt;/code&gt; being the password. Good luck cracking this bad boy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;The Pay Calc App Use Case&lt;/h2&gt;
&lt;p&gt;In my Pay Calculator App, I create the &lt;code&gt;wage&lt;/code&gt; session object in my index ‘/‘ route:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():    
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;wage&amp;#39; in request.form:
        session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
        return redirect(url_for(&amp;#39;pay_calc&amp;#39;))
    return render_template(&amp;quot;index.html&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you’ll notice is that &lt;code&gt;wage&lt;/code&gt; is created and then returned in the &lt;code&gt;redirect&lt;/code&gt; to the page associated with the &lt;code&gt;pay_calc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This essentially makes it available to the second page of the app.&lt;/p&gt;
&lt;p&gt;I then check for it in the code for the second page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/pay&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def pay_calc():
    pay = &amp;#39;&amp;#39;
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;hours&amp;#39; in request.form and &amp;#39;wage&amp;#39; in session:
        hours = float(request.form.get(&amp;#39;hours&amp;#39;))
        pay = calc_wage(session[&amp;#39;wage&amp;#39;], hours)
    return render_template(&amp;quot;pay_calc.html&amp;quot;,
                            pay=pay)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement checks to see if the &lt;code&gt;wage&lt;/code&gt; session object exists. If it doesn’t, the calculation within the &lt;code&gt;if&lt;/code&gt; won’t take place.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Other Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could use this for a personal touch on your site. A user enters their name which allows you to refer to them by their name on relevant screens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A to-do list! The entire list is in the &lt;code&gt;session&lt;/code&gt; object which can be called and loaded on any page the user loads on your site. It’d be a good idea to have data persistence as well in this scenario though!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dare I say it? Ordering food online is a great use case for this. Add all selected items to a &lt;code&gt;session&lt;/code&gt; object to keep track of the user order while they browse. Once the order is complete, the data can be scrapped when the browser session closes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any sort of online calculation service: currency exchange, electricity, insurance, superannuation. These all require temporary data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flight tracking information (I may be stretching it here). A user would enter details of a flight to track and that data would stay live for the duration of the session. There’s no need for it to be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even an old school type of browser game like Jetman. The score is retained for the duration of the session but once the browser closes, you start from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think you get the point! The &lt;code&gt;session&lt;/code&gt; object is incredibly useful!&lt;/p&gt;
&lt;p&gt;I’ll admit, it did take some time to wrap my head around how to get it working at a code level. The concept is simple but writing the code such that it worked took some testing and playing.&lt;/p&gt;
&lt;p&gt;If you have any cool use cases or examples of &lt;code&gt;session&lt;/code&gt; object usage, let us know!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="sessions"></category><category term="learning"></category><category term="examples"></category><category term="code"></category></entry><entry><title>Building a Simple Birthday App with Flask-SQLAlchemy</title><link href="https://pybit.es/flask-sqlalchemy-bday-app.html" rel="alternate"></link><published>2017-05-11T11:00:00+02:00</published><updated>2017-05-11T11:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-05-11:/flask-sqlalchemy-bday-app.html</id><summary type="html">&lt;p&gt;In this article I teach you how to get started with Flask-SQLAlchemy. I will set up a model, create the DB, retrieve birthdays from FB and import them into the DB. Lastly I will query the birthdays by date range.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite Flask extensions is &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt;. It makes working with a database a breeze. For some time I wanted to detach my birthday management from Facebook. So I started a simple Flask app. Work so far &lt;a href="https://github.com/pybites/bday-app"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;FB birthday data&lt;/h2&gt;
&lt;p&gt;I am almost sure you could use the FB API before to pull all your friends and birthdays. &lt;a href="http://stackoverflow.com/questions/27924140/fetch-friends-birthday-using-facebook-graph-api-v2-0"&gt;Not anymore&lt;/a&gt; :(&lt;/p&gt;
&lt;p&gt;Luckily &lt;a href="https://github.com/pybites/bday-app/blob/master/README.md"&gt;I found a way&lt;/a&gt; to export them and parse them into a useful format - see &lt;a href="https://github.com/pybites/bday-app/blob/master/bdays.py"&gt;bdays.py&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Starting Flask-SQLAlchemy&lt;/h2&gt;
&lt;p&gt;Back to the article subject: how do we get this data into a DB? Flask-SQLAlchemy to the rescue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First I defined a simple model in &lt;a href="https://github.com/pybites/bday-app/blob/master/model.py"&gt;model.py&lt;/a&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Birthday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bday&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Birthday %r %r %r&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's best to store dates as db.DateTime objects so we can easily query them (see further down).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If model.py is run as standalone script (not imported) it recreates the DB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db.drop_all()
db.create_all()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use the bdays.py ics parsing code to populate the table with all birthdays. You can even strip out the names (which was useful to share printscreens here). I store all birthdays with the same year (calendar ics ranges May '17 - May '18), otherwise the date querying fails (next step):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# insert birthdays sorted&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_birthdays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cal.ics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;

    &lt;span class="c1"&gt;# no real names&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;TEST_MODE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_random_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="c1"&gt;# import all bdays with THIS_YEAR to make it easier to query later&lt;/span&gt;
    &lt;span class="n"&gt;bday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;THIS_YEAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bd_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Birthday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bd_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app is still very bare-bones. It has an index/home route, to get the birthdays of the next 14 days, and a route to get birthdays for each month. See &lt;a href="https://github.com/pybites/bday-app/blob/master/app.py"&gt;app.py&lt;/a&gt;. Here's why you want to work with datetime objects, it makes querying dates easier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upcoming n days:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;)
...
start = datetime.now()
end = start + timedelta(days=UPCOMING_DAYS)
bdays = Birthday.query.filter(Birthday.bday &amp;lt;= end).filter(Birthday.bday &amp;gt;= start)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to get all birthdays of month n (&lt;a href="http://stackoverflow.com/questions/36155332/how-to-get-the-first-day-and-last-day-of-current-month-in-python"&gt;see SO&lt;/a&gt;). The SQLAlchemy query is the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;lt;int:month&amp;gt;&amp;#39;)
...
_, num_days = calendar.monthrange(THIS_YEAR, month)
start = date(THIS_YEAR, month, 1)
end = date(THIS_YEAR, month, num_days)
bdays = Birthday.query.filter(Birthday.bday &amp;lt;= end).filter(Birthday.bday &amp;gt;= start)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resulting App&lt;/h2&gt;
&lt;p&gt;&lt;img alt="bday app upcoming" src="https://pybit.es/images/bday-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bday app for a particular month" src="https://pybit.es/images/bday-app2.png"&gt;&lt;/p&gt;
&lt;p&gt;You can use the calendar module to get the month name for a month int:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;month_name = calendar.month_name[month]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See &lt;a href="https://github.com/pybites/bday-app/blob/master/app.py"&gt;app.py&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;This is it for starters. In part 2 I will make the app more functional: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement notifications: email me one day before a birthday.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow setting of notify == True for individual friends so I only get the notifications I want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full CRUD: add/update/delete friends and/or re-import new ics download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second (relational) model for tracking: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add the notifications sent to this table &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have a "done" flag to update when I sent Happy Birthday wishes to a particular friend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a nice extension to use Flask-SQLAlchemy's db.ForeignKey.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask-SQLAlchemy &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;docs&lt;/a&gt; is a great start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See our &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;code challenge 15 review&lt;/a&gt; for more example apps using Flask-SQLAlchemy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For examples of standard SQLAlchemy (outside Flask), our &lt;a href="http://pybit.es/codechallenge17_review.html"&gt;code challenge 17 review&lt;/a&gt; has some examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To learn SQLAlchemy start with the &lt;a href="http://sqlalchemy.readthedocs.io/en/latest/orm/tutorial.html"&gt;Object Relational Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask-SQLAlchemy"></category><category term="SQLAlchemy"></category><category term="Flask"></category><category term="Facebook"></category><category term="birthday"></category><category term="calendar"></category><category term="icalendar"></category><category term="datetime"></category></entry><entry><title>Simple Flask app to compare the weather of 2 cities</title><link href="https://pybit.es/flask-simple-weather-app.html" rel="alternate"></link><published>2017-04-20T09:40:00+02:00</published><updated>2017-04-20T09:40:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-20:/flask-simple-weather-app.html</id><summary type="html">&lt;p&gt;In this post I show you how to build a simple Flask app to compare the weather of 2 cities using the &lt;a href="https://openweathermap.org"&gt;OpenWeatherMap API&lt;/a&gt;. Maybe this aids you in solving &lt;a href="http://pybit.es/codechallenge15.html"&gt;this week's challenge&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some nice things coming out of our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode Challenge&lt;/a&gt;. You seemed to like &lt;a href="https://twitter.com/pybites/status/851896144594583552"&gt;this one&lt;/a&gt; so I decided to do an article on it.&lt;/p&gt;
&lt;p&gt;In this post I show you how to build a simple Flask app to compare the weather of 2 cities using the &lt;a href="https://openweathermap.org"&gt;OpenWeatherMap API&lt;/a&gt;. Maybe this aids you in solving &lt;a href="http://pybit.es/codechallenge15.html"&gt;this week's challenge&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Our simple Flask app" src="https://pybit.es/images/weather-app.png"&gt;&lt;/p&gt;
&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;The full code is &lt;a href="https://github.com/pybites/weather_compare"&gt;here&lt;/a&gt;. We deployed the app &lt;a href="http://weathercompare.herokuapp.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First install dependencies we put in &lt;a href="https://github.com/pybites/weather_compare/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m venv venv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get an API key from &lt;a href="https://openweathermap.org/current"&gt;OpenWeatherMap API&lt;/a&gt; and store it in your environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi .bashrc
...
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WEATHER_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xyz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CSS goes into the static directory, our template into templates. &lt;a href="https://github.com/pybites/weather_compare/blob/master/templates/weather.html"&gt;It contains&lt;/a&gt; a POST form to submit 2 cities and a table for the results of the query. The nice and simple design are thanks to &lt;a href="https://purecss.io/"&gt;PureCSS&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href="https://github.com/pybites/weather_compare/blob/master/weather.py"&gt;weather.py&lt;/a&gt; gets the API_KEY from the OS env, sets up some other constants and defines two helpers: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get_local_time() -&amp;gt; tries to be as specific regarding timezone as possible, looking for both city and country. I had a good play with the pytz package here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query_api() queries the OpenWeatherMap API via requests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With these helpers the &lt;a href="https://github.com/pybites/weather_compare/blob/master/app.py"&gt;main app&lt;/a&gt; becomes pretty lean (just 32 LOC). I only use the root (/) path for both view and POST. If POST, I get the 2 cities from the form with request.form.get, I query the API for both cities appending the results to data. If data does not have 2 items we set the error variable. All the data gets passed to the weather html template with this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return render_template(&amp;quot;weather.html&amp;quot;,
                    data=data,
                    error=error,
                    time=get_local_time)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we can pass in a function as well: get_local_time() which we use &lt;a href="https://github.com/pybites/weather_compare/blob/master/templates/weather.html"&gt;in the template&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sunrise&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deploy to Heroku&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I then &lt;a href="http://weathercompare.herokuapp.com/"&gt;deployed the app&lt;/a&gt; and luckily took some notes. Prerequisite is installing &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku CLI&lt;/a&gt;.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;web: gunicorn &amp;lt;APP_FILE_NAME&amp;gt;:app&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Procfile&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;python-3.5.2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;prep&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;
&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Heroku&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typing&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;# you can name your app or let Heroku give you a random name&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="err"&gt;⬢&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;
&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ | https://git.heroku.com/weathercompare.git&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt;    &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git (fetch)&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt;    &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git (push)&lt;/span&gt;

&lt;span class="cp"&gt;# if ENV variables&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;WEATHER_API&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;XYZ&lt;/span&gt;
&lt;span class="n"&gt;Setting&lt;/span&gt; &lt;span class="n"&gt;WEATHER_API&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;restarting&lt;/span&gt; &lt;span class="err"&gt;⬢&lt;/span&gt; &lt;span class="n"&gt;weathercompare&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v3&lt;/span&gt;
&lt;span class="nl"&gt;WEATHER_API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XYZ&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;2.55&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.5.2&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v4&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="nl"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Scaling&lt;/span&gt; &lt;span class="n"&gt;dynos&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Free&lt;/span&gt;

&lt;span class="cp"&gt;# made a change? e.g. I added the CSS later, no problem, just deploy again&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Building&lt;/span&gt; &lt;span class="nl"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Discovering&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Procfile&lt;/span&gt; &lt;span class="n"&gt;declares&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;57.5&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Launching&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;Released&lt;/span&gt; &lt;span class="n"&gt;v7&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//weathercompare.herokuapp.com/ deployed to Heroku&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verifying&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//git.heroku.com/weathercompare.git&lt;/span&gt;
&lt;span class="n"&gt;c9771bb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;.77&lt;/span&gt;&lt;span class="n"&gt;abb53&lt;/span&gt;  &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope this inspired you to build your own mini Flask app using an API and putting it on Heroku. I hope I have convinced you this is pretty awesome stuff, not too hard to grasp, yet powerful if you further exploit its features. &lt;/p&gt;
&lt;p&gt;Leave a comment below if you want to share what you've built and/or join our &lt;a href="http://pybit.es/codechallenge15.html"&gt;Flask Code Challenge&lt;/a&gt; of this week.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask"></category><category term="weather"></category><category term="API"></category><category term="OpenWeatherMap"></category><category term="learning"></category><category term="Heroku"></category><category term="pytz"></category><category term="deploy"></category><category term="Jinja"></category><category term="CSS"></category></entry><entry><title>Beginning Flask</title><link href="https://pybit.es/beginning-flask.html" rel="alternate"></link><published>2017-04-13T15:00:00+02:00</published><updated>2017-04-13T15:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-13:/beginning-flask.html</id><summary type="html">&lt;p&gt;In this post I cover the basics of Flask in language that anyone can understand.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I wrote an &lt;a href="http://pybit.es/flask-for-loop.html"&gt;article&lt;/a&gt; showing you how to print the contents of a dict to a table using Flask and HTML.&lt;/p&gt;
&lt;p&gt;In the lead up to the post I did quite a lot of browsing, reading and researching to wrap my head around this whole Flask thing. It took me a little longer because not everything out there was in simple, human readable English. A lot of sources assume a high level of Python knowledge and not everything was explained simplistically (lots of big words!).&lt;/p&gt;
&lt;p&gt;That’s why I decided to write this article explaining the absolute basics (Hello World!) in a manner I would have liked to seen.&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;Odds are if you’re reading this, you already know what Flask is. I’m going to explain anyway.&lt;/p&gt;
&lt;p&gt;Flask is a “web framework” you can use to get your Python code to appear in a web browser (I told you I’d make this simplistic!).&lt;/p&gt;
&lt;p&gt;As with most programming languages, when you begin learning Python you’ll be making scripts that are completely command line based. Eventually you’ll wonder how the pros use Python to make web applications. Flask is one way to do this.&lt;/p&gt;
&lt;p&gt;There’ll be a Python script that imports the Flask module and when run, &lt;em&gt;generally&lt;/em&gt; passes data to a HTML file. When the web page is loaded, it runs the Python code associated with that web page.&lt;/p&gt;
&lt;h2&gt;What should you know before learning Flask?&lt;/h2&gt;
&lt;p&gt;I won’t sugar coat it. You’ll have a hard time if you don’t have a sound understanding of HTML and CSS.&lt;/p&gt;
&lt;p&gt;Python wise, your app will only be as complex as the code you write so the more you want to do, the more you need to know.&lt;/p&gt;
&lt;p&gt;The HTML knowledge needs to be there though. For example, HTML forms can be tricky just on their own. When you add Python and Flask to the mix it can get downright confusing (seriously, me).&lt;/p&gt;
&lt;p&gt;You don’t have to know CSS as much I guess but everyone wants their page/app to look good right? Maybe I’m just a little shallow!&lt;/p&gt;
&lt;h2&gt;Explaining Hello World&lt;/h2&gt;
&lt;p&gt;Okay so here’s a simple Hello World Flask script you’ll probably find in every Flask tutorial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world! Can I get some CSS please?!’&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, what the heck is going on here? Let me break it down&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Simple, we’re importing the &lt;strong&gt;Flask&lt;/strong&gt; class from the &lt;em&gt;flask&lt;/em&gt; module. This is the standard import call for the Flask module. Roll with it!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = Flask(__name__)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let’s talk about the assignment. All we’re doing here is assigning the Flask class to a variable called app. Simple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;name&lt;/strong&gt;) is the bloody confusing part. The Flask class needs to know what value is currently assigned to &lt;strong&gt;name&lt;/strong&gt;. Whenever &lt;strong&gt;name&lt;/strong&gt; is used in your code, it’s assigned the name of the module that’s currently active. The Flask class needs this information to be able to execute properly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Think of this as the URL of the web page you’re coding. You’ll often hear people say “route” for short when talking Flask. If you wanted to create a page called &lt;em&gt;birthdays.html&lt;/em&gt;, you’d name the route &lt;em&gt;@app.route(‘/birthdays’)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def hello():
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that there’s no line space between the route and this function. That’s because they’re directly linked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of the code that you add within this function will be executed when the web page is loaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The recommended function naming convention is to give it the same name as the route. This Hello World example is thus against convention. Using the birthdays example, we’d create a function with: &lt;em&gt;def birthdays():&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return &amp;#39;Hello world! Can I get some CSS please?!’
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is an important one. &lt;strong&gt;Every Flask function needs to return something&lt;/strong&gt;. This is the data that will be returned to the web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This return line will simply print the string &lt;em&gt;Hello world! Can I get some CSS please?!&lt;/em&gt; to the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a more complex piece of code, you’d more likely be returning a variable or something similar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.run()
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Pretty self explanatory. This is the code that will run your Flask app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Things to Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you run your Python Flask script (same way you’d run any other Python script), Flask kicks off a local web server. It runs on the system you’re executing the code from and, by default, will allow you to browse to the page at 127.0.0.1:5000. You’ll then add the web page URL to the end of the port number, e.g.: 127.0.0.1:5000/birthdays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you start executing more complex code, such as my &lt;a href="http://pybit.es/flask-for-loop.html"&gt;dict example&lt;/a&gt; from last week, you need to use Flask Templates. These use the “Jinja2” engine (again, roll with it). This is all installed by default when you pip install flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Flask Template is pretty much just a HTML page that your code talks to. You can make one generic such that every page on your site calls the generic page so the theme is maintained across pages. Alternatively you can code each page individually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with HTML comes in handy when you start using Templates. Your python, HTML and CSS files need to be stored according to a required Flask folder hierarchy. Check out the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;GitHub repo for my code&lt;/a&gt; last week and you’ll see what I mean. It feels &lt;em&gt;way&lt;/em&gt; more familiar and less daunting if you’ve organised the files for a website before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why use Flask?&lt;/h2&gt;
&lt;p&gt;I asked myself this question a few times. Honestly, I’d say use it because it’s so simple and quick to get running. Bob and I were chatting this week about the Flask Template I made to create the HTML table and with little to no effort, he was able to take the template and use it for his new &lt;a href="http://weathercompare.herokuapp.com/"&gt;weather compare app&lt;/a&gt; (code &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My current hurdle is not Flask itself but trying to tie it in with the HTML side of things. It’s been years since I did any deep HTML coding so I’m pretty rusty. At the time of writing, I’m finding that the Python code is functional but I can’t get the HTML to wrap around it the way I want.&lt;/p&gt;
&lt;h2&gt;Examples and Resources&lt;/h2&gt;
&lt;p&gt;Check out some of these examples and resources. Reading and running other code will help get this stuff to sink in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/flask-for-loop.html"&gt;Display a dict using Flask&lt;/a&gt; - I’m pushing my post again because it really is easy to follow. Check the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;repo&lt;/a&gt; out and try it for yourself. Edit the code and watch the table change. Learn by doing!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Bob’s Weather Compare App&lt;/a&gt; - Bob made this as part of our &lt;a href="http://pybit.es/special-100days.html"&gt;100 days of code challenge&lt;/a&gt;. It’s definitely more complex but it’s amazing to see how &lt;em&gt;little&lt;/em&gt; code you need to actually get something like this out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;Flask Web Development with Python Tutorial&lt;/a&gt; - This 7-part video series from The New Boston is amazing. Nice and simple. Short bites. PyBites styles!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don’t be deterred by the learning curve. If you’re new to this, start simple and stick with it. Just a little bite every day. Start with printing static data then slowly move on to more complex ideas like printing variables and dicts. Just remember, Always Be Coding!&lt;/p&gt;
&lt;p&gt;And remember, Keep Calm and Code in Python Flask! (And HTML and CSS I guess!)&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>Flask for Loops - Printing Dict Data</title><link href="https://pybit.es/flask-for-loop.html" rel="alternate"></link><published>2017-04-06T20:38:00+02:00</published><updated>2017-04-06T20:38:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-06:/flask-for-loop.html</id><summary type="html">&lt;p&gt;In this post I demo how to create an extremely simple Flask app that prints the contents of a Dict to a web page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to the &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;, this week I took the plunge and dove into Python Flask.&lt;/p&gt;
&lt;p&gt;It’s not the easiest beast to tame but once you wrap your head around it, it’s not so bad!&lt;/p&gt;
&lt;p&gt;One of the concepts I struggled with early on was how to return more than “just” a single string to the Flask app web page.&lt;/p&gt;
&lt;h2&gt;Python Setup&lt;/h2&gt;
&lt;p&gt;Check out the full code for this &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I decided I wanted to print out a dict of birthdays. You can see I’ve created a route to a page called ‘birthdays’. The function associated with this decorator contains the dict we want to display.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;quot;/birthdays&amp;quot;)
def birthdays():
    dates = {&amp;quot;Julian&amp;quot;: 25, &amp;quot;Bob&amp;quot;: 26, &amp;quot;Dan&amp;quot;: 47, &amp;quot;Cornelius&amp;quot;: 3}
    return render_template(&amp;quot;birthdays.html&amp;quot;, dates=dates)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being Flask, we need to have a templates folder in the same directory that the main.py script is being run from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the templates folder we’ll need to have a birthdays.html file for the above route to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTML Setup&lt;/h2&gt;
&lt;p&gt;With the main.py file all set up, we can focus on birthdays.html. (Again, all of this is in the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;code Repo&lt;/a&gt;!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The simplest and most pleasing way to display this data would be in a table. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stylesheet (style.css) we’ll be using lives in another folder called ‘static’. This folder lives at the same hierarchical level as the templates folder - go ahead and create it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an example, in style.css we have a CSS class just to give the table a slightly thicker border.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.thick-border&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt; &lt;span class="no"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
        &lt;span class="no"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;collapse&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We can then create the table. The first row will be the table headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flask in Action&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With the table set up we can now start populating it with the contents of the &lt;em&gt;dates&lt;/em&gt; dict from main.py.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When inserting Python code into the HTML file, we wrap it in {% %} so Flask knows to differentiate it from normal HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To print out the contents of the dict, we can use a for loop. The idea of the for loop stays the same, it’s just spread out across multiple lines and wrapped in HTML. First we start with the opening of the for loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% for k, v in dates.items() %}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We don’t need to explicitly call &lt;em&gt;print&lt;/em&gt; to read out the values of &lt;em&gt;k&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;. We just need to choose how they’ll be displayed on the page in HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You’ll notice the {{ }} around the variables. This is another flag to Flask that these are Python variables and not a bit of HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then have to close off the for loop with one last bit of special Flask code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Final Result&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This is what the code for the table should look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;dates.items&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Here’s what the web page will look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Table populated by Python dict code" src="https://pybit.es/images/flask-bday-table.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The beauty is that you can add as much data (keys, values) to the dict as you want and the table will always be drawn to match the content. Give it a try!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning Points&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask requires that the decorator function you’re using &lt;strong&gt;returns&lt;/strong&gt; something. It could be something as simple as: &lt;em&gt;return ‘This is a string’&lt;/em&gt;. The point is, data needs to be returned. I struggled to understand how I could return each for loop pass over the dict! After continued research and reading, I learned about the HTML templates and how you write put the Python code there instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unsurprisingly, making something that’s pleasing to the eye requires some knowledge or experience with HTML and CSS. I was pretty dusty!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the full example you’ll see how it all meshes together - the static and templates folder and the main.py file living above them. Having experience with web dev makes this environment a lot easier to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s tough but extremely rewarding to move on from static return lines of just “hello world” to displaying data. That is, moving forward, the data printed by the loop could be generated on the fly. That’s exciting!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Next up I’d like to make this interactive. Perhaps have the user enter birthdays via a web form themselves and once completed, have the birthdays print to screen in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data really should be stored in a database or shelf too, not in a static dict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get my CSS game on and make this baby pretty!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll be seeing more Flask in the coming weeks (I hope!). I’d actually like to wrap this for loop around the data set for &lt;a href="http://pybit.es/codechallenge13.html"&gt;this week’s code challenge&lt;/a&gt;… hmm…&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="Flask"></category><category term="loops"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs</title><link href="https://pybit.es/flask-api-part2.html" rel="alternate"></link><published>2017-03-10T18:00:00+01:00</published><updated>2017-03-10T18:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-10:/flask-api-part2.html</id><summary type="html">&lt;p&gt;After &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple API - part 1&lt;/a&gt; a more practical app in this part 2 tutorial: a Deep Work logger integrating Google docs and Slack, including deployment of the app to Heroku.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple API - part 1&lt;/a&gt; a more practical app in this part 2 tutorial: a Deep Work logger integrating Google docs and Slack, including deployment of the app to Heroku.&lt;/p&gt;
&lt;p&gt;Sometimes you come across an article you think: "I definitely need to play with this!", enter &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheets and Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to make a Flask app to log the amount of deep work. Why? Read &lt;a href="http://amzn.to/2ngahen"&gt;the book&lt;/a&gt;, in short: it is a powerful success habit.&lt;/p&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;So we have the API = Flask, the back-end = Google Docs. What about the interface? &lt;/p&gt;
&lt;p&gt;I wanted something for both laptop and mobile = Slack. Enter the &lt;a href="https://api.slack.com/slash-commands"&gt;Slack API / Slash Commands&lt;/a&gt;. I defined this super basic interface: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dw &amp;lt;time&amp;gt; (&amp;lt;activity&amp;gt;)
- /dw is the slack command
- time can be an int (hour) or more specifically hh:mm
- activity is optional, if not provided it defaults to the name of the channel
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step by step&lt;/h2&gt;
&lt;p&gt;Here is roughly what I did. I document it here so you can start building something similar to scratch your own itch. The code so far is &lt;a href="https://github.com/pybites/deepwork/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To be able to write to a Google Doc follow &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheets and Python&lt;/a&gt; to create an app via the Google API and obtain the client_secret.json file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pip install flask and pygsheets, implement GET and POST, again more details &lt;a href="https://github.com/pybites/deepwork/blob/master/api.py"&gt;here&lt;/a&gt;. I used Flask's &lt;a href="http://flask.pocoo.org/snippets/8/"&gt;HTTP Basic Auth snippet&lt;/a&gt; to protect the GET. For the POST I verify the Slack token. As &lt;a href="https://12factor.net/config"&gt;good practice&lt;/a&gt; I stored user/pw in (OS) env variables. I defined some helpers in &lt;a href="https://github.com/pybites/deepwork/blob/master/backend.py"&gt;backend.py&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the app to Heroku (Free plan), I was so glad &lt;a href="http://bobbelderbos.com/2016/12/learning-flask-building-quote-app/"&gt;I took notes&lt;/a&gt; some time ago (section "Deployment to Heroku"). I captured the steps as good as I could &lt;a href="https://github.com/pybites/deepwork/blob/master/heroku.md"&gt;here&lt;/a&gt; (I will adjust next time I deploy an app to Heroku).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploying an app is a challenge in itself. For example how do you get the client_secret.json file in Heroku? I had to go with &lt;a href="http://stackoverflow.com/questions/7908667/how-to-deploy-heroku-app-with-secret-yaml-configuration-file-without-committing"&gt;this (not ideal) workaround&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# put client_secret.json in .gitignore on master
# commit it to secret-branch you keep between localhost and Heroku (not Github)
...
$ git push heroku secret-branch:master
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://api.slack.com/apps?new_app=1"&gt;Create a Slack app&lt;/a&gt;, then a &lt;a href="https://my.slack.com/services/new/slash-commands"&gt;Slash Command&lt;/a&gt; where I defined: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command: /dw&lt;/li&gt;
&lt;li&gt;URL = API endpoint on Heroku&lt;/li&gt;
&lt;li&gt;Method = POST&lt;/li&gt;
&lt;li&gt;Token = generated, I put that in env variable SLACK_DW_CMD_TOKEN above&lt;/li&gt;
&lt;li&gt;You can set an Autocomplete help text which is useful to your team&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the payload Slack sends to your API for consumption: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;token=xyz
team_id=T0001
team_domain=example
channel_id=C123
channel_name=deepwork
user_id=U123
user_name=bbelderbos  -&amp;gt; cool: the app can be used by the whole team on Slack
command=/dw
text=your_entered_text
response_url=https://hooks.slack.com/commands/1234/5678
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the parsing of it in the &lt;em&gt;&lt;a href="https://github.com/pybites/deepwork/blob/master/api.py"&gt;post_entry&lt;/a&gt;&lt;/em&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The app in action&lt;/h2&gt;
&lt;p&gt;&lt;img alt="the complete flow" src="https://pybit.es/images/slackapi.png"&gt;&lt;/p&gt;
&lt;h2&gt;Lessons learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scratch your own itch. This was a nice exercise to integrate with apps I often use. It taught me a lot because I got stuck so had to debug. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example Slack does not seem to use JSON so in my Flask I had to change request.json to request.form, using &lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt; speeded up the debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I lost quite some time struggling with gspread (used in the mentioned Twilio article) which was way too slow (2 min for a POST request?!), using &lt;a href="https://github.com/nithinmurali/pygsheets"&gt;pygsheets&lt;/a&gt; response times went down to 1-2 seconds or less which made Slack, Heroku and me happy. Lesson: fail fast and small, compare different libraries, and obviously read article comments first before trying!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="Flask"></category><category term="Slack"></category><category term="Google docs"></category><category term="Heroku"></category><category term="APIs"></category><category term="pygsheets"></category><category term="git"></category><category term="commands"></category><category term="productivity"></category><category term="learning"></category></entry><entry><title>How To Build a Simple API with Flask and Unit Test it</title><link href="https://pybit.es/simple-flask-api.html" rel="alternate"></link><published>2017-03-03T21:00:00+01:00</published><updated>2017-03-03T21:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-03:/simple-flask-api.html</id><summary type="html">&lt;p&gt;In this post I will create a simple API with Flask and test it with curl and unit testing its HTTP methods.&lt;/p&gt;</summary><content type="html">&lt;p&gt;REST has gained lot of popularity and is virtually the default architectural style for designing and implementing RESTful web services. &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;Wikipedia&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Representational state transfer (REST) or RESTful Web services are one way of providing interoperability between computer systems on the Internet. REST-compliant Web services allow requesting systems to access and manipulate textual representations of Web resources using a uniform and predefined set of stateless operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Implementing REST APIs in Flask is relatively easy. As &lt;a href="http://pybit.es/codechallenge08.html"&gt;this week's challenge&lt;/a&gt; is a House Inventory Tracker, lets do &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; on room items.&lt;/p&gt;
&lt;p&gt;Note this post uses the simplest possible example, and focuses on the testing. I use an in-memory list for storage. In real life you probably want a DB, although you could also use a &lt;a href="https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html"&gt;Google Spreadsheet and Python&lt;/a&gt;. Security / authentication is critical too, see Miguel Grinberg's excellent &lt;a href="https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask"&gt;Designing a RESTful API with Python and Flask&lt;/a&gt; how to implement that.&lt;/p&gt;
&lt;h2&gt;Get ready&lt;/h2&gt;
&lt;p&gt;First &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;create a virtualenv&lt;/a&gt; and do pip install flask&lt;/p&gt;
&lt;h2&gt;API code and endpoints&lt;/h2&gt;
&lt;p&gt;To create a simple API you implement one or more &lt;a href="http://www.restapitutorial.com/lessons/httpmethods.html"&gt;HTTP methods&lt;/a&gt;, in this case the following endpoints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/api/v1.0/items&amp;#39;, methods=[&amp;#39;GET&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;GET&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;PUT&amp;#39;])
@app.route(&amp;#39;/api/v1.0/items/&amp;lt;int:id&amp;gt;&amp;#39;, methods=[&amp;#39;DELETE&amp;#39;])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/app.py"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Testing part I) - manually with curl&lt;/h2&gt;
&lt;p&gt;I first put some curl commands in a &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/curl.py"&gt;test script&lt;/a&gt;, isn't it cool you can just use curl to test your new shiny API?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python curl.py

&lt;span class="c1"&gt;# get items&lt;/span&gt;

curl -i http://127.0.0.1:5000/api/v1.0/items
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
...

&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;laptop&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;1000&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,

...
...

&lt;span class="c1"&gt;# add item with proper values&lt;/span&gt;

curl -i -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -X POST -d  &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;:&amp;quot;monitor&amp;quot;, &amp;quot;value&amp;quot;: 200}&amp;#39;&lt;/span&gt; http://127.0.0.1:5000/api/v1.0/items
HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; CREATED
...

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;4&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;monitor&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;200&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
...
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It surely is! However you have to read the output every time you test. Not cool :(&lt;/p&gt;
&lt;h2&gt;Testing part II) - automation with unittest&lt;/h2&gt;
&lt;p&gt;Here the whole exercise became pretty interesting, how to unit test an API?! &lt;/p&gt;
&lt;p&gt;Flask facilitates a nice method you can use in your setUp (= repeats for each unit test):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;test_client(use_cookies=True, **kwargs)&lt;/p&gt;
&lt;p&gt;Creates a test client for this application. For information about unit testing head over to &lt;a href="http://flask.pocoo.org/docs/0.12/testing/"&gt;Testing Flask Applications&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can test response codes and of course see how the data (list of items in this case) changes after each request. &lt;/p&gt;
&lt;p&gt;The only challenge was the isolation of each unit test: I had to do copy the app.items to a backup variable in setUp (a &lt;a href="https://docs.python.org/3.6/library/copy.html"&gt;deepcopy&lt;/a&gt; to not leave references around) and pass it back in tearDown. Similarly for a DB back-end you would probably construct and drop a test table to have a clean slate for every test. &lt;/p&gt;
&lt;p&gt;The full unit tests are &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;here&lt;/a&gt;, summary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_get_all(self): ...
def test_get_one(self): ...
def test_item_not_exist(self): ...
def test_post(self): ...
def test_update(self): ...
def test_update_error(self): ...
def test_delete(self): ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This whole exercise took me some time but it was great learning, not something you get from just reading about it! And this can serve as a template when testing other APIs.&lt;/p&gt;
&lt;h2&gt;next(API)&lt;/h2&gt;
&lt;p&gt;Since listening to &lt;a href="https://www.manning.com/books/soft-skills"&gt;Soft Skills&lt;/a&gt; I want to do some time logging to increase my productivity. &lt;/p&gt;
&lt;p&gt;What if I can have a simple API where I can send log entries of 'deep work time x spent on activity y' via a &lt;a href="https://api.slack.com/custom-integrations/outgoing-webhooks"&gt;Slack Webhook&lt;/a&gt; to a DB or earlier mentioned Google Spreadsheet?&lt;/p&gt;
&lt;p&gt;At the time of writing this article I stumbled upon &lt;a href="http://flask-restful-cn.readthedocs.io/en/0.3.5/quickstart.html#a-minimal-api"&gt;Flask-RESTful&lt;/a&gt; which should make this even easier (more elegant). So stay tuned for a part II ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="APIs"></category><category term="Flask"></category><category term="REST"></category><category term="curl"></category><category term="testing"></category><category term="unittest"></category><category term="inventory"></category></entry></feed>