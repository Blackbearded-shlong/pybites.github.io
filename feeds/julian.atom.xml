<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Julian</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/julian.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-07-13T19:02:00+02:00</updated><entry><title>The Importance of Refactoring Code</title><link href="https://pybit.es/refactoring.html" rel="alternate"></link><published>2017-07-13T19:02:00+02:00</published><updated>2017-07-13T19:02:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-13:/refactoring.html</id><summary type="html">&lt;p&gt;In this quick post I discuss why refactoring code is one of the most important parts of the learning process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the completion of our &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;100 Days of Code Challenge&lt;/a&gt;, this week I found myself with a bit more free time than usual. I decided to look back on some of my older code and… wow. Refactoring time!&lt;/p&gt;
&lt;h2&gt;Refactoring?!&lt;/h2&gt;
&lt;p&gt;I remember when Bob first used the term. It brought back bad memories of maths!&lt;/p&gt;
&lt;p&gt;Refactoring code is the process of making amendments, changes or improvements to your existing code. The end program or application will still operate in the same way, it’s just that the underlying code will be cleaner, leaner or faster.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Why Bother?&lt;/h2&gt;
&lt;p&gt;There are many reasons why this is useful, some of which I’ve experienced myself lately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most importantly, it makes you feel good!! Seriously, how good does it feel to look back at code you wrote just 6 months ago and think to yourself, “What the heck was I thinking?!”. Seeing the improvement in your coding ability is so important to keeping you on the coding path. If you don’t see an improvement, you won’t be motivated to keep learning!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your code becomes more refined. Check out the examples below. Refactoring just one line of code can make your code more elegant and professional. Also, it doesn’t hurt to have a lower line count!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your projects will grow. I had an extremely simple CLI based app I wrote a year ago that I believed was “finished”. After revisiting and refactoring the code, I started to see how I could add further functionality to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactoring code is an invaluable skill. If you critique and improve your own code enough then you’ll be comfortable and savvy enough to refactor code written by your peers and the wider community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You’ll tend to stop making the same “mistakes” in your current, new code. By going back and refactoring your older code you’ll catch on to any unPythonic tendencies you may have, like the ones below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, I believe doing so can help to build relationships! Refactoring code is one of the ways Bob and I maintain our friendship. We share any non-proprietary code that we write with one another so the other can refactor and provide input. If you can get this sort of thing happening with your peers at work or in the community you’ll be better off for it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Refactoring Examples&lt;/h2&gt;
&lt;p&gt;Okay finally, here we go! Here are some specific lines of the code I revisited and refactored this week. Don’t judge me!&lt;/p&gt;
&lt;h3&gt;Unnecessary Code in a for Loop&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in range(len(durations)):
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found code where I was using &lt;code&gt;range&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; to get the limit of my &lt;code&gt;for&lt;/code&gt; loop. It’s a simple one but something I was used to doing with C type programming. Thanks to Python’s awesomeness, I changed it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in durations:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;String Formatting Woes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;#39;The course takes &amp;#39; + str(total_hours) + &amp;#39; hours to complete.&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ouch! Again, a simple fix and most definitely a remnant from having learned other languages. Refactored!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(‘The course takes {} hours to complete’.format(total_hours))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;camelCasing&lt;/h3&gt;
&lt;p&gt;I found a heap of variables and functions written in camel case. &lt;em&gt;shudder&lt;/em&gt;. They’ll no longer be a problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quotesListDoc
userInput
quotesList
currentTime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Manually opening and closing&lt;/h3&gt;
&lt;p&gt;While not particularly terrible, I found it was much more Pythonic to use a &lt;code&gt;with&lt;/code&gt; statement to handle the opening and closing of a text file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;quotesListDoc = open(“list.txt&amp;quot;, &amp;quot;a&amp;quot;)
quotesListDoc.write(&amp;#39;\n&amp;#39; + time.strftime(&amp;quot;%c&amp;quot;) + &amp;#39;\n&amp;#39;)
    for i in range(len(KIDQUOTES)):
        quotesListDoc.write(KIDQUOTES[i] + &amp;#39;\n&amp;#39;)
quotesListDoc.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ll just refactor the whole damn thing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(‘list.txt’, ‘a’) as quotes_doc:
    quotes_doc.write(‘\n’ + time.strftime(“%c”) + ‘\n’)
    for i in quotes:
        quotes_doc.write(quotes[i] + ‘\n’)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Including print in input()&lt;/h3&gt;
&lt;p&gt;I had a nasty habit of using print() to write my question or statement when I was asking for input().&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(&amp;#39;Hit Y to continue or N to add another issue. Y/N&amp;#39;)
userInput = input()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refactor!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_input = input(‘Hit Y to continue or N to add another issue. Y/N: ‘)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While most definitely simplistic, the examples above demonstrate how important refactoring is. When I first wrote these snippets, I was using the best way I thought possible.&lt;/p&gt;
&lt;p&gt;I just didn’t know any better.&lt;/p&gt;
&lt;p&gt;Having gone back and refactored it I’m absolutely stoked to see how far I’ve come! Not only does the code look better but I’m also able to see where I can make future improvements.&lt;/p&gt;
&lt;p&gt;The code for writing quotes to a text file. A text file? An sqlite db would be way cooler! Realisations like this make me happy and more motivated than ever to continue learning.&lt;/p&gt;
&lt;p&gt;Now go look at some of your earlier code and see what you can refactor!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="beginner"></category><category term="learning"></category><category term="examples"></category><category term="code"></category><category term="refactoring"></category></entry><entry><title>Flask Web Server Port Mapping</title><link href="https://pybit.es/flask-ports.html" rel="alternate"></link><published>2017-07-01T20:31:00+02:00</published><updated>2017-07-01T20:31:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-07-01:/flask-ports.html</id><summary type="html">&lt;p&gt;A quick post on Flask App port mapping&lt;/p&gt;</summary><content type="html">&lt;p&gt;If like me you’re obsessed with Python Flask, you might have asked yourself, “How on Earth do I run multiple Flask apps at the same time?!”.&lt;/p&gt;
&lt;p&gt;It’s actually pretty simple!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What Happens at Default Settings&lt;/h2&gt;
&lt;p&gt;Before I get to the solution, I’ll first show you what happens if you leave everything at the default settings as it’s important to know.&lt;/p&gt;
&lt;p&gt;For this test I’m running my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; and my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/083"&gt;Timezone List App&lt;/a&gt; together.&lt;/p&gt;
&lt;p&gt;The app you launch &lt;em&gt;first&lt;/em&gt; will always take priority. In this case, my Pay Calculator interface shows up on 127.0.0.1:5000. The interesting thing is that when I run the Timezone App, there’s no error. Python still launches a web server on 127.0.0.1:5000.&lt;/p&gt;
&lt;p&gt;The catch is that all calls from my browser to localhost (127.0.0.1) are routed to the web server created by the Pay Calc app. If I try and browse to a web page that is &lt;em&gt;unique&lt;/em&gt; to the Timezone App, I get a 404 error. The page doesn’t exist in the Pay Calc app and therefore the call fails.&lt;/p&gt;
&lt;p&gt;As expected, the second I CTRL+C my Pay Calc app, everything springs to life for the Timezone app. Browsing to localhost brings up the Timezone interface and browsing to the aforementioned unique page works.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Specify a Port!&lt;/h2&gt;
&lt;p&gt;The solution? Specify a port number!&lt;/p&gt;
&lt;p&gt;In Flask code, it’s the &lt;code&gt;app.run()&lt;/code&gt; code that kicks everything off. Without that code, there’s no app.&lt;/p&gt;
&lt;p&gt;By default, this starts the web server on 127.0.0.1:5000. We can change this!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(port=5001)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Believe it or not, it’s as simple as that!&lt;/p&gt;
&lt;p&gt;Throw the port number you want to access the web app from to &lt;code&gt;app.run()&lt;/code&gt; and the web server launches on that port. So simple and easy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion and Discussion&lt;/h2&gt;
&lt;p&gt;This is as simple as it gets. There is however something else to discuss.&lt;/p&gt;
&lt;p&gt;If you’re trying to run two or more concurrent web apps, it’s likely that you want these apps running in a sort of “production” environment. That is, you want them running all the time, it’s no longer just for a test.&lt;/p&gt;
&lt;p&gt;That’s exactly my case. I want a few Flask apps running from my NAS on my local network at home.&lt;/p&gt;
&lt;p&gt;The web server bundled in Flask is a development server. It may be fine for my home network but best practice mandates I use a dedicated web server like &lt;a href="http://nginx.org/en/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or another question, should I even use Flask for making production apps? Once I get to this level of production should I be moving to Django?&lt;/p&gt;
&lt;p&gt;I’m actually not too sure! I’m definitely keen to hear everyone’s opinion on this. What do you use (if at all) for this sort of thing?&lt;/p&gt;
&lt;p&gt;Do you use Flask for small apps and testing and Django for the bigger and badder stuff?&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="learning"></category><category term="ports"></category><category term="apps"></category></entry><entry><title>Module of the Week - Pendulum</title><link href="https://pybit.es/pendulum.html" rel="alternate"></link><published>2017-06-24T09:00:00+02:00</published><updated>2017-06-24T09:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-24:/pendulum.html</id><summary type="html">&lt;p&gt;A brief overview of the Pendulum datetime module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ll come clean. When it comes to Python datetime, I’m a shocker! I always struggle with the whole formatting side of things.&lt;/p&gt;
&lt;p&gt;This week, I discovered the Pendulum Package and I swear I heard angels sing.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is Pendulum?&lt;/h2&gt;
&lt;p&gt;Let’s be clear, we’re not talking about one of my &lt;a href="https://en.wikipedia.org/wiki/Pendulum_(drum_and_bass_band)"&gt;favourite bands&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Pendulum is a Python Package designed to make the manipulation of Python datetimes easier.  In some cases, you can even totally replace every instance of &lt;code&gt;datetime&lt;/code&gt; in your code with &lt;code&gt;pendulum&lt;/code&gt; and the code should still work.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;There are so many cool functions and use cases which (unfortunately for this article) are explained clearly and thoroughly in the &lt;a href="https://pendulum.eustace.io/docs/"&gt;Pendulum Documentation&lt;/a&gt;. I’m not going to bother copying and pasting so I strongly urge you to check it out.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;My Favourite Uses&lt;/h2&gt;
&lt;p&gt;The first thing I’ll point out is that Pendulum has a wonderfully simplistic way of describing what each function does. Take the following for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;now = pendulum.now()
print(now)
&amp;#39;2016-06-28T16:51:45.978473-05:00&amp;#39;

today = pendulum.today()
print(today)
&amp;#39;2016-06-28T00:00:00-05:00&amp;#39;

tomorrow = pendulum.tomorrow(&amp;#39;Europe/London&amp;#39;)
print(tomorrow)
&amp;#39;2016-06-29T00:00:00+01:00&amp;#39;

yesterday = pendulum.yesterday()
print(yesterday)
&amp;#39;2016-06-27T00:00:00-05:00&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is taken straight from the docs. I’m just making a point. How simple is that to read? &lt;code&gt;.tomorrow()&lt;/code&gt; and &lt;code&gt;.yesterday()&lt;/code&gt; are super useful!&lt;/p&gt;
&lt;p&gt;On top of that, you can even specify the timezone of the place you want to know the time of, thus the &lt;code&gt;.tomorrow(‘Europe/London’)&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;My absolute favourite Pendulum feature is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; pendulum.now().to_datetime_string()
&amp;#39;2017-06-24 09:35:38&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; pendulum.now().to_day_datetime_string()
&amp;#39;Sat, Jun 24, 2017 09:36 AM’
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pendulum has a brilliant set of formatting options for datetime results. No longer do I need to use the convoluted and hard to remember &lt;code&gt;strftime&lt;/code&gt; type formatting method (%D %M %Y). Pendulum will do it all for me! Mmmm.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
On top of all of this, I feel like date comparisons, calculations and timezone manipulation has also been made easier. For example, you can create a Pendulum instance with a specified timezone and time, then change the timezone for it on the fly with ease:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in_paris = pendulum.create(2016, 8, 7, 22, 24, 30, tz=&amp;#39;Europe/Paris&amp;#39;)
&amp;#39;2016-08-07T22:24:30+02:00&amp;#39;
in_paris.in_timezone(&amp;#39;America/New_York&amp;#39;)
&amp;#39;2016-08-07T16:24:30-04:00&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
There are even more advanced functions when it comes to calculations (addition and subtraction). You can easily add/subtract days, months, years, hours, minutes and seconds. Totally awesome!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I’m now using Pendulum for all of my datetime needs. I’m sure the datetime module is capable of doing many of the jobs I’ve mentioned but again, I’ve always found it confusing and tedious.&lt;/p&gt;
&lt;p&gt;Pendulum makes things even more &lt;a href="https://pendulum.eustace.io/docs/#difference-for-humans"&gt;human readable&lt;/a&gt; and approachable (for me anyway!).&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/sdispater"&gt;Sébastien Eustace&lt;/a&gt; for this wonderful package!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="pendulum"></category><category term="datetime"></category><category term="pytz"></category><category term="timezones"></category></entry><entry><title>How to Write a Python Subclass</title><link href="https://pybit.es/python-subclasses.html" rel="alternate"></link><published>2017-06-17T19:37:00+02:00</published><updated>2017-06-17T19:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-17:/python-subclasses.html</id><summary type="html">&lt;p&gt;In this article I cover Python subclasses and inheritance using a relatable code example scenario.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an article on Python Subclasses and inheritance. Before reading on, if you haven’t done so already, I strongly recommend you check out my write up on &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s get cracking!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Python Sub-what?&lt;/h2&gt;
&lt;p&gt;Let’s say you have a class already set up. In my &lt;a href="https://pybit.es/python-classes.html"&gt;previous article on classes&lt;/a&gt;, I created what I’m going to refer to as a “single tier” Person class. That is, you use the &lt;code&gt;Person&lt;/code&gt; class to create a person object. That’s it. (I created Bob using this class. Muahaha!).&lt;/p&gt;
&lt;p&gt;What if I wanted some more depth though? Let’s use vehicles as an example. I’ll get really simplistic here.&lt;/p&gt;
&lt;p&gt;Vehicle &amp;gt; Car &amp;gt; Mercedes.&lt;/p&gt;
&lt;p&gt;See that? Now we’re talking! Multiple levels! &lt;code&gt;Vehicle&lt;/code&gt; would be the parent class, &lt;code&gt;Car&lt;/code&gt; would be the &lt;strong&gt;Subclass&lt;/strong&gt; and &lt;code&gt;Mercedes&lt;/code&gt; would be an object we create using the &lt;code&gt;Car&lt;/code&gt; subclass.&lt;/p&gt;
&lt;p&gt;Not only that, but the Mercedes we just created will &lt;em&gt;inherit&lt;/em&gt; all of the attributes and functions associated with the &lt;code&gt;Vehicle&lt;/code&gt; parent class &lt;em&gt;and&lt;/em&gt; those from the &lt;code&gt;Car&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;That is, the Mercedes will be deemed a car vehicle in that it has four wheels and a windshield as opposed to a motorbike vehicle which only has two wheels and a tiny windshield. Both the car and the motorbike are vehicles but just two different &lt;em&gt;types&lt;/em&gt; of vehicles. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Familiar Example&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Full code &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To demonstrate this in code, I wrote up a &lt;code&gt;Boss&lt;/code&gt; class. Let’s face it, we’ve all had a job at some point in our lives. It’s also more than likely that we’ve copped good and bad bosses and managers along the way.&lt;/p&gt;
&lt;p&gt;Imagine if you would, a game with a Boss in it. I can imagine myself coding up a Boss class similar to the below. I’d then use this code to create different types of Bosses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_attitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_behaviour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A full explanation of a class written like this is found in my &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A boss would have a &lt;code&gt;name&lt;/code&gt;, an &lt;code&gt;attitude&lt;/code&gt;, a &lt;code&gt;behaviour&lt;/code&gt; and a &lt;code&gt;face&lt;/code&gt; (facial expression!).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Now, let’s start working on the Boss Subclasses. What kind of Bosses do we want to be able to make? How about a &lt;code&gt;GoodBoss&lt;/code&gt; and a &lt;code&gt;BadBoss&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What did I do here? It’s very similar to coding the parent class. Note the differences though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We start by defining the subclass &lt;code&gt;GoodBoss&lt;/code&gt;. See how it’s got “Boss” between the brackets? That’s because we’re defining a &lt;code&gt;GoodBoss&lt;/code&gt;, &lt;code&gt;Boss&lt;/code&gt; object. This will ensure the &lt;code&gt;GoodBoss&lt;/code&gt; class inherits everything from the &lt;code&gt;Boss&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the init dunder, we have to specify &lt;code&gt;self&lt;/code&gt; as well as all of the attributes defined in the parent &lt;code&gt;Boss&lt;/code&gt; class. We can then &lt;strong&gt;add&lt;/strong&gt; whatever ‘GoodBoss’ unique attributes we want, such as a “laugh” attribute (good bosses laugh right?). In this case, I’m not adding any, thus the last attribute you see is &lt;code&gt;face&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;super()&lt;/code&gt; statement is probably the most confusing. It relates to the inheritance from the base class. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;I’d be doing you a disservice trying to explain super() in one bullet point so I’m going to direct you to where I read up on it. The 3rd answer in &lt;a href="https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods"&gt;this Stack Overflow thread&lt;/a&gt; is amazing as is this &lt;a href="https://www.programiz.com/python-programming/methods/built-in/super"&gt;Programiz article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Phew! Okay. Next up, we can define some GoodBoss specific class functions. These can &lt;em&gt;only&lt;/em&gt; be used by an object created using the &lt;code&gt;GoodBoss&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def nurture_talent(self):
    #A good boss nurtures talent making employees happy!
    print(&amp;quot;The employees feel all warm and fuzzy then put their talents to good use.&amp;quot;)

def encourage(self):
    #A good boss encourages their employees!
    print(&amp;quot;The team cheers, starts shouting awesome slogans then gets back to work.&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does a good boss do? He/She nurtures talent to help employees grow! They also encourage their teams to keep them motivated!&lt;/p&gt;
&lt;p&gt;These two class functions simply print out the specified message when called. If this &lt;em&gt;were&lt;/em&gt; a game, rather than just printing, we could have these functions perform transactions like “increase &lt;code&gt;employee_happiness&lt;/code&gt; by 20 points, or something similar.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
In the same way, we can define a &lt;code&gt;BadBoss&lt;/code&gt; subclass. You can find the &lt;code&gt;BadBoss&lt;/code&gt; subclass code in our code repo &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Who’s the Boss?!&lt;/h2&gt;
&lt;p&gt;Time for some fun! I’ll be the good boss, Bob can be the bad boss. (Sorry brother!).
The easiest way to test this out is to import the code into the interactive shell.&lt;/p&gt;
&lt;p&gt;I’ve got a file called &lt;code&gt;boss_class.py&lt;/code&gt;. I’m initiating the python shell from the same folder the script lives in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boss_class&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BadBoss&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
Once imported, we can create a “standard” &lt;code&gt;Boss&lt;/code&gt;, a &lt;code&gt;GoodBoss&lt;/code&gt; or a &lt;code&gt;BadBoss&lt;/code&gt;. Let’s start with the good one!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian = GoodBoss(&amp;quot;Julian&amp;quot;, &amp;quot;Positive&amp;quot;, &amp;quot;Sociable&amp;quot;, &amp;quot;Smiling&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
We can then use the class functions associated with both the &lt;code&gt;Boss&lt;/code&gt; class &lt;em&gt;and&lt;/em&gt; &lt;code&gt;GoodBoss&lt;/code&gt;  subclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian.attitude
‘Positive’

julian.get_behaviour()
‘Sociable’

julian.nurture_talent()
The employees feel all warm and fuzzy then put their talents to good use.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wish I really had that effect on people! Also, this is inheritance in action! We “inherited” the &lt;code&gt;get_behaviour&lt;/code&gt; function from the &lt;code&gt;Boss&lt;/code&gt; class! Woohoo!&lt;/p&gt;
&lt;h2&gt;Ending on a low&lt;/h2&gt;
&lt;p&gt;I know we’re on a roll but Bad Bosses always have a way of ruining things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = BadBoss(&amp;quot;Bob&amp;quot;, “Crazy”, &amp;quot;Anti-Social&amp;quot;, &amp;quot;Scowl of Hate&amp;quot;)

bob.face
&amp;#39;Scowl of Hate&amp;#39;

bob.get_attitude()
‘Crazy’

bob.hoard_praise()
The employees feel cheated and start plotting Bob&amp;#39;s demise while he stares at his own reflection.

bob.yell()
Everyone stares while Bob yells. Someone shouts, &amp;#39;Won&amp;#39;t somebody PLEASE think of the children?!’
Bob storms off, everyone comforts the victim and one person offers to arrange an &amp;#39;accident&amp;#39; for Bob.
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I love Bob (we all know he’s the best thing since sliced bread!). I also love my AWS overlords.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How cool are classes, subclasses and inheritance?!&lt;/p&gt;
&lt;p&gt;Not only has this helped me better plan my code but it’s also allowed me to better appreciate other code. I can only imagine how many classes and subclasses exist in video games (World of Warcraft for example!).&lt;/p&gt;
&lt;p&gt;Once you get the hang of them, classes really are quite easy to use. They’re a series of set and forget templates/blueprints for you to call at any time. Oh the possibilities… Yum!&lt;/p&gt;
&lt;p&gt;Oh and speaking of templates. I created a framework/blank class and subclass template for Day 77 of our 100 days of code challenge. Check it out &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/077"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;(Psst! Did anyone get the &lt;a href="https://www.youtube.com/watch?v=RybNI0KB1bg"&gt;Simpsons Reference&lt;/a&gt;?)&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>Using Python Requests on a Page Behind a Login</title><link href="https://pybit.es/requests-session.html" rel="alternate"></link><published>2017-06-09T21:48:00+02:00</published><updated>2017-06-09T21:48:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-09:/requests-session.html</id><summary type="html">&lt;p&gt;In this post I discuss using the requests module on web pages behind a login&lt;/p&gt;</summary><content type="html">&lt;p&gt;A great frustration in my web scraping journey has been finding a page tucked away behind a login. I didn’t actually think it was possible to scrape a page locked away like this so I didn’t bother Googling it. Bad Julian, bad!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;requests&lt;/code&gt; module to pull data from a page behind a login is relatively simple. It does however require a little bit of HTML know how.&lt;/p&gt;
&lt;p&gt;For this article I’m going to demonstrate logging into &lt;a href="https://www.freecycle.org"&gt;freecycle.org&lt;/a&gt; (totally check it out if you don’t know what it is!).&lt;/p&gt;
&lt;p&gt;Full code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/051"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;POSTing data&lt;/h2&gt;
&lt;p&gt;First you need to understand how data is handled at the HTML page level. &lt;/p&gt;
&lt;p&gt;The login prompt on a web page is an HTML form. As such, when you enter your credentials and click submit, you’re sending your data to the authentication application behind the page. This is called a &lt;strong&gt;POST&lt;/strong&gt;. You’re pushing, or &lt;em&gt;POSTing&lt;/em&gt; your data.&lt;/p&gt;
&lt;p&gt;What you’re doing with the requests module is automating this. Instead of you typing the data in yourself, your script will do it for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; on the other hand is precisely the opposite. GET, as the name implies, &lt;em&gt;pulls&lt;/em&gt; data. Very useful for requests right?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Get Dirty, Start Digging&lt;/h2&gt;
&lt;p&gt;The next step is to start digging around the HTML code for the login page of the site. What we’re looking for is the HTML &lt;code&gt;form&lt;/code&gt; code that our script will look for so it knows where to plug in your credentials.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The login page for freecycle.org is &lt;a href="https://my.freecycle.org"&gt;https://my.freecycle.org&lt;/a&gt;. Inspect the HTML page using your browser of choice (I use Google Chrome).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, start working your way through the HTML until you find the &lt;code&gt;form&lt;/code&gt; HTML tag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within the form tag look for the &lt;code&gt;method&lt;/code&gt; argument and you’ll see it says “post”. This means we’re in the right place!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again, within the tag, you’ll see the &lt;code&gt;action&lt;/code&gt; argument. The URL specified is what you want to note down. In this case it’s: https://my.freecycle.org/login. This URL is where the credentials are used once you enter them in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, drill down further into the &lt;code&gt;form&lt;/code&gt; tag and look for the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags. There should be at least two (username and password). The username input tag is generally of &lt;code&gt;type=text&lt;/code&gt; and the password, &lt;code&gt;type=password&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look within these &lt;code&gt;input&lt;/code&gt; tags for a &lt;code&gt;name&lt;/code&gt; argument. This is the &lt;em&gt;name&lt;/em&gt; of this input field. This is also how &lt;code&gt;requests&lt;/code&gt; is going to know &lt;em&gt;where&lt;/em&gt; to “enter” your credentials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the freecyle.org login page the username input field has &lt;code&gt;name&lt;/code&gt; &lt;code&gt;username&lt;/code&gt;. The password input field has &lt;code&gt;name&lt;/code&gt; &lt;code&gt;pass&lt;/code&gt;. Note these two names down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What are you Scraping?&lt;/h2&gt;
&lt;p&gt;At this point you’ll want to actually login to the website and figure out what you’re scraping.&lt;/p&gt;
&lt;p&gt;Consider the following for your own situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you login to freecycle.org in a browser, the page you’re redirected to has the URL: https://my.freecycle.org/home/groups. This is &lt;strong&gt;not&lt;/strong&gt; a limiting factor. That is, this is not the only page &lt;code&gt;requests&lt;/code&gt; has access to for scraping goodness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to scrape a list of my active posts, the URL for the “My Posts” page is: https://my.freecycle.org/home/posts. This is precisely the URL I’ll be pointing &lt;code&gt;requests&lt;/code&gt; at.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue on as you normally would with &lt;code&gt;requests&lt;/code&gt; to grab your data. Look for the relevant HTML tags and IDs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Talk is Cheap, Show me the Code!&lt;/h2&gt;
&lt;p&gt;Finally! Code time! With all of the data on hand, we can piece this baby together.&lt;/p&gt;
&lt;p&gt;Assign your two URLs to variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#This URL will be the URL that your login form points to with the &amp;quot;action&amp;quot; tag.
POST-LOGIN-URL = &amp;#39;https://my.freecycle.org/login&amp;#39;

#This URL is the page you actually want to pull down with requests.
REQUEST-URL = &amp;#39;https://my.freecycle.org/home/posts&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pythonic and self-explanatory. Let’s move on.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Now we want to set up a dict that contains our login information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;payload = {
    ‘username’: ‘your_username’,
    &amp;#39;pass’: ‘your_password&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The keys in the dict are the &lt;code&gt;name&lt;/code&gt;s of the input fields collected earlier. Eg: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt;. The values associated with each are (you guessed it!) your username and password details. It’d be a good idea to at the very least, store your password in an environment variable and call it in for use in the script.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Finally, we want to open our &lt;code&gt;requests&lt;/code&gt; &lt;code&gt;session&lt;/code&gt;. Yep! Requests will create its own session instance (useful for multiple requests to the same site):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with requests.Session() as session:
    post = session.post(POST-LOGIN-URL, data=payload)
    r = session.get(REQUEST-URL)
    print(r.text)   #or whatever else you want to do with the request data!
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We’ll use a &lt;code&gt;with&lt;/code&gt; statement to open the request Pythonically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 2 &lt;strong&gt;POSTS&lt;/strong&gt; the data to the login URL we noted down earlier. It requires &lt;code&gt;data&lt;/code&gt; to be specified, in which case we pass it the &lt;code&gt;payload&lt;/code&gt; dict we created. This is the part that enters our username and password!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 3 is our traditional requests call using &lt;code&gt;session.get&lt;/code&gt; to the URL we want to scrape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 4 is where you’ll continue on with your requests work. To keep it simple I’ll leave it at a &lt;code&gt;print&lt;/code&gt; statement that will print the entire page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And we’re done! That’s it! You can now carry on requesting data from the site behind the login.&lt;/p&gt;
&lt;p&gt;The next challenge is to get past those pesky CAPTCHA boxes. Don’t get us started on those!&lt;/p&gt;
&lt;p&gt;For simple sites that just use a text login system though, this process works. The code is actually quite simple. Rather, it’s the preparation and digging that’s time consuming!&lt;/p&gt;
&lt;p&gt;I haven’t attempted this with Scrapy or other modules yet so if you can do this another way I’d love to hear how!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="requests"></category><category term="code"></category><category term="web scraping"></category><category term="python"></category></entry><entry><title>Flask Sessions</title><link href="https://pybit.es/flask-sessions.html" rel="alternate"></link><published>2017-06-02T21:57:00+02:00</published><updated>2017-06-02T21:57:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-02:/flask-sessions.html</id><summary type="html">&lt;p&gt;In this quick post I discuss Flask Sessions and provide a few use cases.&lt;/p&gt;</summary><content type="html">&lt;p&gt;More Flask?! Yes! More Flask! I apologise for nothing! This is however a quick article for anyone wanting to learn about Flask Session Objects.&lt;/p&gt;
&lt;p&gt;One of my most exciting discoveries as of late has been the &lt;code&gt;session&lt;/code&gt; object. I stumbled upon this useful little thing while making my &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/060"&gt;Pay Calculator App&lt;/a&gt; for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s discuss sessions in the usual Julian format.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Flask Session Object?&lt;/h2&gt;
&lt;p&gt;Think of a Flask Session Object as a special variable that persists for the life of the browser session that’s connected to the Flask app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Say What?!&lt;/h2&gt;
&lt;p&gt;Well, here:&lt;/p&gt;
&lt;p&gt;I wanted to make a pay calculator web application that allowed me to calculate how much money I’d be paid based on me entering my hourly wage and how many hours I worked. Simple right?&lt;/p&gt;
&lt;p&gt;Well, what if, as part of this app, I want to have another web page that could extrapolate my entire annual salary from just the hourly wage? I don’t want these two functions to exist on the same page.&lt;/p&gt;
&lt;p&gt;I also don’t want to ask the user to enter in their salary every time they flick between these two pages/apps, that’d be annoying right? I’d need a variable that could store the hourly wage and keep that data accessible to any of the web apps running from this Flask app.&lt;/p&gt;
&lt;p&gt;This is where you’d use a &lt;code&gt;session&lt;/code&gt; object. You’d assign the user’s hourly wage to the &lt;code&gt;session&lt;/code&gt; object which you would then make available to use across different web pages in your app.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Code Me Up!&lt;/h2&gt;
&lt;p&gt;The thing that surprised me was how simple it was. Coding wise, you use the object in exactly the same way you’d use a normal variable. It still has to abide by normal global/local rules in your code too.&lt;/p&gt;
&lt;p&gt;To assign the hourly wage to a &lt;code&gt;session&lt;/code&gt; object I did this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code on the right is just pulling in the data from the HTML form with the name “wage”. It stores that as a float into a &lt;code&gt;session&lt;/code&gt; object of the same name (wage).&lt;/p&gt;
&lt;p&gt;It’s seriously as simple as that.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Super Secret Keys&lt;/h2&gt;
&lt;p&gt;I know all of this sounds a lot like cookies. It should. Flask &lt;code&gt;session&lt;/code&gt; objects exist on top of standard cookies. All that’s different is that the cookie is locked down with a secret key.&lt;/p&gt;
&lt;p&gt;This does not mean the data is private! The cookie data is visible but &lt;strong&gt;cannot be modified unless you have the secret key&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This secret key needs to be accessible to your app code. You’d preferably make it an environment variable that isn’t accessible to the outside world. I made mine as complex as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.secret_key = &amp;quot;Test_Secret_Key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Test_Secret_Key&lt;/code&gt; being the password. Good luck cracking this bad boy!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;The Pay Calc App Use Case&lt;/h2&gt;
&lt;p&gt;In my Pay Calculator App, I create the &lt;code&gt;wage&lt;/code&gt; session object in my index ‘/‘ route:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def index():    
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;wage&amp;#39; in request.form:
        session[&amp;#39;wage&amp;#39;] = float(request.form.get(&amp;#39;wage&amp;#39;))
        return redirect(url_for(&amp;#39;pay_calc&amp;#39;))
    return render_template(&amp;quot;index.html&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What you’ll notice is that &lt;code&gt;wage&lt;/code&gt; is created and then returned in the &lt;code&gt;redirect&lt;/code&gt; to the page associated with the &lt;code&gt;pay_calc&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This essentially makes it available to the second page of the app.&lt;/p&gt;
&lt;p&gt;I then check for it in the code for the second page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/pay&amp;#39;, methods=[&amp;#39;GET&amp;#39;, &amp;#39;POST&amp;#39;])
def pay_calc():
    pay = &amp;#39;&amp;#39;
    if request.method == &amp;#39;POST&amp;#39; and &amp;#39;hours&amp;#39; in request.form and &amp;#39;wage&amp;#39; in session:
        hours = float(request.form.get(&amp;#39;hours&amp;#39;))
        pay = calc_wage(session[&amp;#39;wage&amp;#39;], hours)
    return render_template(&amp;quot;pay_calc.html&amp;quot;,
                            pay=pay)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement checks to see if the &lt;code&gt;wage&lt;/code&gt; session object exists. If it doesn’t, the calculation within the &lt;code&gt;if&lt;/code&gt; won’t take place.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Other Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You could use this for a personal touch on your site. A user enters their name which allows you to refer to them by their name on relevant screens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A to-do list! The entire list is in the &lt;code&gt;session&lt;/code&gt; object which can be called and loaded on any page the user loads on your site. It’d be a good idea to have data persistence as well in this scenario though!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dare I say it? Ordering food online is a great use case for this. Add all selected items to a &lt;code&gt;session&lt;/code&gt; object to keep track of the user order while they browse. Once the order is complete, the data can be scrapped when the browser session closes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any sort of online calculation service: currency exchange, electricity, insurance, superannuation. These all require temporary data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flight tracking information (I may be stretching it here). A user would enter details of a flight to track and that data would stay live for the duration of the session. There’s no need for it to be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even an old school type of browser game like Jetman. The score is retained for the duration of the session but once the browser closes, you start from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think you get the point! The &lt;code&gt;session&lt;/code&gt; object is incredibly useful!&lt;/p&gt;
&lt;p&gt;I’ll admit, it did take some time to wrap my head around how to get it working at a code level. The concept is simple but writing the code such that it worked took some testing and playing.&lt;/p&gt;
&lt;p&gt;If you have any cool use cases or examples of &lt;code&gt;session&lt;/code&gt; object usage, let us know!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="beginner"></category><category term="sessions"></category><category term="learning"></category><category term="examples"></category><category term="code"></category></entry><entry><title>How to Write a Python Class</title><link href="https://pybit.es/python-classes.html" rel="alternate"></link><published>2017-05-25T20:37:00+02:00</published><updated>2017-05-25T20:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-25:/python-classes.html</id><summary type="html">&lt;p&gt;In this post I cover learning Python classes by walking through one of our 100 days of code submissions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another week, another scary Python construct to tackle. Classes! I’m so glad we’re covering Object Oriented Programming in &lt;a href="http://pybit.es/codechallenge20.html"&gt;this week’s code challenge&lt;/a&gt;. Thanks to this challenge, I wrote my first class! In this post I explain what a Python class is (in my own words of course!) and break down my code to help  with the learning.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Python Class?&lt;/h2&gt;
&lt;p&gt;It’s hard to explain. Pretty much, a class is a way of “generically” representing some sort of object. (Confusing right?) Let me try with an example.&lt;/p&gt;
&lt;p&gt;What’s something we’re all familiar with… Angry Birds! (At least, you should be if you’ve ever owned an iPhone!).&lt;/p&gt;
&lt;p&gt;Let’s go with the Pigs. In Angry Birds there are a heap of different types of Pigs to kill. Some are large, some are small. Some have hats that give them extra health and some have helmets that make them almost indestructible. What’s one thing they all have in common? They’re all Pigs!&lt;/p&gt;
&lt;p&gt;If you were to be writing the code for Angry Birds, you wouldn’t manually code up each Pig, you’d create a &lt;em&gt;Pig Class&lt;/em&gt; that you could call every time you wanted to create a Pig. When you create the Pig Class, you would specify the &lt;em&gt;attributes&lt;/em&gt; that a Pig could be created with, e.g., how much health the pig gets. &lt;/p&gt;
&lt;p&gt;I’m being simplistic but you get the idea. The base “Pigness” is there. A Pig will &lt;em&gt;always&lt;/em&gt; have a set amount of health to begin with, you’re just specifying how much it gets when you create it.&lt;/p&gt;
&lt;p&gt;I wrote a basic Person Class this week for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;. I’ll break it down for you to make this easier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Person Class&lt;/h2&gt;
&lt;p&gt;The code for this example is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/054"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A person is as simple as it gets. We’re all people but we differ immensely. We’re different ages, different heights, weights, sexes, colours and so on. At the end of the day, we’re still people - which makes us a great Class use case!&lt;/p&gt;
&lt;p&gt;In the below code, I define a person class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The first line is simple. We’re &lt;em&gt;defining&lt;/em&gt; a class called “Person” and it’s an object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; is a dunder method used to say that we’re &lt;em&gt;creating&lt;/em&gt; the Person object (using the Person class definition).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the difference between &lt;em&gt;defining&lt;/em&gt; the class and &lt;em&gt;creating&lt;/em&gt; the object based on the class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the ()s we specify all of the attributes we want the Person object to be created with. Self is pretty self explanatory (pun intended!). It’s referring to itself. That is, the actual Person object that’s being created. (You’ll see in a sec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then assign these attributes to variables because they’ll contain data once a person object is created. &lt;code&gt;self.name&lt;/code&gt; for example, is then assigned “name” which will actually be a name at object creation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating A Person Object&lt;/h2&gt;
&lt;p&gt;At this point, we’ve defined a Person. A Person will have the attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;gender&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s create that person!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = Person(&amp;quot;Bob&amp;quot;, 30, 180, 80, &amp;quot;Male&amp;quot;, &amp;quot;Professional Awesome Programmer Guy&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like passing variables to a function, we pass the attributes to the Person Class. What we’re doing here is we’re assigning all of these details (in the order specified in the class) to the &lt;code&gt;bob&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Yay! We just used the &lt;code&gt;Person&lt;/code&gt; class to create &lt;code&gt;bob&lt;/code&gt;! Creepy right?!&lt;/p&gt;
&lt;p&gt;We can then do funky things like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.age
30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the &lt;code&gt;self&lt;/code&gt; stuff starts to make sense. Look back at the class creation and substitute the word &lt;code&gt;self&lt;/code&gt; with &lt;code&gt;bob&lt;/code&gt;. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating Class Functions&lt;/h2&gt;
&lt;p&gt;If we want, we can also create some functions specific to this class that we can call to do the same thing. Here’s another way of getting &lt;code&gt;bob&lt;/code&gt;’s job (this is specified in the class):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_job(self):
    return self.job
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then call this as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.get_job()
Professional Awesome Programmer Guy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the same output as running &lt;code&gt;bob.job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Getting Funky with Class Functions&lt;/h2&gt;
&lt;p&gt;What’s something interesting we could do? This is where I came up with the idea of calculating a person’s BMI (Body Mass Index).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bmi(self):
    return (self.weight / ((self.height / 100) ** 2))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BMI is calculated using the equation in the above: weight (kgs) divided by height in metres squared.&lt;/p&gt;
&lt;p&gt;Once a Person object has been created, we can then check what their BMI is as per the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.bmi()
24.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty cool right?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;When Would you use a Class?&lt;/h2&gt;
&lt;p&gt;I’d say you’d want to use them any time you’re dealing with repetitive data sets.&lt;/p&gt;
&lt;p&gt;For example, if you were dealing with data from a movie database you could make a Movie Class because we know that each movie is going to have the same attributes: title, duration, year, director and so on.&lt;/p&gt;
&lt;p&gt;You could use them for anything really.&lt;/p&gt;
&lt;p&gt;Consider a complaints system at a company. A complaint would be structured the same way every time: ID, Customer Name, Affected Service, Date, Complaint Text.&lt;/p&gt;
&lt;p&gt;The best part is that by creating your own class functions you can do all sorts of weird and wonderful things with the data. Imagine a &lt;code&gt;complaint.email()&lt;/code&gt; function. It could email off the complaint to the correct department if it was deemed legitimate!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Classes do take a little getting used to, especially when you start playing with subclasses (Code Challenge 20!) but they’re so great and totally necessary if you’re diving into Object Oriented Programming!&lt;/p&gt;
&lt;p&gt;My recommendation is to open up an editor and code up a quick and dirty class right now:&lt;/p&gt;
&lt;p&gt;Create a car class with attributes: Manufacturer, Model, Year of Manufacturing, Petrol Type, Mileage, Odometer. Then create some cars and play with their data! Print them to screen, add them to a database, whatever. Just get coding!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>How to Create Your Own Steam Game Release Notifier</title><link href="https://pybit.es/steam-notifier.html" rel="alternate"></link><published>2017-05-19T19:53:00+02:00</published><updated>2017-05-19T19:53:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-19:/steam-notifier.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you’ve been following our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt; you’ll have noticed that I’ve been contributing snippets of code relating to the &lt;a href="http://store.steampowered.com/"&gt;Steam&lt;/a&gt; gaming platform and store.&lt;/p&gt;
&lt;p&gt;When people ask us what the best way to learn Python is, we always tell them to get their hands dirty and to &lt;a href="http://pybit.es/learn-by-doing.html"&gt;learn by doing&lt;/a&gt;. Idea wise, we tell people to scratch their own itch. That’s exactly what I’ve been doing between code challenges, work and family life. I made my own Steam Game Notifier that emails me the latest Steam game releases!&lt;/p&gt;
&lt;p&gt;Steam does have its own RSS feed which I could have just loaded in an RSS app but there’s no fun in that! I wanted the challenge of coding up a solution myself. This post will break down the code and describe the solution.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/tree/master/steam_notifier"&gt;Full code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Splitting the Code Up&lt;/h2&gt;
&lt;p&gt;Looking at the above code link you’ll notice there are four Python scripts that make up the program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;email_list.py:&lt;/strong&gt; Stores the email addresses of recipients for this tool.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;emailer.py:&lt;/strong&gt; The script that sends the email. It reads in the emails stored in email_list.py.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull_xml.py:&lt;/strong&gt; This script pulls down the newreleases.xml file from the Steam servers and saves it to the local directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xml_steam_scraper.py:&lt;/strong&gt; The main script. This parses the XML file and manipulates the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;pull_xml.py&lt;/h2&gt;
&lt;p&gt;We’ll attack this in executional order. First up is &lt;code&gt;pull_xml.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a very simple &lt;code&gt;requests&lt;/code&gt; pull. It requests the newreleases.xml file from Steam and saves the contents to the local directory. The main thing to note in the code is the &lt;code&gt;wb&lt;/code&gt; open mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;newreleases.xml&amp;#39;, &amp;#39;wb&amp;#39;) as f:
    f.write(r.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;wb&lt;/code&gt; (write binary) mode is required to correctly write the XML data to a local file called new releases.xml.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;xml_steam_scraper.py&lt;/h2&gt;
&lt;p&gt;Now for the meat. I’ll cover the noteworthy parts as it should hopefully help anyone learning Python.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Game = namedtuple(&amp;#39;Game&amp;#39;, &amp;#39;title url&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a &lt;code&gt;namedtuple&lt;/code&gt; from the &lt;code&gt;collections&lt;/code&gt; module. Read this &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;docs.python doc&lt;/a&gt; if you’re new to these. Essentially we’re creating a tuple subclass named &lt;code&gt;Game&lt;/code&gt;. It has two fields associated with it: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; (more on this later).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_create_db():
    with sqlite3.connect(DB_NAME) as connection:
        c = connection.cursor()
        try:
            c.execute(&amp;quot;&amp;quot;&amp;quot;CREATE TABLE new_steam_games
                (Name TEXT, Link TEXT, Emailed TEXT)
                    &amp;quot;&amp;quot;&amp;quot;)        
        except:
            pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This entire function handles the database creation we’re using for this program. The &lt;code&gt;sqlite&lt;/code&gt; code will create the DB &lt;code&gt;steam_games.db&lt;/code&gt; (as per the declaration at the top of the code) if the DB doesn’t exist. If it does exist, it just continues on.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.execute(&amp;quot;SELECT Name from new_steam_games&amp;quot;)
db_games_list = c.fetchall()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the &lt;code&gt;pull_db_data()&lt;/code&gt; function you’ll see this line. This code will pull the &lt;code&gt;Name&lt;/code&gt; data from the &lt;code&gt;steam_games.db&lt;/code&gt; file and populate the &lt;code&gt;db_games_list&lt;/code&gt; list with the data.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Ignore my intentionally awesome function names
def parse_that_feed_baby():
    feed_list = []
    feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        game_data = Game(title=entry[&amp;#39;title&amp;#39;], url=entry[&amp;#39;link&amp;#39;])
        feed_list.append(game_data)
    return feed_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I use &lt;code&gt;feedparser&lt;/code&gt; to interrogate the &lt;code&gt;newreleases.xml&lt;/code&gt; file. We also see the usage of that &lt;code&gt;namedtuple&lt;/code&gt; &lt;code&gt;Game&lt;/code&gt;. The fields we specified earlier are being assigned “entries” pulled from the XML file with feedparser.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; field is given the XML “title” of the game; the &lt;code&gt;url&lt;/code&gt; field is given the link to the game.&lt;/p&gt;
&lt;p&gt;This is done for every individual “entry” (game) in the XML file using the &lt;code&gt;for&lt;/code&gt; loop. It’s all appended to &lt;code&gt;feed_list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_for_new(feed_list, db_games):
    new_games_list = []
    for data in feed_list:
        if (data.title,) not in db_games:
            new_games_list.append(data)
    return new_games_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function creates an empty list called &lt;code&gt;new_games_list&lt;/code&gt;. It then checks whether &lt;code&gt;data.title&lt;/code&gt; (&lt;code&gt;.title&lt;/code&gt; being the field from the namedtuple) is &lt;strong&gt;not&lt;/strong&gt; in the existing games database &lt;code&gt;db_games&lt;/code&gt;. I’m essentially doing a name match. Eg: Does the game name from the feed list exist in the list of games already in the database.&lt;/p&gt;
&lt;p&gt;If the name &lt;strong&gt;isn’t&lt;/strong&gt; in the existing DB, then we add it to the &lt;code&gt;new_games_list&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.executemany(&amp;quot;INSERT INTO new_steam_games VALUES (?, ?, 0)&amp;quot;, new_games)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, at the end of the &lt;code&gt;main()&lt;/code&gt; function, we add the &lt;strong&gt;new games&lt;/strong&gt; to the DB. The 2x ?s are placeholders for the data in the &lt;code&gt;new_games&lt;/code&gt; list. The 0 at the end will be explained in a moment.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;DB Table Layout and Emailed Flag&lt;/h2&gt;
&lt;p&gt;The DB we create at the start of the script has 3x columns: &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt;, and &lt;code&gt;Emailed&lt;/code&gt;, all of which are &lt;code&gt;TEXT&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; are self explanatory but why &lt;code&gt;Emailed&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I needed a way to determine whether a row (game) had been emailed out already. I decided to go with a boolean flag, i.e., Yes/No, True/False, 0/1.&lt;/p&gt;
&lt;p&gt;When new games are added to the DB at the end of the code, they’re added with a 0 in the 3rd column (&lt;code&gt;Emailed&lt;/code&gt;). This indicates that they are new and have &lt;strong&gt;not&lt;/strong&gt; been emailed.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;emailer.py&lt;/h2&gt;
&lt;p&gt;I’ve covered sending advanced emails using Python MIME in a &lt;a href="http://pybit.es/python-MIME.html"&gt;previous article&lt;/a&gt; so have a read through of that for the basics if you’re not sure what you’re looking at here.&lt;/p&gt;
&lt;p&gt;The important code is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with sqlite3.connect(DATA_FILE) as connection:
    c = connection.cursor()
    c.execute(&amp;quot;SELECT Name, Link FROM new_steam_games WHERE Emailed=&amp;#39;0&amp;#39;&amp;quot;)
    for item in c.fetchall():
        body += item[0] + &amp;#39;: &amp;#39; + item[1] + &amp;#39;\n&amp;#39;
    c.execute(&amp;quot;UPDATE new_steam_games SET Emailed=&amp;#39;1&amp;#39;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this code I grab the data from the database that has a “0” in the &lt;code&gt;Emailed&lt;/code&gt; column. (Pulling the new games!).&lt;/p&gt;
&lt;p&gt;I then add the name, &lt;code&gt;item[0]&lt;/code&gt;, and link, &lt;code&gt;item[1]&lt;/code&gt; to the body of the email using a &lt;code&gt;for&lt;/code&gt; loop. This will add the new games one by one.&lt;/p&gt;
&lt;p&gt;After this, the games are then flagged as being emailed by changing the &lt;code&gt;Emailed&lt;/code&gt; flag to “1”. This will ensure that the next time the emailer is run, the same games don’t get emailed again.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Automate it!&lt;/h2&gt;
&lt;p&gt;Done! What next? Add it to a cron job and automate the sucker!&lt;/p&gt;
&lt;p&gt;I’ve got the pull, the feedparse and emailer all running on separate cron jobs, one after the other (2 mins apart).&lt;/p&gt;
&lt;p&gt;The pull writes over newreleases.xml with fresh data; feedparser updates the DB with fresh data (if any) and the emailer sends out any new games.&lt;/p&gt;
&lt;p&gt;An example crontab entry could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;30 20 * * * cd /opt/development/steamscraper &amp;amp;&amp;amp; /usr/bin/python3 pull_xml.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;I’m seeing plenty of room for improvement just writing this article! The curse of the programmer!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What happens if there isn’t a new game to email out? Does it break or just send an empty email? (No idea at the time of writing!). The script should either not send an email or (easier) just email a “No new games” message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the xml_steam_scraper.py script I access the sqlite DB using a &lt;code&gt;with&lt;/code&gt; statement &lt;strong&gt;three&lt;/strong&gt; times. This seems unpythonic to me. I need to figure out a better way to talk to the DB throughout the script. I could do a &lt;code&gt;connect&lt;/code&gt; at the start and then a &lt;code&gt;close&lt;/code&gt; at the end of &lt;code&gt;main()&lt;/code&gt; but is it Pythonic to leave the DB connection open for the entirety of the script?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could have some nicer text (a header maybe?) in the email rather than just a plain text dump of the Names/URLs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What happens if the emailer fails &lt;em&gt;after&lt;/em&gt; I’ve already changed the &lt;code&gt;Emailed&lt;/code&gt; DB flag to 1? The new games will &lt;strong&gt;not&lt;/strong&gt; have been mailed out but the DB will have potentially been updated to reflect that they have been. I could probably move the update to the end of the script to avoid this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create funnier function names (just on my copy of the code of course!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;I’m stoked that this thing actually WORKS! And boy did I learn a lot! In this program alone I’ve tackled so many different concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feedparser (web scraping)&lt;/li&gt;
&lt;li&gt;sqlite (persistent storage)&lt;/li&gt;
&lt;li&gt;with statements&lt;/li&gt;
&lt;li&gt;smtplib (emailers)&lt;/li&gt;
&lt;li&gt;requests (more web scraping)&lt;/li&gt;
&lt;li&gt;collections (namedtuples)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The biggest hurdle for me was figuring out how to store the data in the DB and determine whether an entry had been emailed or not. That took me &lt;em&gt;ages&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Very happy with the final result, regardless of its Pythonicness (roll with the word). I’ll keep refactoring as I go but for now I’ll enjoy the satisfaction of automatically emailing myself games to buy!&lt;/p&gt;
&lt;p&gt;If you have any feedback or improvements &lt;em&gt;please&lt;/em&gt; let me know. It’s the best way to learn!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="sqlite3"></category><category term="xml"></category><category term="email"></category><category term="automation"></category><category term="tools"></category><category term="feedparser"></category><category term="game"></category></entry><entry><title>How to Download an XML File with Python</title><link href="https://pybit.es/download-xml-file.html" rel="alternate"></link><published>2017-05-04T20:46:00+02:00</published><updated>2017-05-04T20:46:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-04:/download-xml-file.html</id><summary type="html">&lt;p&gt;In this post I detail how to download an xml file to your OS and why it’s not as simple as you’d think&lt;/p&gt;</summary><content type="html">&lt;p&gt;Really? An article on downloading and saving an XML file? “Just use requests mate!”, I hear you all saying. Well, it’s not that simple. At least, it wasn’t as straight forward as that for a beginner like me. Here’s why.&lt;/p&gt;
&lt;h2&gt;Parsing is Different to Saving&lt;/h2&gt;
&lt;p&gt;For sure, experts and beginners alike will have used requests to pull down the contents of a web page. Generally it’s for the purpose of parsing or scraping that page for specific data elements.&lt;/p&gt;
&lt;p&gt;What if you wanted to actually &lt;em&gt;save&lt;/em&gt; that web page to your local drive? Things get slightly different. You’re no longer just reading a text rendered version of the page, you’re trying to save the actual page in its original state.&lt;/p&gt;
&lt;p&gt;This is what I found slightly confusing. I wasn’t dealing with a &lt;code&gt;text = r.text&lt;/code&gt; situation anymore, I was trying to maintain the original format of the page as well, tabs and all.&lt;/p&gt;
&lt;h2&gt;Why XML?&lt;/h2&gt;
&lt;p&gt;I’m talking XML here because I was/am trying to download the actual XML file for an RSS feed I wanted to parse offline. For those of you playing at home, this is for our &lt;a href="http://pybit.es/codechallenge17.html"&gt;PyBites Code Challenge 17&lt;/a&gt; (hint hint!).&lt;/p&gt;
&lt;h2&gt;Why Download when you can just Parse the feed itself?&lt;/h2&gt;
&lt;p&gt;Good question! It’s about best practice and just being nice.&lt;/p&gt;
&lt;p&gt;In the case of our code challenge (PCC17), how many times are you going to run your Py script while building the app to test if it works? Every time you run that script with your &lt;code&gt;requests.get&lt;/code&gt; code in place, you’re making a call to the target web server.&lt;/p&gt;
&lt;p&gt;This generates unnecessary traffic and load on that server which is a pretty crappy thing to do!&lt;/p&gt;
&lt;p&gt;The nicer and Pythonic thing to do is to have a separate script that does the request once and saves the required data to a local file. Your primary scraping or analysis script then references the local file.&lt;/p&gt;
&lt;h2&gt;Get to the code already!&lt;/h2&gt;
&lt;p&gt;Alright, check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://insert.your/feed/here.xml&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It all looks pretty familiar so I won’t go into detail on the usual suspects.&lt;/p&gt;
&lt;p&gt;What I’m doing in this code is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pulling the xml &lt;em&gt;content&lt;/em&gt; down using &lt;code&gt;requests.get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using a &lt;code&gt;with&lt;/code&gt; statement to create a file called &lt;code&gt;feed.xml&lt;/code&gt;. (If the file exists it’ll be overwritten).&lt;/li&gt;
&lt;li&gt;Writing the &lt;strong&gt;contents&lt;/strong&gt; of the requests response into the file &lt;code&gt;feed.xml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s why it was a learning exercise for me:&lt;/p&gt;
&lt;p&gt;As I open/create the feed.xml file, I’m using the “Mode” &lt;code&gt;wb&lt;/code&gt;. This means I’m opening the file for writing purposes but &lt;strong&gt;can only write to it in a binary format&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you fail to choose the binary mode then you’ll get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;pull_xml.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    file.write(response.content)
TypeError: write() argument must be str, not bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This confused the hell out of me and resulted in me wasting time trying to convert the requests response data to different formats or writing to the external file one line at a time (which meant I lost formatting anyway!).&lt;/p&gt;
&lt;p&gt;The binary mode is required to write the actual content of the XML page to your external file in the original format.&lt;/p&gt;
&lt;p&gt;Speaking of content. Notice in the final &lt;code&gt;write&lt;/code&gt; statement I’m using &lt;code&gt;response.content&lt;/code&gt;? Have any idea how long I spent thinking my use of the usual &lt;code&gt;response.text&lt;/code&gt; was the only way to do this? Too damn long!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;content&lt;/code&gt; option allows you to dump the entire XML file (as is) into your own local XML file. Brilliant!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note for beginners: If you’re reading other people’s code, be prepared to see &lt;code&gt;with&lt;/code&gt; statements where files are opened &lt;code&gt;as f&lt;/code&gt;. The same applies to the &lt;code&gt;requests&lt;/code&gt; module. The line will generally read &lt;code&gt;r = requests.get(URL)&lt;/code&gt;. I’ve used full form names for the sake of this article thus the words &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;response&lt;/em&gt; in my code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is one of those things that we all just get used to doing. Pulling a feed down and saving it to a file is something Bob has done a thousand times so no longer has to give it any extra thought.&lt;/p&gt;
&lt;p&gt;For me, however, this took an entire night* of playing around because I’d never done it before and was assuming (silly me!) that the parsing code I've been using &lt;code&gt;requests&lt;/code&gt; for was all I needed.&lt;/p&gt;
&lt;p&gt;I also found that I had to scour a ton of StackOverflow posts and other documentation just to get my head wrapped around this concept correctly.&lt;/p&gt;
&lt;p&gt;So with this finally cleared up, it’s time to go attack some feeds!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Julian&lt;/p&gt;
&lt;p&gt;*Not really an entire night. I do need my beauty sleep!&lt;/p&gt;</content><category term="tutorial"></category><category term="learning"></category><category term="webscraping"></category><category term="requests"></category><category term="xml"></category><category term="beginners"></category><category term="python"></category></entry><entry><title>Learn Python by Coding for Yourself</title><link href="https://pybit.es/learn-by-doing.html" rel="alternate"></link><published>2017-04-27T23:30:00+02:00</published><updated>2017-04-27T23:30:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-27:/learn-by-doing.html</id><summary type="html">&lt;p&gt;In this post I discuss (with examples) why it’s important to learn Python by actually coding. It’s not enough to just read!&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all know that the best way to learn &lt;em&gt;anything&lt;/em&gt; is to just jump in and do it. You don’t learn to play the guitar by simply watching &lt;a href="https://www.youtube.com/watch?v=tQ0iww5u6_I"&gt;YouTube videos&lt;/a&gt;, you learn by playing every day, trying new songs and challenging yourself.&lt;/p&gt;
&lt;p&gt;The same applies to learning Python.&lt;/p&gt;
&lt;h2&gt;Sharing is Caring&lt;/h2&gt;
&lt;p&gt;In typical PyBites fashion, I’m going to share my experiences from the past two weeks regarding this “Learn by Doing” concept.&lt;/p&gt;
&lt;p&gt;This is also a crucial part of learning Python - sharing. Don’t be afraid to put yourself out there and share your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put it on GitHub for the world to see.&lt;/li&gt;
&lt;li&gt;Share it on the &lt;a href="http://reddit.com/r/learnpython"&gt;Reddit Learn Python page&lt;/a&gt; for it to be critiqued.&lt;/li&gt;
&lt;li&gt;Take part in &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt; (shameless plug!) and actually submit your code for review.&lt;/li&gt;
&lt;li&gt;Send the code to friends with more coding experience for some feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whatever the case, sharing your code with others is one of the best ways to learn and &lt;em&gt;retain&lt;/em&gt; the knowledge.&lt;/p&gt;
&lt;h2&gt;Challenge Yourself&lt;/h2&gt;
&lt;p&gt;This week our &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge&lt;/a&gt; is based on APIs. Why? Because I didn’t know jack about them. When Bob and I brainstorm ideas for the code challenges, we generally settle on a topic that we’re not entirely comfortable with ourselves.&lt;/p&gt;
&lt;p&gt;While Bob can query APIs in his sleep, just the thought of working with APIs made me collapse and start foaming at the mouth. Again, that’s why it was chosen.&lt;/p&gt;
&lt;p&gt;It’s important to challenge yourself. If you just stick with what you know and stay within your comfort zone, not only will you never improve but you’re never going to have a &lt;em&gt;reason&lt;/em&gt; to.&lt;/p&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;On the surface, my foray into the world of APIs was disastrous. Seriously. Dive a little deeper though and it’s honestly been one of the greatest Python learning experiences I’ve had.&lt;/p&gt;
&lt;p&gt;Being a World of Warcraft nerd, naturally the first API I looked into was the &lt;a href="https://dev.battle.net/"&gt;Blizzard Warcraft API&lt;/a&gt;. Needless to say, I had no idea what the heck I was doing. The documentation assumed a level of familiarity with APIs and clearly that wasn’t me.&lt;/p&gt;
&lt;p&gt;After hours of playing around, I was able to get the basics down and pull some meaningful (to me!) data from my player profile. The saddest part is that after all of that effort, the most “crucial” line of code for the API call was this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url = (&amp;#39;https://us.api.battle.net/wow/character/%s/%s?fields=mounts&amp;amp;locale=en_US&amp;amp;apikey=%s&amp;#39; % (realm, char_name, API_KEY))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was like a kick in the teeth seeing such a pitiful line of code sitting there after such long period of time. (&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;Full code here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Why was it such a great experience? Well…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being thrown in the deep end can be super beneficial. Assumptive documentation and almost zero meaningful content online meant I had to figure it out through trial and error.&lt;/li&gt;
&lt;li&gt;I was forced to read code that called &lt;em&gt;other&lt;/em&gt; APIs in order to see how it was done, then apply that to this scenario.&lt;/li&gt;
&lt;li&gt;I learned that you can use the &lt;code&gt;requests&lt;/code&gt; module to pull data from the API using a specific HTTP URL. This was using the &lt;code&gt;get&lt;/code&gt; attribute of &lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I learned a little about &lt;code&gt;OAuth&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;This all resulted in me playing around with JSON content for the first time ever.&lt;/li&gt;
&lt;li&gt;I discovered that you can make JSON print out in a readable format using &lt;code&gt;pprint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This forced me to then start looking into how one parses JSON data effectively, especially when you have multiple layers of dicts stored in the one JSON dict.&lt;/li&gt;
&lt;li&gt;I did this completely for me. This wasn’t out of a book or something someone told me to do. &lt;em&gt;I&lt;/em&gt; wanted to play with this specific API because &lt;em&gt;I’m&lt;/em&gt; a big Blizzard fan. This meant that I was engaged and &lt;strong&gt;determined&lt;/strong&gt; to learn it even though it was bloody frustrating.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While my code is nowhere near a success and most definitely unPythonic, it’s one heck of an achievement for me. I actually understand this stuff now!&lt;/p&gt;
&lt;h2&gt;The GMAIL API Experience&lt;/h2&gt;
&lt;p&gt;The next day I decided to hit up the &lt;a href="https://developers.google.com/apis-explorer/#p/gmail/v1/"&gt;Gmail API&lt;/a&gt; because of the whole &lt;a href="https://www.gizmodo.com.au/2017/04/how-did-unrollme-get-users-to-allow-it-to-sell-their-inbox-data/"&gt;Unroll.me fuss&lt;/a&gt; going on at the moment. I figured if they could do it, so could I!&lt;/p&gt;
&lt;p&gt;I was wrong. But at least I learned something!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I learned how Google uses OAuth to authenticate applications with your Google account.&lt;/li&gt;
&lt;li&gt;I was able to pull down a list of my Gmail labels, messages and filters.&lt;/li&gt;
&lt;li&gt;I performed all of these requests using the Python &lt;code&gt;apiclient&lt;/code&gt; module to talk directly to the Gmail API (didn’t use &lt;code&gt;requests&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;I learned that each type of call to the API has its own set of options that allow you to filter the returned data. Seems obvious now…&lt;/li&gt;
&lt;li&gt;I had more practice trying to parse multi-tiered JSON output.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;results = service.users().settings().filters().list(userId=&amp;#39;me&amp;#39;).execute()
    pprint(results)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, I was underwhelmed with the outcome but learned so much more by actually doing this than if I was just reading a book. (Full code not online).&lt;/p&gt;
&lt;h2&gt;Python Flask App&lt;/h2&gt;
&lt;p&gt;Last week we created &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;Python Flask Apps for our code challenge&lt;/a&gt;. It was freaking awesome. If you saw my website you’ll see that it’s very “I’m just learning HTML” retro. (I didn’t have time for the CSS and Bootstrap).&lt;/p&gt;
&lt;p&gt;I think I learned more Python in that week than any other time. It was full on and it was damn satisfying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I revived my HTML and CSS “skills” (Steady on! It's been a while!).&lt;/li&gt;
&lt;li&gt;I got to push learning Flask!&lt;/li&gt;
&lt;li&gt;I played with Jinja2 templates.&lt;/li&gt;
&lt;li&gt;I created my very first, working HTML Form that returned data to my &lt;em&gt;own&lt;/em&gt; backend script and DB.&lt;/li&gt;
&lt;li&gt;Subsequently, I learned about HTML &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests! (Who knew?!)&lt;/li&gt;
&lt;li&gt;I learned &lt;code&gt;sqlite3&lt;/code&gt; from scratch. I knew absolutely no SQL prior to last week!&lt;/li&gt;
&lt;li&gt;I created my first persistent SQL database.&lt;/li&gt;
&lt;li&gt;I created my first working Web App!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a &lt;em&gt;massive&lt;/em&gt; learning experience. None of which was taught from one book as part of an “end of chapter exercise”.&lt;/p&gt;
&lt;p&gt;This was purely for the thrill of creating my own web app. And it was &lt;strong&gt;fun&lt;/strong&gt;! (Meal Tracker 5000 baby!).&lt;/p&gt;
&lt;p&gt;The best part was that for this challenge I found information everywhere. YouTube, StackOverflow, Reddit, PyBites (Bam!), GitHub and some other books.&lt;/p&gt;
&lt;p&gt;I’m happy with the code too. &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Get on With it&lt;/h2&gt;
&lt;p&gt;So here’s the deal. If you’re finding it tough to learn Python then do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Come up with an idea for something to code. Make it something you’d want or use yourself. (My first app was an Overtime Tracker for the extra hours I worked at Oracle!)&lt;/li&gt;
&lt;li&gt;If you’re learning something new, make it something fun! (To learn how to automate sending emails I created a script that spams my workmates every evening! Sorry fellas!)&lt;/li&gt;
&lt;li&gt;Don’t just use one resource, search &lt;strong&gt;everywhere&lt;/strong&gt;. Expect to find many ways to solve your problem, not just the way they might be telling you in the book you’re reading.&lt;/li&gt;
&lt;li&gt;Experiment in the Python Shell! It’s the best place to stuff around!&lt;/li&gt;
&lt;li&gt;As I said before, share your code and get people to give you feedback.&lt;/li&gt;
&lt;li&gt;Join us in our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Day Code Challenge&lt;/a&gt;! It’s been the leading factor for my recent increase in Python understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of all though: &lt;strong&gt;STICK WITH IT&lt;/strong&gt;. The failures and the frustrating evenings where the code just doesn’t work are so important. They totally suck but man do you learn!&lt;/p&gt;
&lt;p&gt;And I seriously mean it when I say, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Anyone else remember the guy from the YouTube video at the top? That video may be &lt;strong&gt;the&lt;/strong&gt; reason I started playing the guitar! I love it!&lt;/em&gt;&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="Flask"></category><category term="Warcraft"></category><category term="requests"></category><category term="gmail"></category><category term="APIs"></category><category term="sqlite3"></category><category term="challenge"></category><category term="motivation"></category></entry><entry><title>Beginning Flask</title><link href="https://pybit.es/beginning-flask.html" rel="alternate"></link><published>2017-04-13T15:00:00+02:00</published><updated>2017-04-13T15:00:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-13:/beginning-flask.html</id><summary type="html">&lt;p&gt;In this post I cover the basics of Flask in language that anyone can understand.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I wrote an &lt;a href="http://pybit.es/flask-for-loop.html"&gt;article&lt;/a&gt; showing you how to print the contents of a dict to a table using Flask and HTML.&lt;/p&gt;
&lt;p&gt;In the lead up to the post I did quite a lot of browsing, reading and researching to wrap my head around this whole Flask thing. It took me a little longer because not everything out there was in simple, human readable English. A lot of sources assume a high level of Python knowledge and not everything was explained simplistically (lots of big words!).&lt;/p&gt;
&lt;p&gt;That’s why I decided to write this article explaining the absolute basics (Hello World!) in a manner I would have liked to seen.&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;Odds are if you’re reading this, you already know what Flask is. I’m going to explain anyway.&lt;/p&gt;
&lt;p&gt;Flask is a “web framework” you can use to get your Python code to appear in a web browser (I told you I’d make this simplistic!).&lt;/p&gt;
&lt;p&gt;As with most programming languages, when you begin learning Python you’ll be making scripts that are completely command line based. Eventually you’ll wonder how the pros use Python to make web applications. Flask is one way to do this.&lt;/p&gt;
&lt;p&gt;There’ll be a Python script that imports the Flask module and when run, &lt;em&gt;generally&lt;/em&gt; passes data to a HTML file. When the web page is loaded, it runs the Python code associated with that web page.&lt;/p&gt;
&lt;h2&gt;What should you know before learning Flask?&lt;/h2&gt;
&lt;p&gt;I won’t sugar coat it. You’ll have a hard time if you don’t have a sound understanding of HTML and CSS.&lt;/p&gt;
&lt;p&gt;Python wise, your app will only be as complex as the code you write so the more you want to do, the more you need to know.&lt;/p&gt;
&lt;p&gt;The HTML knowledge needs to be there though. For example, HTML forms can be tricky just on their own. When you add Python and Flask to the mix it can get downright confusing (seriously, me).&lt;/p&gt;
&lt;p&gt;You don’t have to know CSS as much I guess but everyone wants their page/app to look good right? Maybe I’m just a little shallow!&lt;/p&gt;
&lt;h2&gt;Explaining Hello World&lt;/h2&gt;
&lt;p&gt;Okay so here’s a simple Hello World Flask script you’ll probably find in every Flask tutorial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello world! Can I get some CSS please?!’&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, what the heck is going on here? Let me break it down&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Simple, we’re importing the &lt;strong&gt;Flask&lt;/strong&gt; class from the &lt;em&gt;flask&lt;/em&gt; module. This is the standard import call for the Flask module. Roll with it!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app = Flask(__name__)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let’s talk about the assignment. All we’re doing here is assigning the Flask class to a variable called app. Simple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(&lt;strong&gt;name&lt;/strong&gt;) is the bloody confusing part. The Flask class needs to know what value is currently assigned to &lt;strong&gt;name&lt;/strong&gt;. Whenever &lt;strong&gt;name&lt;/strong&gt; is used in your code, it’s assigned the name of the module that’s currently active. The Flask class needs this information to be able to execute properly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;#39;/&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Think of this as the URL of the web page you’re coding. You’ll often hear people say “route” for short when talking Flask. If you wanted to create a page called &lt;em&gt;birthdays.html&lt;/em&gt;, you’d name the route &lt;em&gt;@app.route(‘/birthdays’)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def hello():
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that there’s no line space between the route and this function. That’s because they’re directly linked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of the code that you add within this function will be executed when the web page is loaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The recommended function naming convention is to give it the same name as the route. This Hello World example is thus against convention. Using the birthdays example, we’d create a function with: &lt;em&gt;def birthdays():&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return &amp;#39;Hello world! Can I get some CSS please?!’
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is an important one. &lt;strong&gt;Every Flask function needs to return something&lt;/strong&gt;. This is the data that will be returned to the web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This return line will simply print the string &lt;em&gt;Hello world! Can I get some CSS please?!&lt;/em&gt; to the page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a more complex piece of code, you’d more likely be returning a variable or something similar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;app.run()
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Pretty self explanatory. This is the code that will run your Flask app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Things to Note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you run your Python Flask script (same way you’d run any other Python script), Flask kicks off a local web server. It runs on the system you’re executing the code from and, by default, will allow you to browse to the page at 127.0.0.1:5000. You’ll then add the web page URL to the end of the port number, e.g.: 127.0.0.1:5000/birthdays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you start executing more complex code, such as my &lt;a href="http://pybit.es/flask-for-loop.html"&gt;dict example&lt;/a&gt; from last week, you need to use Flask Templates. These use the “Jinja2” engine (again, roll with it). This is all installed by default when you pip install flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Flask Template is pretty much just a HTML page that your code talks to. You can make one generic such that every page on your site calls the generic page so the theme is maintained across pages. Alternatively you can code each page individually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being familiar with HTML comes in handy when you start using Templates. Your python, HTML and CSS files need to be stored according to a required Flask folder hierarchy. Check out the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;GitHub repo for my code&lt;/a&gt; last week and you’ll see what I mean. It feels &lt;em&gt;way&lt;/em&gt; more familiar and less daunting if you’ve organised the files for a website before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why use Flask?&lt;/h2&gt;
&lt;p&gt;I asked myself this question a few times. Honestly, I’d say use it because it’s so simple and quick to get running. Bob and I were chatting this week about the Flask Template I made to create the HTML table and with little to no effort, he was able to take the template and use it for his new &lt;a href="http://weathercompare.herokuapp.com/"&gt;weather compare app&lt;/a&gt; (code &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My current hurdle is not Flask itself but trying to tie it in with the HTML side of things. It’s been years since I did any deep HTML coding so I’m pretty rusty. At the time of writing, I’m finding that the Python code is functional but I can’t get the HTML to wrap around it the way I want.&lt;/p&gt;
&lt;h2&gt;Examples and Resources&lt;/h2&gt;
&lt;p&gt;Check out some of these examples and resources. Reading and running other code will help get this stuff to sink in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/flask-for-loop.html"&gt;Display a dict using Flask&lt;/a&gt; - I’m pushing my post again because it really is easy to follow. Check the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;repo&lt;/a&gt; out and try it for yourself. Edit the code and watch the table change. Learn by doing!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Bob’s Weather Compare App&lt;/a&gt; - Bob made this as part of our &lt;a href="http://pybit.es/special-100days.html"&gt;100 days of code challenge&lt;/a&gt;. It’s definitely more complex but it’s amazing to see how &lt;em&gt;little&lt;/em&gt; code you need to actually get something like this out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;Flask Web Development with Python Tutorial&lt;/a&gt; - This 7-part video series from The New Boston is amazing. Nice and simple. Short bites. PyBites styles!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don’t be deterred by the learning curve. If you’re new to this, start simple and stick with it. Just a little bite every day. Start with printing static data then slowly move on to more complex ideas like printing variables and dicts. Just remember, Always Be Coding!&lt;/p&gt;
&lt;p&gt;And remember, Keep Calm and Code in Python Flask! (And HTML and CSS I guess!)&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="Flask"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>Flask for Loops - Printing Dict Data</title><link href="https://pybit.es/flask-for-loop.html" rel="alternate"></link><published>2017-04-06T20:38:00+02:00</published><updated>2017-04-06T20:38:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-06:/flask-for-loop.html</id><summary type="html">&lt;p&gt;In this post I demo how to create an extremely simple Flask app that prints the contents of a Dict to a web page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to the &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;, this week I took the plunge and dove into Python Flask.&lt;/p&gt;
&lt;p&gt;It’s not the easiest beast to tame but once you wrap your head around it, it’s not so bad!&lt;/p&gt;
&lt;p&gt;One of the concepts I struggled with early on was how to return more than “just” a single string to the Flask app web page.&lt;/p&gt;
&lt;h2&gt;Python Setup&lt;/h2&gt;
&lt;p&gt;Check out the full code for this &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I decided I wanted to print out a dict of birthdays. You can see I’ve created a route to a page called ‘birthdays’. The function associated with this decorator contains the dict we want to display.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.route(&amp;quot;/birthdays&amp;quot;)
def birthdays():
    dates = {&amp;quot;Julian&amp;quot;: 25, &amp;quot;Bob&amp;quot;: 26, &amp;quot;Dan&amp;quot;: 47, &amp;quot;Cornelius&amp;quot;: 3}
    return render_template(&amp;quot;birthdays.html&amp;quot;, dates=dates)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Being Flask, we need to have a templates folder in the same directory that the main.py script is being run from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the templates folder we’ll need to have a birthdays.html file for the above route to work with.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTML Setup&lt;/h2&gt;
&lt;p&gt;With the main.py file all set up, we can focus on birthdays.html. (Again, all of this is in the &lt;a href="https://github.com/pybites/blog_code/tree/master/flask_for_loop"&gt;code Repo&lt;/a&gt;!).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The simplest and most pleasing way to display this data would be in a table. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The stylesheet (style.css) we’ll be using lives in another folder called ‘static’. This folder lives at the same hierarchical level as the templates folder - go ahead and create it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an example, in style.css we have a CSS class just to give the table a slightly thicker border.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.thick-border&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt; &lt;span class="no"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
        &lt;span class="no"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;collapse&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We can then create the table. The first row will be the table headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Flask in Action&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With the table set up we can now start populating it with the contents of the &lt;em&gt;dates&lt;/em&gt; dict from main.py.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When inserting Python code into the HTML file, we wrap it in {% %} so Flask knows to differentiate it from normal HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To print out the contents of the dict, we can use a for loop. The idea of the for loop stays the same, it’s just spread out across multiple lines and wrapped in HTML. First we start with the opening of the for loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% for k, v in dates.items() %}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We don’t need to explicitly call &lt;em&gt;print&lt;/em&gt; to read out the values of &lt;em&gt;k&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;. We just need to choose how they’ll be displayed on the page in HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You’ll notice the {{ }} around the variables. This is another flag to Flask that these are Python variables and not a bit of HTML code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then have to close off the for loop with one last bit of special Flask code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Final Result&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This is what the code for the table should look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered thick-border&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;dates.items&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Here’s what the web page will look like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Table populated by Python dict code" src="https://pybit.es/images/flask-bday-table.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The beauty is that you can add as much data (keys, values) to the dict as you want and the table will always be drawn to match the content. Give it a try!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning Points&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask requires that the decorator function you’re using &lt;strong&gt;returns&lt;/strong&gt; something. It could be something as simple as: &lt;em&gt;return ‘This is a string’&lt;/em&gt;. The point is, data needs to be returned. I struggled to understand how I could return each for loop pass over the dict! After continued research and reading, I learned about the HTML templates and how you write put the Python code there instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unsurprisingly, making something that’s pleasing to the eye requires some knowledge or experience with HTML and CSS. I was pretty dusty!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the full example you’ll see how it all meshes together - the static and templates folder and the main.py file living above them. Having experience with web dev makes this environment a lot easier to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s tough but extremely rewarding to move on from static return lines of just “hello world” to displaying data. That is, moving forward, the data printed by the loop could be generated on the fly. That’s exciting!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Next up I’d like to make this interactive. Perhaps have the user enter birthdays via a web form themselves and once completed, have the birthdays print to screen in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data really should be stored in a database or shelf too, not in a static dict.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get my CSS game on and make this baby pretty!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll be seeing more Flask in the coming weeks (I hope!). I’d actually like to wrap this for loop around the data set for &lt;a href="http://pybit.es/codechallenge13.html"&gt;this week’s code challenge&lt;/a&gt;… hmm…&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="Flask"></category><category term="loops"></category><category term="python"></category><category term="decorators"></category><category term="tutorial"></category><category term="learning"></category></entry><entry><title>Module of the Week - ipaddress</title><link href="https://pybit.es/ipaddress.html" rel="alternate"></link><published>2017-03-23T11:30:00+01:00</published><updated>2017-03-23T11:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-23:/ipaddress.html</id><summary type="html">&lt;p&gt;While playing around with code for our &lt;a href="http://pybit.es/generators.html"&gt;post on generators&lt;/a&gt; we discovered the &lt;a href="https://docs.python.org/3/library/ipaddress.html"&gt;ipaddress module&lt;/a&gt;, part of the Standard Library. Such a handy little module!&lt;/p&gt;</summary><content type="html">&lt;p&gt;While playing around with code for our &lt;a href="http://pybit.es/generators.html"&gt;post on generators&lt;/a&gt; we discovered the &lt;a href="https://docs.python.org/3/library/ipaddress.html"&gt;ipaddress module&lt;/a&gt;, part of the Standard Library. Such a handy little module!&lt;/p&gt;
&lt;h2&gt;What does it do?&lt;/h2&gt;
&lt;p&gt;The ipaddress module simplifies various IP address related tasks. I’m going to outline some of the handier abilities below.&lt;/p&gt;
&lt;p&gt;It may seem a little redundant to have a module dedicated solely to IP address related tasks but believe me when I say it can save you a heap of time as an admin and programmer.&lt;/p&gt;
&lt;h2&gt;Create an IPv4 or IPv6 address&lt;/h2&gt;
&lt;p&gt;The ipaddress module allows you to automatically create an IPv4 or IPv6 address without having to specify the type of address.&lt;/p&gt;
&lt;p&gt;Just call .ip_address on ipaddress to let the modules figure it out for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_address(&amp;#39;192.168.0.1&amp;#39;)
IPv4Address(&amp;#39;192.168.0.1’)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_address(&amp;#39;fe80:0:0:0:200:f8ff:fe21:67cf&amp;#39;)
IPv6Address(&amp;#39;fe80::200:f8ff:fe21:67cf&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Super simple!&lt;/p&gt;
&lt;h2&gt;Defining your host interface&lt;/h2&gt;
&lt;p&gt;To describe your particular host interface on a network, you call .ip_interface. Note that this uses the now normal notation: ‘192.168.0.1/24’.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ipaddress.ip_interface(&amp;#39;192.168.0.1/24&amp;#39;)
IPv4Interface(&amp;#39;192.168.0.1/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Checking your ipaddress object&lt;/h2&gt;
&lt;p&gt;Now, as Python rocks, we can then assign these values to an object/variable and play with them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Is it IPv4 or IPv6?
&amp;gt;&amp;gt;&amp;gt; ip = ipaddress.ip_address(‘192.168.0.1’)
&amp;gt;&amp;gt;&amp;gt; ip.version
4
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What’s the netmask?&lt;/h2&gt;
&lt;p&gt;I hate trying to remember netmasks and how the differing notations match up. I tend to stick with the loveable IP format of 255.255.255.0 whereas others I know love to use the hate-filled 192.168.0.1/24 method. (There, I said it!).&lt;/p&gt;
&lt;p&gt;Now I never have to plug my netmasks into a shady online calculator again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; net0
IPv4Network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; net0.netmask
IPv4Address(&amp;#39;255.255.255.0&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Kaloo Kalay!&lt;/p&gt;
&lt;h2&gt;Defining and checking a network&lt;/h2&gt;
&lt;p&gt;You can also define an entire network as per the following. I’ll show you why this is awesome in a second:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Define the network first
&amp;gt;&amp;gt;&amp;gt; net0 = ipaddress.ip_network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; #Now check to see how many addresses are valid for this network
&amp;gt;&amp;gt;&amp;gt; net0.num_addresses
&amp;gt;&amp;gt;&amp;gt; 256
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;List out the IP addresses for any given network&lt;/h2&gt;
&lt;p&gt;This is hands down my favourite feature of the ipaddress module for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If it hasn’t been a standard Class C (/24) network, I’ve struggled to figure out the valid IP addresses for the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a list of IP addresses for a given subnet has been a tedious process of iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how the ipaddress module shows me some love:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; net0 = ipaddress.ip_network(&amp;#39;192.168.0.0/24&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; for i in net0.hosts():
...     print(i)
... 
192.168.0.1
192.168.0.2
192.168.0.3
192.168.0.4
192.168.0.5
192.168.0.6
192.168.0.7
192.168.0.8
192.168.0.9
&amp;lt;snip&amp;gt;
192.168.0.253
192.168.0.254
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Drool&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or we can pop net0.hosts() (a generator) into a list and manipulate it as we see fit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; iplist = list(net0.hosts())
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f&amp;#39;Bob can take IP {iplist[57]}&amp;#39;
&amp;#39;Bob can take IP 192.168.0.58&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Playing nice with other modules&lt;/h2&gt;
&lt;p&gt;As you play around with the ipaddress module you’ll find that the objects won’t play nice with other modules until converted to strings or integers. As per &lt;a href="https://docs.python.org/3/library/ipaddress.html#conversion-to-strings-and-integers"&gt;Section 21.28.2.2&lt;/a&gt; on the official Python documentation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ip = ipaddress.ip_address(&amp;#39;192.168.0.1&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; str(ip)
&amp;#39;192.168.0.1&amp;#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; int(ip)
3232235521
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It may not be the most exciting module out there but as someone who deals with many servers on a daily basis and loves to script these interactions, the ipaddress module is invaluable to me.&lt;/p&gt;
&lt;p&gt;Even if it’s just to convert netmask notation…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="ipaddress"></category><category term="sysadmin"></category><category term="stdlib"></category></entry><entry><title>Generators are Awesome, Learning by Example</title><link href="https://pybit.es/generators.html" rel="alternate"></link><published>2017-03-17T09:00:00+01:00</published><updated>2017-03-17T09:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-17:/generators.html</id><summary type="html">&lt;p&gt;Learn what a Generator is and check out some different examples.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Playing around with context managers for last week’s &lt;a href="http://pybit.es/codechallenge09.html"&gt;Challenge 09&lt;/a&gt; introduced me to Python Generators and I’ll be forever grateful. They’re exactly what I didn’t know I needed!&lt;/p&gt;
&lt;p&gt;First, for the uninitiated, what is a Generator? (If you’re already across Generators, feel free to skip this next part!).&lt;/p&gt;
&lt;h2&gt;What is a Generator?&lt;/h2&gt;
&lt;p&gt;Well, there’s actually not much to it. A generator is just a function that generates values specifically when called with &lt;em&gt;next()&lt;/em&gt;. Take this absolutely simple generator for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def num_gen():
...     yield 1
...     yield 2
...     yield 3
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = num_gen()
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
1
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
2
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
3
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have a function &lt;em&gt;num_gen()&lt;/em&gt; which uses &lt;em&gt;yield&lt;/em&gt; to return the numbers 1, 2 and 3.&lt;/p&gt;
&lt;p&gt;Normally you’d return these numbers via some sort of loop or with 3x print() functions which would print the numbers 1, 2 and 3 all at once.&lt;/p&gt;
&lt;p&gt;With a generator however, the numbers are only returned when called using the &lt;em&gt;next()&lt;/em&gt; function. Here’s what the code does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We take &lt;em&gt;num_gen()&lt;/em&gt; and assign it to a variable &lt;em&gt;demo_gen&lt;/em&gt; to make this easier on us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use the &lt;em&gt;next()&lt;/em&gt; function on &lt;em&gt;demo_gen&lt;/em&gt; to request the “next” iteration of the demo_gen function. This results in &lt;strong&gt;the first yield only&lt;/strong&gt; being returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice we then have to run &lt;em&gt;next(demo_gen)&lt;/em&gt; two more times to see the next iteration in the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once we’ve exhausted all of the yields within &lt;em&gt;num_gen()&lt;/em&gt; running &lt;em&gt;next()&lt;/em&gt; again results in a &lt;em&gt;StopIteration&lt;/em&gt; error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The StopIteration error appears because there are no more yield statements in the function. Calling next on the generator after this does not cause it to loop over and start again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Generator Performance Gains&lt;/h2&gt;
&lt;p&gt;One of the main reasons for using a generator is to avoid having performance issues. For this example it isn’t an issue to work with our 3 numbers in memory but what if we were to be dealing with lists of millions of numbers? &lt;/p&gt;
&lt;p&gt;The performance hit for building lists of millions of numbers within memory isn’t mind blowingly bad but it’s definitely not a great practice.&lt;/p&gt;
&lt;p&gt;Generators on the other hand get around the memory hogging by only loading the code into memory that’s returned by &lt;em&gt;yield&lt;/em&gt;. That is, you’re not processing and storing the entire chunk of code/function in memory, just the next iteration you’re requesting with &lt;em&gt;next()&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Using a For Loop in a Generator&lt;/h2&gt;
&lt;p&gt;You can use Generators in all sorts of ways. Here’s one that uses a For Loop to double the value of the number I throw into the generator. I can specify how many times the loop is going to run too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def double_nums(num, loops=5):
...     for i in range(loops):
...         num += num
...         yield num
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = double_nums(2)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
4
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
8
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
16
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
32
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
64
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using a While Loop within a Generator&lt;/h2&gt;
&lt;p&gt;Now let’s say we want it to indefinitely double every number but only when we want to. The generator is necessary otherwise you’d run out memory and crash your machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def num_gen(num):
...     while True:
...         num += num
...         yield num
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; demo_gen = num_gen(2)
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
4
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
8
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
16
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
32
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
64
&amp;gt;&amp;gt;&amp;gt; next(demo_gen)
128
…
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code will continue doubling the number but only when &lt;em&gt;next()&lt;/em&gt; asks for the number. Nothing is sitting in memory waiting to just return a number.&lt;/p&gt;
&lt;h2&gt;Some more examples: Generators for chaining&lt;/h2&gt;
&lt;p&gt;Here are some examples from our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo (solutions branch)&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get all permutations of a draw in a simple game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that yield from requires &lt;a href="https://docs.python.org/3/whatsnew/3.3.html"&gt;&amp;gt;= 3.3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Related: &lt;a href="http://pybit.es/itertools-examples.html"&gt;5 cool things you can do with itertools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get similar tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    for pair in product(tags, tags):
        pair = tuple(sorted(pair))  
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We grep on yield in our &lt;a href="https://github.com/pybites/blog_code"&gt;blog code repo&lt;/a&gt; quite a bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A tweet pipeline:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(search):
    for tweet in tweepy.Cursor(api.search,
                            q=search,
                            rpp=100,
                            result_type=&amp;quot;recent&amp;quot;,
                            include_entities=True,
                            lang=&amp;quot;en&amp;quot;).items():
        if not tweet.retweeted and &amp;#39;RT @&amp;#39; not in tweet.text:
            yield tweet
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get all our challenges repo's forks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_forks():
    page_num = 0
    while True:
        page_num += 1
        url = FORK_URL + str(page_num)
        response = requests.get(url)
        d = response.json()
        if not d:
            return
        for row in d:
            url = row[&amp;#39;html_url&amp;#39;]
            updated = row[&amp;#39;updated_at&amp;#39;]
            pushed = row[&amp;#39;pushed_at&amp;#39;]
            yield Fork(url, updated, pushed)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Using a Generator to SSH to Multiple Hosts Idea&lt;/h2&gt;
&lt;p&gt;I came up with a &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_ssh.py"&gt;useful SSH script&lt;/a&gt; for last week’s context manager challenge.&lt;/p&gt;
&lt;p&gt;It works great but it’s only for one host.&lt;/p&gt;
&lt;p&gt;A cool idea from here (that I’ll probably use for work now that I think about it!) would be to make a generator to create a list of node IP addresses to use with the ssh code.&lt;/p&gt;
&lt;p&gt;The catch would be the SSH authentication for each server if your credentials aren’t the same across your fleet.&lt;/p&gt;
&lt;p&gt;Simplistically but potentially it could look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net = input(&amp;#39;Input your IP net, e.g. 192.168.0&amp;#39;)

# define the generator
def get_nodes(net):
    for i in range(1, 256):
        yield &amp;#39;{}.{}&amp;#39;.format(net, i)

# consume it
for node in get_nodes():
    print(&amp;#39;Checking IP {}&amp;#39;.format(node))
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(node, username=username, password=password)
        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(&amp;#39;cat /etc/hostname&amp;#39;)
        yield ssh_stdout.readlines()
    finally:
        ssh.close()

    confirm = input(‘Do you want to continue? &amp;#39;)
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output (assuming 'net' was entered as 192.168.0):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Checking IP 192.168.0.1
-- output --
Checking IP 192.168.0.2
-- output --
Checking IP 192.168.0.3
-- output --
...
...
Checking IP 192.168.0.253
-- output --
Checking IP 192.168.0.254
-- output --
Checking IP 192.168.0.255
-- output --
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note the lack of StopIteration. This is because the for loop catches that for you).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Generators are extremely useful for keeping memory usage low. Not a huge deal for your run of the mill script at home or on your laptop but definitely worth keeping in mind and learning for your coding arsenal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are many ways to skin a… actually, we’re animal lovers here. There are many ways to code a solution! As I wrote the SSH script above I was thinking it’d be much easier to do it differently (not force the generator) but I wanted to for the sake of this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you use generators in any creative ways? Maybe you can &lt;em&gt;generate&lt;/em&gt; some interest with your solutions…  pun intended! &lt;a href="https://www.youtube.com/watch?v=bcYppAs6ZdI"&gt;I’m here all week!&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;next(PyBites_Generators)&lt;/h2&gt;
&lt;p&gt;The next step (ha!) is to learn ’send' (yes, you can send data into a generator, how cool is that?!) -&amp;gt; coroutines -&amp;gt; asyncio ... So much to learn, so little time!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;— Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="code"></category><category term="pybites"></category><category term="generators"></category><category term="iteration"></category><category term="yield"></category></entry><entry><title>Comparing Lists with Difflib</title><link href="https://pybit.es/comparing_lists.html" rel="alternate"></link><published>2017-03-08T10:00:00+01:00</published><updated>2017-03-08T10:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-08:/comparing_lists.html</id><summary type="html">&lt;p&gt;Learn to compare blocks of text with the difflib module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love finding new things, especially when they end up saving you a boat load of time and effort! I was looking for a way to compare two lists as the code I had seemed quite clunky. Surely there had to be a better way out there! That's when I discovered difflib.&lt;/p&gt;
&lt;h2&gt;The Julian Way&lt;/h2&gt;
&lt;p&gt;I'll show you how I was approaching the problem first. Don't judge me!&lt;/p&gt;
&lt;p&gt;First, the two blocks of text (made these lists up on the spot):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1 = &amp;quot;&amp;quot;&amp;quot;Julian&amp;#39;s to-do list:
1. Be awesome.
2. Pybites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; text2 = &amp;quot;&amp;quot;&amp;quot;Bob&amp;#39;s to-do list:
1. Be awesome!
2. PyBites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then split the these blocks up into strings using &lt;em&gt;splitlines()&lt;/em&gt;. This returns a list containing each line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I got stuck. I came up with a for loop that checked to see if items from the &lt;em&gt;text1_split&lt;/em&gt; list were in the &lt;em&gt;text2_split&lt;/em&gt; list. There's an if statement for the checking:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i in text1_split:
    if i in text2_split:
        print(&amp;quot;&amp;#39;%s&amp;#39; is in both lists!&amp;quot; % (i))
    else:
        print(&amp;quot;&amp;#39;%s&amp;#39; is NOT in both lists!&amp;quot; % (i))


&amp;#39;Julian&amp;#39;s to-do list:&amp;#39; is NOT in both lists!
&amp;#39;1. Be awesome.&amp;#39; is NOT in both lists!
&amp;#39;2. Pybites.&amp;#39; is NOT in both lists!
&amp;#39;3. Enjoy a beer.&amp;#39; is in both lists!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that it doesn't tell me what's in &lt;em&gt;text2_split&lt;/em&gt;. All it's confirming is whether the items in &lt;em&gt;text1_split&lt;/em&gt; exist in &lt;em&gt;text2_split&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;The code was already getting out of hand. From here I'd need to add code to tell me what's in &lt;em&gt;text2_split&lt;/em&gt; if there isn't a match and what the differences are. 
Enter difflib.&lt;/p&gt;
&lt;h2&gt;Difflib to the Rescue!&lt;/h2&gt;
&lt;p&gt;Before I show you the command, I'll just say that difflib is actually quite expansive, ie, there's a lot you can do with it. This post is just about the &lt;em&gt;Differ()&lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;As before, you have to split the blocks of text into a list of strings/lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then call &lt;em&gt;Differ().compare()&lt;/em&gt; to do the comparison. I store the result of the command in the &lt;em&gt;diff&lt;/em&gt; variable. Finally, I print the output, joining the lines with a new line to make it readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; diff = difflib.Differ().compare(text1_split, text2_split)
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;\n&amp;#39;.join(diff))
- Julian&amp;#39;s to-do list:
? ^^^^^^

+ Bob&amp;#39;s to-do list:
? ^^^

- 1. Be awesome.
?              ^

+ 1. Be awesome!
?              ^

- 2. Pybites.
?      ^

+ 2. PyBites.
?      ^

  3. Enjoy a beer.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look familiar? If you're a Linux/Unix fan you'll have likely come across the &lt;em&gt;diff&lt;/em&gt; command, in which case you'll have no problem reading this!&lt;/p&gt;
&lt;p&gt;What you're seeing here is the differences between each list.&lt;/p&gt;
&lt;p&gt;The key to reading the above:&lt;/p&gt;
&lt;p&gt;'- ' indicates the difference is in the first list. In this case, the letters "Julian".&lt;/p&gt;
&lt;p&gt;'+ ' indicates the difference is in the second list. In this case, the letters "Bob".&lt;/p&gt;
&lt;p&gt;'? ' draws your attention to anything that doesn't appear in either list. It appears under every line here (except the last) because the new line we inserted wasn't originally there.&lt;/p&gt;
&lt;p&gt;'  ' (a blank space) indicates that this line is a perfect match and is in both lists. In this case, line item "3. Enjoy a beer.".&lt;/p&gt;
&lt;p&gt;The ^ (caret) symbol appears underneath the differing characters. Note the ^ under the lower and upper case B in the second line item.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is only the tip of the iceberg as Difflib is pretty big. In fact, we used the difflib.SequenceMatcher class in our &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;Code Challenge 03 - PyBites blog tag analysis&lt;/a&gt; to look for similarities between our blog tags.&lt;/p&gt;
&lt;p&gt;It's one of those handy stdlib modules you stumble across that can change how you code (another example we wrote about is &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt;). I think it's brilliant!&lt;/p&gt;
&lt;p&gt;Read more on difflib &lt;a href="https://docs.python.org/3/library/difflib.html"&gt;here&lt;/a&gt; or use help(difflib) from the Python shell.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="stdlib"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>Pythonic String Formatting</title><link href="https://pybit.es/string-formatting.html" rel="alternate"></link><published>2017-03-02T08:00:00+01:00</published><updated>2017-03-02T08:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-02:/string-formatting.html</id><summary type="html">&lt;p&gt;The formatting of strings has been a hot topic in Python and something that I struggled with at the beginning. It's quite interesting to see how it's evolved over time to be what it is today!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Formatting strings was one of the things that really hurt my head when I started learning Python. Everyone did it differently!&lt;/p&gt;
&lt;p&gt;After doing Michael Kennedy's &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;&lt;em&gt;Write Pythonic Code Like a Seasoned Developer&lt;/em&gt;&lt;/a&gt; course, I was inspired to write about the different ways you could format a string in Python. Mainly because the method we've all deemed &lt;strong&gt;wrong&lt;/strong&gt; (or at least, "least Pythonic") is the way I started off doing it!&lt;/p&gt;
&lt;h2&gt;The Terribly Unpythonic Method&lt;/h2&gt;
&lt;p&gt;Okay let's get this out of the way first. Here's how I formatted a string when I first started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; country = &amp;quot;Australia&amp;quot;
&amp;gt;&amp;gt;&amp;gt; level = 11
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of &amp;quot; + country + &amp;quot; is &amp;quot; + str(level) + &amp;quot;.&amp;quot;)
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll be honest, I was just glad I could get text to print! It's pretty terrible isn't it? Having to display &lt;em&gt;level&lt;/em&gt; as a string with &lt;em&gt;str()&lt;/em&gt; sends shivers down my spine now.&lt;/p&gt;
&lt;h2&gt;Using the String Format Operator&lt;/h2&gt;
&lt;p&gt;When Bob first showed me code that contained the string format operator I could have died. Not because it was awesome but because as a newbie, I had no idea what the heck I was even reading! Using the same variables and types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of %s is %d.&amp;quot; % (country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What the heck are % signs doing within a string? And how are they being substituted and not being displayed as is?&lt;/p&gt;
&lt;p&gt;It's pretty simple! What the code is doing is substituting the %s and %d for the values specified in the brackets after the string.&lt;/p&gt;
&lt;p&gt;That is, %s is substituted with &lt;em&gt;country&lt;/em&gt; and %d with &lt;em&gt;level&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was great until I realised that the %s was only to be used to specify a string type variable and %d to specify a decimal. (There are more options to choose from of course!).&lt;/p&gt;
&lt;p&gt;The reason this is a pain is that you'll need to remember the type of every variable you're going to print and get the order right in your print statement. Not a huge fan.&lt;/p&gt;
&lt;h2&gt;Replacement Fields&lt;/h2&gt;
&lt;p&gt;This is my favourite one. Replacement fields!&lt;/p&gt;
&lt;p&gt;Replacement fields expand on the format operator by taking the thinking out of the equation (always a good thing for me!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of {} is {}.&amp;quot;.format(country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar to the format operator, we put the replacement fields &lt;em&gt;{}&lt;/em&gt; where we'd like the variable output to be in the string. The difference? We no longer need to remember what the &lt;strong&gt;type&lt;/strong&gt; of the variable is! &lt;/p&gt;
&lt;p&gt;It's all taken care of by &lt;em&gt;.format()&lt;/em&gt; which will display your variable using the appropriate format. So very cool and painless!&lt;/p&gt;
&lt;p&gt;Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Python 3.6 f-strings&lt;/h2&gt;
&lt;p&gt;f-strings were introduced &lt;a href="http://pybit.es/3.6_new.html"&gt;in Python 3.6&lt;/a&gt; and are pretty new to me but that doesn't stop them from being awesome! Check this out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f&amp;quot;The awesomeness level of {country} is {level}.&amp;quot;
&amp;#39;The awesomeness level of Australia is 11.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How incredible is that? The variables are called in the string output directly within the replacement fields. You no longer need to manually call format()!&lt;/p&gt;
&lt;p&gt;Even more Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Being quite new to Python means I'm more likely to use the latest and greatest method of formatting strings which actually makes things more difficult. I now want to go back through my old code and update it with the newer, more Pythonic methods.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pythonic string formatting summarized" src="https://pybit.es/images/pythonic-string-formatting.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I want to hear more about how other programmers format their output strings. It's a topic that's interested me purely because of the strong opinion out there!&lt;/p&gt;
&lt;p&gt;How do you do it?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>Write Pythonic Code Like a Seasoned Developer Review</title><link href="https://pybit.es/pythonic-code-course-rewiew.html" rel="alternate"></link><published>2017-02-23T20:30:00+01:00</published><updated>2017-02-23T20:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-23:/pythonic-code-course-rewiew.html</id><summary type="html">&lt;p&gt;Review of Michael Kennedy's Brilliant Pythonic Code Course&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I'd hit a point in my Python learning where reading books, posts, github, etc  just wasn't cutting it. Sometimes the self-learning experience can slow down and you start stagnating. I decided it was time to try learning from some video courses.&lt;/p&gt;
&lt;p&gt;At first I started watching YouTube videos but was eventually (and luckily!) introduced to the &lt;a href="https://training.talkpython.fm"&gt;Talk Python Training Courses&lt;/a&gt; by Michael Kennedy, host of the &lt;a href="https://talkpython.fm"&gt;Talk Python Podcast&lt;/a&gt;. Needless to say, I was so impressed I had to write about it!&lt;/p&gt;
&lt;h2&gt;Write Pythonic Code Like a Seasoned Developer&lt;/h2&gt;
&lt;p&gt;I'll start by calling out that Michael has 4 courses on offer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by Building 10 Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business"&gt;Python for Entrepreneurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_http_reset_client_course/consuming-http-and-soap-services-in-python-with-json-xml-and-screen-scraping"&gt;Consuming HTTP Services in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a beginner, I actually should have started with the &lt;em&gt;Python Jumpstart&lt;/em&gt; course as it's definitely of the "Learn Python" variant but I just couldn't look past the &lt;em&gt;Write Pythonic Code&lt;/em&gt; option!&lt;/p&gt;
&lt;h2&gt;No BS&lt;/h2&gt;
&lt;p&gt;The first thing you'll notice when you kick off Michael's course is that there's no fluff and that's why I absolutely &lt;strong&gt;love&lt;/strong&gt; it. After the initial set up of the environment, he drops you straight into PEP8 recommended styling.&lt;/p&gt;
&lt;p&gt;There is no lecturing, there's just code and it's amazing. Every single concept is backed up by real and "live" examples. Michael even leaves certain, relatable mistakes in the course just to demonstrate how easy it is to make them.&lt;/p&gt;
&lt;h2&gt;The Content&lt;/h2&gt;
&lt;p&gt;In these first 13 minutes I learned &lt;em&gt;so&lt;/em&gt; many techniques and best practices.&lt;/p&gt;
&lt;p&gt;Quite a few times I found myself cursing that it had taken me weeks to learn what Michael was demonstrating in meer minutes.&lt;/p&gt;
&lt;p&gt;The beauty of the course however lies in the fact that you're not spoon fed everything. You're expected to have prior knowledge of concepts such as Python Classes, data structures and so on.&lt;/p&gt;
&lt;p&gt;The courses teaches you to do exactly what the title implies: &lt;em&gt;To Write Pythonic Code&lt;/em&gt;. Plain and simple! You will learn the most Pythonic way to merge dictionaries, format strings and write loops (just to name a few).&lt;/p&gt;
&lt;p&gt;It sounds simplistic but it's actually quite in depth. I was really impressed at how deep Michael dives with some of his explanations!&lt;/p&gt;
&lt;h2&gt;Teaching Style&lt;/h2&gt;
&lt;p&gt;This brings me to the teaching style. There are two kinds of teachers, the type that will bore you to death with slides and monotony, and then there are the ones that teach in such a way that you're excited to learn.&lt;/p&gt;
&lt;p&gt;That's Michael.&lt;/p&gt;
&lt;p&gt;Like I said, every concept is backed by oodles of code examples. Michael "live" types the code - &lt;em&gt;so&lt;/em&gt; much better than static slides.&lt;/p&gt;
&lt;p&gt;My favourite thing is that he demonstrates the multiple ways you can write the same block of code.&lt;/p&gt;
&lt;p&gt;For example, in numerous instances he shows you how to write the code in a "Bad C-Style" way, then shows you the "less Pythonic" method, followed by the amazingly Pythonic super way.&lt;/p&gt;
&lt;p&gt;Seeing this progression from "bad" to Pythonic really helps to cement the concepts.&lt;/p&gt;
&lt;h2&gt;Familiarity&lt;/h2&gt;
&lt;p&gt;I feel I should mention that as I listen to the &lt;em&gt;Talk Python To Me&lt;/em&gt; podcast, there's a sense of familiarity. I don't feel like I'm taking a course from some stranger but rather from someone I know.&lt;/p&gt;
&lt;p&gt;I've listened to Michael for hours on end through the podcast which really helps with the engagement. (The occasional joke also contributes!). It's pretty cool and definitely not creepy at all okay?!&lt;/p&gt;
&lt;h2&gt;Where are the Examples?&lt;/h2&gt;
&lt;p&gt;You might be wondering why I haven't provided any examples to back up my judgement.
The reality is, Michael's clearly put a &lt;strong&gt;lot&lt;/strong&gt; of hard work into this course (it's &lt;em&gt;extremeley&lt;/em&gt; polished) so copying any of his code examples here would be doing him a disservice.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Clearly I'm a fan. I've seen online courses for Python before and quite a few have left me wanting but not this one.&lt;/p&gt;
&lt;p&gt;I wish I'd stumbled upon &lt;em&gt;Write Pythonic Code Like a Seasoned Developer&lt;/em&gt; a lot earlier.&lt;/p&gt;
&lt;p&gt;When it comes to writing Pythonic code, if you want to learn the how and also the &lt;em&gt;why&lt;/em&gt; then this is the course for you.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Here are some resources you might find helpful relative to this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer Course URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael's &lt;a href="https://talkpython.fm/"&gt;Talk Python to Me Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael Kennedy and Brian Okken's &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="training"></category><category term="courses"></category><category term="review"></category><category term="learning"></category></entry><entry><title>How to Order Dict Output in Python</title><link href="https://pybit.es/dict-ordering.html" rel="alternate"></link><published>2017-02-16T23:00:00+01:00</published><updated>2017-02-16T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-16:/dict-ordering.html</id><summary type="html">&lt;p&gt;Learn how to order the output of a Python Dict&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dicts are awesome, even for a beginner like me. What isn't so awesome is trying to figure out how to list out their contents for the first time! Lists are easy enough but how on earth do you list out the key/value contents of a dict, let alone in any sort of order?&lt;/p&gt;
&lt;h2&gt;Listing the Contents of a Dict&lt;/h2&gt;
&lt;p&gt;Let's start by simply listing out the dict contents. In the below example I have a dict stored in the &lt;em&gt;ages&lt;/em&gt; variable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I'm not having a mid-life crisis. I'm quite aware that I'm no longer 20.&lt;/p&gt;
&lt;p&gt;Disclaimer 2: I'm being generous when I say Bob is 23. Sorry Bob!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ages = {&amp;#39;julian&amp;#39;: 20, &amp;#39;bob&amp;#39;: 23, &amp;#39;zack&amp;#39;: 3, &amp;#39;anthony&amp;#39;: 95, &amp;#39;daniel&amp;#39;: 41}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in ages.items():
    print(k, v)

julian 20
bob 23
zack 3
anthony 95
daniel 41
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we create the dict. For the sake of this example I've made sure the keys and the values are not in alphabetical or numerical order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for loop iterates over the keys, &lt;em&gt;k&lt;/em&gt; and values, &lt;em&gt;v&lt;/em&gt; in &lt;em&gt;ages.items&lt;/em&gt;. Each key/value pair in a dict is called an &lt;strong&gt;item&lt;/strong&gt; thus we use .items().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We print the key and value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the output is in the same "order" as it was inside the dict. It wasn't automatically ordered alphabetically or numerically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Using a Lambda to Order the Output in Alphabetical Order&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're unsure of what a Lambda is, I strongly urge you to read &lt;a href="https://dbader.org/blog/python-lambda-functions"&gt;this article by Dan Bader&lt;/a&gt;. It was my source for learning what they were and how to use them. It's a great post!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The previous output is great but what if I wanted to print the &lt;em&gt;ages&lt;/em&gt; data in alphabetical order? Not only do I need to sort it by the letter but also make sure I point my sorting method at the &lt;strong&gt;key&lt;/strong&gt; in the dict. I can do this with a lambda!&lt;/p&gt;
&lt;p&gt;First, let's sort it alphabetically with the help of a lambda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0])
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, note that we're going to use &lt;em&gt;sorted&lt;/em&gt;. This will sort everything between the () in ascending order. Run &lt;em&gt;help(sorted)&lt;/em&gt; to see the available options to &lt;em&gt;sorted&lt;/em&gt;. You'll see that we can specify a key function to help sort the data. (See more about Python's Help function &lt;a href="http://pybit.es/python-help.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;ages.items()&lt;/em&gt; is called to break the &lt;em&gt;ages&lt;/em&gt; dict up into the five individual &lt;strong&gt;items&lt;/strong&gt;. Note that these "items" I'm referring to are actually tuples!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then use a lambda function as the key to help sort. &lt;em&gt;lambda x&lt;/em&gt; at this point will be the individual &lt;strong&gt;item&lt;/strong&gt; in &lt;em&gt;ages.items()&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function of &lt;em&gt;lambda x&lt;/em&gt; is to sort by &lt;em&gt;x[0]&lt;/em&gt; The contents of x[] is the key/value pair in the dict. For example, {'julian', 20}. The 0 indicates the first position in the pair, the key, which in this case is the name 'julian'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output is then sorted by the key position in ascending, alphabetical order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: The output of &lt;em&gt;sorted()&lt;/em&gt; is a new list. The &lt;em&gt;ages&lt;/em&gt; dict was not altered, a new list was generated and can thus be stored (hint hint!).&lt;/p&gt;
&lt;h2&gt;Sorting the Output in Numerical Order&lt;/h2&gt;
&lt;p&gt;Now for the flip side. What if I wanted to sort it in numerical order which would be by the &lt;strong&gt;value&lt;/strong&gt; in this case?&lt;/p&gt;
&lt;p&gt;Identical as the above sort with one tiny change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1])
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;anthony&amp;#39;, 95)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yep! All we do is change the lambda x function to point at position &lt;em&gt;x[1]&lt;/em&gt;, the value.&lt;/p&gt;
&lt;h2&gt;Sorting in Reverse!&lt;/h2&gt;
&lt;p&gt;Sorting that output in reverse is quite simple as well. We use the &lt;em&gt;reverse&lt;/em&gt; flag that &lt;em&gt;sorted()&lt;/em&gt; so handily supports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Name Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0], reverse=True)
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;anthony&amp;#39;, 95)]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Age Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1], reverse=True)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Storing the Sorted Output in a Dict&lt;/h2&gt;
&lt;p&gt;You'll have noticed that we still have the output in a list and haven't used &lt;em&gt;print()&lt;/em&gt; yet. There's a reason for that.&lt;/p&gt;
&lt;p&gt;The thing is, it's a lot harder and less Pythonic to print the output of a dict as a list, then iterate over that to get our friendlier &lt;em&gt;print()&lt;/em&gt; output.&lt;/p&gt;
&lt;p&gt;It'd be much better to iterate over the output like we did at the start of this post but to do that, our &lt;em&gt;sorted()&lt;/em&gt; output would need to be a dict. How do we do that if we know &lt;em&gt;sorted()&lt;/em&gt; always returns a list?&lt;/p&gt;
&lt;p&gt;Easy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dict(sorted(ages.items(), key=lambda x: x[0]))
{&amp;#39;anthony&amp;#39;: 95, &amp;#39;bob&amp;#39;: 23, &amp;#39;daniel&amp;#39;: 41, &amp;#39;julian&amp;#39;: 20, &amp;#39;zack&amp;#39;: 3}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We simply call dict on the output of &lt;em&gt;sorted()&lt;/em&gt;. How cool is that? The output is now a dict!&lt;/p&gt;
&lt;h2&gt;Printing the Final Result&lt;/h2&gt;
&lt;p&gt;The moment of truth. Let's print the sorted dict output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; alpha = dict(sorted(ages.items(), key=lambda x: x[0]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in alpha.items():
    print(k, v)

anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; num = dict(sorted(ages.items(), key=lambda x: x[1]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in num.items():
    print(k, v)

zack 3
julian 20
bob 23
daniel 41
anthony 95
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Is it Really Sorted Though?&lt;/h2&gt;
&lt;p&gt;Have we &lt;em&gt;really&lt;/em&gt; sorted the dict? Here's what we've done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iterated over a dict.&lt;/li&gt;
&lt;li&gt;Sorted the items within the dict into a List.&lt;/li&gt;
&lt;li&gt;"Converted" that list to a dict.&lt;/li&gt;
&lt;li&gt;Assigned the new dict with alphabetically sorted items to a variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Dicts are unordered data structures.&lt;/strong&gt; This new dict, &lt;em&gt;alpha&lt;/em&gt;, while containing alphabetically sorted data, is still, technically, unordered.&lt;/p&gt;
&lt;p&gt;Can we order it? Sort of. This is where we can use &lt;em&gt;OrderedDict&lt;/em&gt; which is part of the Python stdlib module, &lt;em&gt;collections&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;anthony&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;
&lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="n"&gt;daniel&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;
&lt;span class="n"&gt;julian&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;zack&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output is ultimately the same with one exception. In the background, the dict &lt;em&gt;alpha&lt;/em&gt; will remember the &lt;em&gt;order&lt;/em&gt; of the keys as they were inserted.&lt;/p&gt;
&lt;p&gt;While this will work without OrderedDict, there's no &lt;em&gt;guarantee&lt;/em&gt; that keys will keep the same order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read more on OrderedDicts &lt;a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Bonus: Substituting the Lambda for Readability&lt;/h2&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; leave things as they are but let's make this a little more readable by storing the lambda function in a variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; get_alpha = lambda x: x[0]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=get_alpha)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad! We could also do that for the numerical sort by making a &lt;em&gt;get_num&lt;/em&gt; variable!&lt;/p&gt;
&lt;h2&gt;Bonus: Printing the Highest/Lowest Dict Item&lt;/h2&gt;
&lt;p&gt;Okay this is way out of scope for this post but I got playing and figured I'd add it in for good measure.&lt;/p&gt;
&lt;p&gt;What if I wanted to list out the oldest chap in this list? Well, we don't need to sort anything, we just need to know the &lt;em&gt;max&lt;/em&gt; number/age right? (For readability, I'm substituting the &lt;strong&gt;value&lt;/strong&gt; lambda from the previous examples with &lt;em&gt;get_num&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; max(ages.items(), key=get_num)
(&amp;#39;anthony&amp;#39;, 95)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also pull the youngest/lowest entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; min(ages.items(), key=get_num)
(&amp;#39;zack&amp;#39;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bonus: Wrap it all up in a def&lt;/h2&gt;
&lt;p&gt;Okay last one, I swear!&lt;/p&gt;
&lt;p&gt;Why don't we put all of this into a function that we can call easily at any time? I mean, it'd be nice to have the ability to reuse this code on any dict we want to sort alphabetically or numerically right?&lt;/p&gt;
&lt;p&gt;Keep in mind the below is assuming the dict key is the string we're sorting by. If we tried to give it a dict where the key was a number and the value was a string it would sort it by the key/number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def alpha_sort(some_dict):
...     alpha = OrderedDict(sorted(some_dict.items(), key=lambda x: x[0]))
...     for k, v in alpha.items():
...         print(k,v)
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; alpha_sort(ages)
anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then use this same &lt;em&gt;alpha_sort&lt;/em&gt; function on any similarly constructed dict we want!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Top 5 pet peeves
&amp;gt;&amp;gt;&amp;gt; alpha_sort(pet_peeves)
Bad Drivers 2
Laziness 3
Predictable TV Shows 4
Rude People 1
Telemarketers 5
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Not really my top 5 pet peeves!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How great is Python? If you have any other ideas or comments regarding ordering the output of a dict, please let me know! Always be Learning!&lt;/p&gt;
&lt;h2&gt;Update comments Reddit&lt;/h2&gt;
&lt;p&gt;Some good discussion &lt;a href="https://www.reddit.com/r/learnpython/comments/5v3kks/ordering_dict_output/?st=izdve470&amp;amp;sh=6797b6e3"&gt;on Reddit&lt;/a&gt;. Thanks ManyInterests and nadrimajstor for suggesting itemgetter!&lt;/p&gt;
&lt;p&gt;Here is an example how you can use it for sorting instead of lambda: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sort_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sort_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="dicts"></category><category term="data structures"></category></entry><entry><title>Shelve It!</title><link href="https://pybit.es/shelve-it.html" rel="alternate"></link><published>2017-02-14T00:48:00+01:00</published><updated>2017-02-14T00:48:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-14:/shelve-it.html</id><summary type="html">&lt;p&gt;Shelve basics and a question on how best to manage importing the DB.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When Bob first spoke about Python Shelves a while ago, I thought he'd gone bonkers. This was mainly because he was talking about his "Python shelve" storing book data in a script he was writing. &lt;/p&gt;
&lt;p&gt;"How the heck did you get a bookshelf in Python?!", I wondered. Little did I know he was talking about an awesome, persistent storage option.&lt;/p&gt;
&lt;p&gt;My first foray into Python shelves was actually rather painless (for me). I was impressed by how simple they were. They were almost as simple as opening and working text files.&lt;/p&gt;
&lt;h2&gt;Creating a Shelf File&lt;/h2&gt;
&lt;p&gt;A quick overview for the uninitiated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Break it down!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We import the shelve module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;shelve.open('data')&lt;/em&gt; opens (or creates in this case as it doesn't exist yet) a database .db file called &lt;em&gt;data&lt;/em&gt;. This is assigned to the &lt;em&gt;db&lt;/em&gt; variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a variable called &lt;em&gt;name&lt;/em&gt; and it assign it the name Julian (so vain!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interesting part. We now assign the &lt;em&gt;name&lt;/em&gt; variable (containing 'Julian') to the key &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We close off our access to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the &lt;em&gt;name&lt;/em&gt; variable has been stored in a shelf called &lt;em&gt;data.db&lt;/em&gt;. This .db file, by default, is located in the same directory that your script is run from.&lt;/p&gt;
&lt;h2&gt;UnShelve It!&lt;/h2&gt;
&lt;p&gt;It's not actually called unshelving. Just roll with it.&lt;/p&gt;
&lt;p&gt;To read the data back in, we do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The read in of the data here is the 3rd line of code. In this line we take the object stored in &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf and assign it to &lt;em&gt;name&lt;/em&gt;. The string in &lt;em&gt;name&lt;/em&gt; (Julian) is then printed.&lt;/p&gt;
&lt;h2&gt;Noteworthy&lt;/h2&gt;
&lt;p&gt;The above is super basic of course. Shelves become really useful when we start storing lists and dicts in them.&lt;/p&gt;
&lt;p&gt;There is a catch though. Any data you read in from the shelf is not automatically updated in the shelf if changed by your script. Using the above script, after reading in &lt;em&gt;db_names&lt;/em&gt;, if we were to change the name variable to contain 'Bob' instead of 'Julian', that update would not be pushed back to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;p&gt;To enable automatic writing to the shelf you can open the shelf with "writeback" enabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db = shelve.open(&amp;#39;data&amp;#39;, writeback=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this can be super handy, it can be a bit of a memory hog if you're not careful. Any changes being made during execution are stored in cache until the shelf file is closed with &lt;em&gt;.close()&lt;/em&gt;. This is when they're written to the shelf file.&lt;/p&gt;
&lt;h2&gt;The Wall I Hit with Shelves&lt;/h2&gt;
&lt;p&gt;My biggest hurdle with regards to shelves was how to manage a script that was importing the shelf data when it was only being run for the first time. That is, before the db file had even been populated with data.&lt;/p&gt;
&lt;p&gt;If I try to run the above code to read in data before &lt;em&gt;db_names&lt;/em&gt; even exists, I'll get an error.&lt;/p&gt;
&lt;p&gt;I wasn't actually too sure how to approach this. Should I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have some sort of configuration/setup script that runs separately before running the main program?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a bunch of if statements?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a cli based menu system that allows the user to choose when to add items?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with all things Python, I found I was &lt;em&gt;try&lt;/em&gt;-ing (pun intended!) too hard. It was as simple as using &lt;em&gt;try&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name = []

while True:
    try:
        with shelve.open(&amp;#39;data&amp;#39;) as db:
            name = db[&amp;#39;db_names&amp;#39;]
            break
    except:
        print(&amp;quot;Please enter a  name to begin: &amp;quot;)
        name.append(input())
        break 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works too!&lt;/p&gt;
&lt;p&gt;This situation got me thinking though. There's more than one way to skin a... &lt;em&gt;ahem&lt;/em&gt;... potato?&lt;/p&gt;
&lt;p&gt;How would you Pythonistas handle this? What sort of approach do you take when it comes to dealing with shelves?&lt;/p&gt;
&lt;p&gt;For now I'll stick with &lt;em&gt;try&lt;/em&gt; but I'm keen to know what you think.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="shelve"></category><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="database"></category></entry><entry><title>Discover Python Help Options</title><link href="https://pybit.es/python-help.html" rel="alternate"></link><published>2017-02-02T21:45:00+01:00</published><updated>2017-02-02T21:45:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-02:/python-help.html</id><summary type="html">&lt;p&gt;Discover some of the numerous Python Help functions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When it comes to Python I'm pretty much self taught so it came as no surprise to me when I discovered that Python had help functions. I was blown away to say the least!&lt;/p&gt;
&lt;p&gt;There are 3 help related options I'm going to discuss: help(), dir() and pydoc.&lt;/p&gt;
&lt;h2&gt;help()&lt;/h2&gt;
&lt;p&gt;I face palmed over not finding out about help() sooner. Just like on any operating system, help exists to assist with commands. In Python you simply put whatever object you want within the help function and you'll be presented with a very "man page-esque" looking help page. For example, let's say we wanted to find out more about the &lt;em&gt;len&lt;/em&gt; function: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(len)

Help on built-in function len in module builtins:

len(obj, /)
    Return the number of items in a container.
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The help page will detail the syntax for running the object as well as an explanation as to what it does. Some objects return much more detail than others based on their complexity. Try running &lt;strong&gt;help(range)&lt;/strong&gt; in IDLE to see an example of the detail help() can provide. It's pretty awesome!&lt;/p&gt;
&lt;h2&gt;dir()&lt;/h2&gt;
&lt;p&gt;It constantly baffled me as to how programmers like Bob seemed to just &lt;em&gt;know&lt;/em&gt; the attributes to use with a specific object. I may never know the answer but I'm
definitely one step closer thanks to dir().&lt;/p&gt;
&lt;p&gt;dir() is just as wonderful as help(). It allows you to query an object and return its attributes. That is to say, if you've ever wondered what to use with &lt;em&gt;len&lt;/em&gt; (eg: len.&lt;attribute/module&gt;) then use dir(len) to get a list. Check out what happens if we use dir() on &lt;em&gt;range&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(range)
[&amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__reversed__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;start&amp;#39;, &amp;#39;step&amp;#39;, &amp;#39;stop&amp;#39;]
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now know we can use the &lt;em&gt;count&lt;/em&gt; function with range: range.count.&lt;/p&gt;
&lt;h2&gt;help() and dir() Together&lt;/h2&gt;
&lt;p&gt;The best part is that both help() and dir() compliment each other perfectly.&lt;/p&gt;
&lt;p&gt;Using the previous example of &lt;em&gt;range&lt;/em&gt; we found that we can use the &lt;em&gt;count&lt;/em&gt; function with it. The question is how?&lt;/p&gt;
&lt;p&gt;Use help() of course!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(range.count)
Help on method_descriptor:

count(...)
    rangeobject.count(value) -&amp;gt; integer -- return number of occurrences of value
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How awesome is that?!&lt;/p&gt;
&lt;p&gt;Modules that aren't in stdlib respond to help() and dir() as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;NAME&lt;/span&gt;
    &lt;span class="n"&gt;tweepy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Tweepy&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE&lt;/span&gt; &lt;span class="n"&gt;CONTENTS&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;
    &lt;span class="n"&gt;binder&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt;
    &lt;span class="n"&gt;models&lt;/span&gt;
    &lt;span class="n"&gt;parsers&lt;/span&gt;
    &lt;span class="n"&gt;streaming&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="n"&gt;FUNCTIONS&lt;/span&gt;
    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATA&lt;/span&gt;
    &lt;span class="n"&gt;__license__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;API&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AppAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DirectMessage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FileCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friendship&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MemoryCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ModelFactory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RateLimitError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SavedSearch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SearchResults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StreamListener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TweepError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__author__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__license__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__path__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__version__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;binder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;models&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parsers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;streaming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pydoc&lt;/h2&gt;
&lt;p&gt;Pydoc is different to help() and dir() in that you don't actually run it in IDLE or within a script. It's a command line tool that gets installed with Python.&lt;/p&gt;
&lt;p&gt;That said, Pydoc is actually quite similar to help(). It displays a help page (again, man page similarities!) of the Python object you want to query but does so on the command line. No need to start up IDLE.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) juliansequeira$ pydoc datetime
Help on module datetime:

NAME
    datetime - Fast implementation of the datetime type.

FILE
    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/datetime.so

MODULE DOCS
    http://docs.python.org/library/datetime
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The text displayed is made up of the docstrings within the object which means you can create your own if you make your own module etc.&lt;/p&gt;
&lt;p&gt;In typical Python fashion though, Pydoc takes it up a notch. It actually has the ability to display documentation for your installed modules/packages using the built in Python web server!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pydoc -p 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you point your browser to localhost:8000 you'll get a (relatively) nice web page with links to your Python package documentation.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Help is everywhere! I'm almost annoyed that it took me a year to discover this stuff. Better late than never I guess!&lt;/p&gt;
&lt;p&gt;It's so much nicer being able to get the syntax and attribute help that I need from within IDLE rather than having to Google it and sort through pages of stack overflow articles.&lt;/p&gt;
&lt;p&gt;Let me know if there are any other cool help modules or functions out there. I'd love to know!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="help"></category></entry><entry><title>Send Advanced Emails with Python MIME Submodules</title><link href="https://pybit.es/python-MIME.html" rel="alternate"></link><published>2017-02-01T11:30:00+01:00</published><updated>2017-02-01T11:30:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-01:/python-MIME.html</id><summary type="html">&lt;p&gt;Learn how to send richer emails with Python and the MIME Submodules&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my earlier post on &lt;a href="http://pybit.es/python-smtplib.html"&gt;sending basic emails with Python smtplib&lt;/a&gt; I outlined the bare minimum required to send an email with Python.&lt;/p&gt;
&lt;p&gt;While functional, it does however lack more advanced features which I'll touch on in this post. We'll be using the MIME email submodules to create a richer email.&lt;/p&gt;
&lt;h2&gt;What is MIME?&lt;/h2&gt;
&lt;p&gt;For those who are unaware, MIME (Multipurpose Internet Mail Extensions) is a standard that essentially makes emails more functional. As per the &lt;a href="https://en.wikipedia.org/wiki/MIME"&gt;Wikipedia Article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multipurpose Internet Mail Extensions (MIME) is an Internet standard that extends the format of email to support:
- Text in character sets other than ASCII
- Non-text attachments: audio, video, images, application programs etc.
- Message bodies with multiple parts
- Header information in non-ASCII character sets&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;You'll need to import &lt;em&gt;smtplib&lt;/em&gt; as expected but also the MIME submodules "MIMEMultipart" and "MIMEText":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data Entry&lt;/h2&gt;
&lt;p&gt;Next we'll add the missing header detail to the email. I aimed to make this as Pythonic as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]
msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = &amp;quot;, &amp;quot;.join(to_addr)
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking that down line by line:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assign your from/sender email address to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assin your recipient address or addresses to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the MIMEMultipart function to variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your sender email address variable to the 'From' value in MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your recipient addresses to the 'To' value in MIME. Note the .join function is used here to concatenate the email addresses with a comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify your Subject Line and add it to MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now for the meat. Add the text for the body of your email and again add it to MIME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;body = &amp;quot;Hello Everyone!&amp;quot;

msg.attach(MIMEText(body, &amp;#39;plain&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've added the data in the body variable to MIMEText in plain text format. You can specify HTML if you wish.&lt;/p&gt;
&lt;h2&gt;Send the Email&lt;/h2&gt;
&lt;p&gt;I'll be reusing the code from the simple email article here with a small addition. First the standard code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server = smtplib.SMTP(&amp;#39;smtp.gmail.com&amp;#39;, 587) #Specify Gmail Mail server

smtp_server.ehlo() #Send mandatory &amp;#39;hello&amp;#39; message to SMTP server

smtp_server.starttls() #Start TLS Encryption as we&amp;#39;re not using SSL.

#Login to gmail: Account | Password
smtp_server.login(&amp;#39; pybitesblog@gmail.com &amp;#39;, &amp;#39; GMAIL APPLICATION PASSWORD &amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The additional code is in the sendmail function. We now need to specify the text that we're sending. That is, we take all of the data that was added to the MIMEMultipart function (&lt;em&gt;msg&lt;/em&gt; variable) and we use it to populate the email:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;text = msg.as_string()

#Compile email: From, To, Email body
smtp_server.sendmail(from_addr, to_addr, text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, best practice, we close off the SMTP connection and in this case, print a message to indicate the email was sent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.quit()
print(&amp;#39;Email sent successfully&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using this framework you can start to send more and more detailed emails. MIME allows you to send attachments which opens all sorts of doors.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://docs.python.org/3/library/email-examples.html"&gt;Python 3 Docs on Email&lt;/a&gt; to see some other detailed examples. I like the idea of the HTML message with an alternative plain text version. Very cool!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="email"></category><category term="automation"></category><category term="MIME"></category></entry><entry><title>Send Emails with Python smtplib</title><link href="https://pybit.es/python-smtplib.html" rel="alternate"></link><published>2017-01-26T19:25:00+01:00</published><updated>2017-01-26T19:25:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-26:/python-smtplib.html</id><summary type="html">&lt;p&gt;Learn how to send emails using Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently given a &lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt; as a gift and figured it'd make a cool host for cron jobs. I've always wanted to set up an email notification service for myself so I started playing around with &lt;em&gt;smtplib&lt;/em&gt; in Python.&lt;/p&gt;
&lt;h2&gt;Set up an Application Password with Gmail&lt;/h2&gt;
&lt;p&gt;It was surprisingly simple to send a basic email using my Gmail account. The complexity came from Google's 2-step Verification security settings. If using Gmail, you'll need to &lt;a href="https://support.google.com/accounts/answer/185833?hl=en"&gt;set up an Application Password&lt;/a&gt; for the machine you're running your Py script from.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once generated, the App Password will be your Gmail Password for this script.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sending a Basic Email&lt;/h2&gt;
&lt;p&gt;The first thing you should try is sending the simplest of emails. Just plain text.&lt;/p&gt;
&lt;p&gt;There are a few steps, which I'll detail one by one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the smtplib module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using smtplib, specify the SMTP server and port you'll be accessing. In this example I'm using Gmail's servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SMTP server you're connecting to requires a sort of 'handshake' for the service to work properly. This is done using the .ehlo() function of smtplib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.ehlo()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As Google doesn't use SSL, we need to kick off TLS Encryption manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.starttls()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now for the login. Keep in mind at this point, you'll use the App Password you obtained earlier instead of your usual Gmail password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.login(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we send the actual email message. The first email address is the address you're emailing from, the second is the recipient.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.sendmail(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;recipient@gmail.com&amp;#39;, &amp;#39;Subject: Happy Australia Day!\nHi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Things to note in the above. The \n is mandatory. It's what separates your Subject line from the body of the email. Note: if you're running this in IDLE, when the email is sent successfully, you'll see '{}' characters appear as the return message. If part of a script, you can always add a print statement or other to show this instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, disconnect from the SMTP server when complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp_server.quit()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we're done! Here's the/my final code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;recipient@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Subject: Happy Australia Day!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Hi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email sent successfully&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Clearly this is as basic as it gets. Moving forward you'll want the ability to send more detailed emails with some essence of formatting.&lt;/p&gt;
&lt;p&gt;To do this you'll need to import the MIME (Multipurpose Internet Mail Extensions) modules into your script.&lt;/p&gt;
&lt;p&gt;I want to expand on this current email example and will do so my next post. It also allows us to make the code a little more Pythonic!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="email"></category><category term="automation"></category></entry><entry><title>Python Iteration</title><link href="https://pybit.es/python_iteration.html" rel="alternate"></link><published>2017-01-19T19:00:00+01:00</published><updated>2017-01-19T19:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-19:/python_iteration.html</id><summary type="html">&lt;p&gt;Iteration in Python is incredibly simple compared to C and other languages. It's easy... maybe a little TOO easy...&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I first started writing Python code I realised I was bringing across some bad habits and very non-Pythonic coding styles.&lt;/p&gt;
&lt;p&gt;For loops in particular took me by surprise.&lt;/p&gt;
&lt;h2&gt;For Loop in C&lt;/h2&gt;
&lt;p&gt;It's worth showing how I/we wrote for loops prior to reaching Pylightenment (ha!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;demo_list = [];

for(int i = 0; i &amp;lt; 10; i++){
    printf(demo_list[i]);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Forgive any syntax errors in the above, my C is a little rusty.
The concept however, is that we have a counter, &lt;em&gt;i&lt;/em&gt;, that will allow the loop to print out the contents of &lt;em&gt;demo_list&lt;/em&gt; (if it had contents) 10 times.&lt;/p&gt;
&lt;p&gt;I always found this tricky because you had to get your counter values right. There was always so much room to mess up by being off by one. Furthermore, you'd have to know how many items are in &lt;em&gt;demo_list&lt;/em&gt; in order to list out the entire list. Getting around this would then add further complication and possibly more lines of code.&lt;/p&gt;
&lt;h2&gt;For Loop in Python&lt;/h2&gt;
&lt;p&gt;On the other hand, Python doesn't use a counter whatsoever. It simply iterates over the entire object until finished. Here's the same code in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in demo_list:
    print(item)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's simple and actually logical when reading it. It's also human readable!&lt;/p&gt;
&lt;p&gt;This is precisely why I love it. I no longer need to worry about a counter. No matter how large &lt;em&gt;demo_list&lt;/em&gt; gets, I'll be able to iterate over it until the end.&lt;/p&gt;
&lt;h2&gt;Iterable Objects&lt;/h2&gt;
&lt;p&gt;I was pretty surprised to see just how many objects were iterable. I originally figured it was just lists, dicts and tuples that could be iterated over but that's not the case. You're able to iterate over all of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings! (str)&lt;/li&gt;
&lt;li&gt;bytes&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;dicts&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;io.TextIOWrapper&lt;/li&gt;
&lt;li&gt;models.query.QuerySet&lt;/li&gt;
&lt;li&gt;numpy.ndarray&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list was taken from an incredibly detailed and interesting &lt;a href="https://www.youtube.com/watch?v=o5gByn3RKFI"&gt;training video&lt;/a&gt; by Luciano Ramalho.&lt;/p&gt;
&lt;h2&gt;The Iteration Protocol&lt;/h2&gt;
&lt;p&gt;This is how a for loop works internally, it cathces the StopIteration for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; name = &amp;#39;Julian&amp;#39;
&amp;gt;&amp;gt;&amp;gt; name.__iter__
&amp;lt;method-wrapper &amp;#39;__iter__&amp;#39; of str object at 0x102a85848&amp;gt;
&amp;gt;&amp;gt;&amp;gt; it = name.__iter__()
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;J&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;u&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;l&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;i&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;a&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
&amp;#39;n&amp;#39;
&amp;gt;&amp;gt;&amp;gt; next(it)
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The __iter__ method is what makes an object iterable. You can use that in your own classes, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;
        &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Challenge {}: {}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Make the object iterable&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;self.users&lt;/span&gt;:
            &lt;span class="kt"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;:
&lt;span class="kt"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;victor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;henk&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ch01&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordvalue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Challenge&lt;/span&gt; &lt;span class="nx"&gt;01&lt;/span&gt;: &lt;span class="kt"&gt;wordvalue&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ch01&lt;/span&gt;:
    &lt;span class="kt"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;
&lt;span class="nx"&gt;bob&lt;/span&gt;
&lt;span class="nx"&gt;victor&lt;/span&gt;
&lt;span class="nx"&gt;julian&lt;/span&gt;
&lt;span class="nx"&gt;henk&lt;/span&gt;

&lt;span class="nx"&gt;users2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;maria&amp;#39;&lt;/span&gt; 
&lt;span class="nx"&gt;ch02&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Challenge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordvalue part II&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;users2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Challenge&lt;/span&gt; &lt;span class="nx"&gt;02&lt;/span&gt;: &lt;span class="kt"&gt;wordvalue&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt; &lt;span class="nx"&gt;II&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;usr&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;ch02&lt;/span&gt;:
    &lt;span class="kt"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;
&lt;span class="nx"&gt;bob&lt;/span&gt;
&lt;span class="nx"&gt;sam&lt;/span&gt;
&lt;span class="nx"&gt;julian&lt;/span&gt;
&lt;span class="nx"&gt;maria&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Iteration Fun - Parallel Assignment&lt;/h2&gt;
&lt;p&gt;The simplicity and flexibility of Python iteration makes it pretty satisfying and fun to use.&lt;/p&gt;
&lt;p&gt;One of my favourites is Parallel Assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awesomeness_levels = [(&amp;#39;Bob&amp;#39;, 8), (&amp;#39;Julian&amp;#39;, 11), (&amp;#39;PyBites&amp;#39;, 3)]

for name, level in awesomeness_levels:
    print(name + &amp;#39;: &amp;#39; + str(level))

Bob: 8
Julian: 11
PyBites: 3

# I turned it up to eleven!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love that in a minimal amount of code I'm able to iterate over the entire list but also assign a variable to each item.&lt;/p&gt;
&lt;h2&gt;Iteration Fun II - One iterable providing multiple arguments&lt;/h2&gt;
&lt;p&gt;Another cool example is function argument unpacking (min 15 of the video) which allows you to do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PyBites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} teams up with {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# unpacks pair tuple in the 2 {} format placeholders&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Julian&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt;
&lt;span class="n"&gt;Julian&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There's a &lt;strong&gt;lot&lt;/strong&gt; to cover when it comes to iteration and also a lot that you could be doing in a non-Pythonic way.&lt;/p&gt;
&lt;p&gt;I'd wholeheartedly recommend watching the &lt;a href="https://www.youtube.com/watch?v=o5gByn3RKFI"&gt;aforementioned video&lt;/a&gt; by Luciano Ramalho.&lt;/p&gt;
&lt;p&gt;For best practices when it comes to loops, check out the &lt;em&gt;The Little Book of Anti-Patterns&lt;/em&gt; section on &lt;a href="http://docs.quantifiedcode.com/python-code-patterns/readability/using_an_unpythonic_loop.html"&gt;unpythonic loops&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="iteration"></category><category term="resources"></category></entry><entry><title>List of Awesome Python Resources</title><link href="https://pybit.es/awesome_python_resources.html" rel="alternate"></link><published>2017-01-17T00:01:00+01:00</published><updated>2017-01-17T00:01:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-17:/awesome_python_resources.html</id><summary type="html">&lt;p&gt;A great list of Python Resources that should  keep you busy for a while!&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the best feelings is when you stumble across content that is so helpful and exciting you just want to dance.&lt;/p&gt;
&lt;p&gt;Our latest discovery: &lt;a href="https://github.com/vinta/awesome-python"&gt;An incredibly well populated list of Python resources&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Awesome Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Awesome Python&lt;/em&gt; is a detailed list of Python frameworks, libraries, software and other resources, ranging from Cryptography and Command-line Tools to Machine Learning (Bob!) and alternative Package Repos!&lt;/p&gt;
&lt;p&gt;If you haven't by now, I suggest you Star this github repo or Fork it yourself. The repo is the backend for the website: &lt;a href="http://awesome-python.com"&gt;http://awesome-python.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;My Picks&lt;/h2&gt;
&lt;p&gt;I've only just scratched the surface of the content here but I already have a few favourites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;&lt;strong&gt;thefuck&lt;/strong&gt;&lt;/a&gt;: Don't mind the name! This is a super handy CLI tool that will intelligently correct your previous cli command if you get it wrong. All you do is type the F bomb and it'll automatically correct your command. Check out the readme to see a demo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/a&gt;: I've been wanting to get into Python web frameworks for a while. Flask is going to be my... route (pun intended!) in. Adding this to my "to-learn" list!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/vinta/awesome-python#job-scheduler"&gt;&lt;strong&gt;Job Scheduler Options&lt;/strong&gt;&lt;/a&gt;: Cron was all I had regarding scheduling. Seeing this category on &lt;em&gt;awesome-python&lt;/em&gt; made me smile. I'm looking forward to checking each of these options out to see which one works best for me. Python everything!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Your Picks?&lt;/h2&gt;
&lt;p&gt;Just these three alone will keep me busy for a while. The GUI entries also intrigue me as I'd love to see how you can use Python to make a nice GUI.&lt;/p&gt;
&lt;p&gt;So much to learn! Check the list out and let us know what interests you the most. Feel free to share if you have any other cool tools that aren't listed on the site!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python.&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="resources"></category><category term="flask"></category><category term="cron"></category><category term="tools"></category></entry><entry><title>Create a Simple Web Scraper with BeautifulSoup4</title><link href="https://pybit.es/simplewebscraper.html" rel="alternate"></link><published>2017-01-11T13:00:00+01:00</published><updated>2017-01-11T13:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-11:/simplewebscraper.html</id><summary type="html">&lt;p&gt;Learn to create a simple web scraper in Python using BeautifulSoup4&lt;/p&gt;</summary><content type="html">&lt;p&gt;I absolutely loved the idea of web scraping when Bob explained what it was (it sounded so spy-like and hackery!). It did however sound like something that, coding-wise, was completely out of my grasp. Once I dove in and tried to create one though I realised it was actually quite simple!&lt;/p&gt;
&lt;h2&gt;Concept&lt;/h2&gt;
&lt;p&gt;Create a web scraper that probes a site for the latest headlines.&lt;/p&gt;
&lt;p&gt;For my example, I'm going to scrape &lt;a href="http://wowhead.com"&gt;wowhead.com&lt;/a&gt;, a World of Warcraft database site, for their latest news headlines.&lt;/p&gt;
&lt;p&gt;Head to the &lt;em&gt;Wowhead&lt;/em&gt; page and you'll see their home page is just a series of news/blog posts. What we want to do is pull the title of each blog post and output it to text.&lt;/p&gt;
&lt;p&gt;(You can follow along with this or, of course, you can use your own site).&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Decide on the site to scrape.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;Create a venv&lt;/a&gt; to run all of this up in. I created a directory called "wowhead" for this and created the venv in that:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# pwd
wowhead
# ls
venv    wowhead_scraper.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;pip install bs4 requests (Install the BeautifulSoup4 (bs4) and Requests modules)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Code&lt;/h2&gt;
&lt;p&gt;The final code for this simple scraper can be found in the &lt;a href="https://github.com/pybites/blog_code"&gt;PyBites Code Repo&lt;/a&gt;, subdirectory &lt;a href="https://github.com/pybites/blog_code/tree/master/BeautifulSoup"&gt;BeautifulSoup&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I've lumped everything under the main() function. This is a really simple program and I wanted to keep it as readable as possible, thus it's not all split into different functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After the initial code setup of importing modules and defining main, the first task is to grab a copy of the site's html file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;URL = &amp;quot;http://www.wowhead.com&amp;quot;
header_list = []

def main():
    raw_site_page = requests.get(URL)
    raw_site_page.raise_for_status()  #Confirm site was pulled. Error if not
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;get&lt;/em&gt; function of the requests module allows us to pull the HTML data from the site. We assign this data to the variable &lt;em&gt;raw_site_page&lt;/em&gt;. (This is known as the &lt;strong&gt;response&lt;/strong&gt; object).&lt;/p&gt;
&lt;p&gt;As the comment implies, the &lt;em&gt;.raise_for_status()&lt;/em&gt; function checks to see if the data was pulled successfully. If, for example, your URL is incorrect, this will error your program out and tell you about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next, Beautiful Soup fun:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;soup = bs4.BeautifulSoup(raw_site_page.text, &amp;#39;html.parser&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code takes the Response object and reads it as plain text. BS4 parses it with the html parser and creates a &lt;strong&gt;Soup Object&lt;/strong&gt; which we're assigning to the variable &lt;em&gt;soup&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now the tricky part:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to use the &lt;em&gt;.select()&lt;/em&gt; function within BS4 to find what we want in the site HTML code. This is where you'll need to view the page source of the site (&lt;a href="http://testingfreak.com/inspect-element-in-firefox-chrome-or-ie-browsers/"&gt;or use Inspect&lt;/a&gt;!) to find something unique about the data you want to pull.&lt;/p&gt;
&lt;p&gt;You can see that I've specified the CSS Element ".heading-size-1". On the &lt;em&gt;Wowhead&lt;/em&gt; page I found that each post heading contained this element and that it was unique to them as well.&lt;/p&gt;
&lt;p&gt;We then take this selected data and create &lt;em&gt;html_header_list&lt;/em&gt; with it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've added a for loop to print the contents of the list. This is where I got caught the first time. Run the program and you'll see something similar to this (showing first line only):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 wowhead_scraper.py 
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heading-size-1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/patch-7-1-5-survival-guide&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's happening here is that I'm not only just getting the header of the post but also the URL assigned to by the "a href" HTML tag. We don't need this data for this exercise.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could use regex to strop the URLs out but BS4 makes it easier. We can grab just the plain text used within the CSS element using .getText():&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        header_list.append(headers.getText())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using .getText() we can then pull the plain text and append it to the &lt;em&gt;header_list&lt;/em&gt; list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now if we iterate over &lt;em&gt;header_list&lt;/em&gt; we see just the data we want!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for headers in header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 wowhead_scraper.py 
Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!
Official Patch Notes for World of Warcraft 7.1.5
Kirin Tor Quest Fix, World Quest Reset in 7.1.5, Live Developer Q&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;A Thursday
The Story of Aviana - Lore Collaboration with Nobbel87
All The Demon Hunter Class and Legendary Changes in Patch 7.1.5
Wowhead Weekly #106 and Blizzard Gear Shop Diablo Sale
$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More examples (Bob)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/scrabble_distribution.py"&gt;Here&lt;/a&gt; is another example how to scrape &lt;a href="http://scrabblewizard.com/scrabble-tile-distribution/"&gt;scrabblewizard.com&lt;/a&gt; to parse the html table that has the Scrabble tile distribution and load it into a data structure (list of named tuples).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/12/code-kata/"&gt;Titans books kata&lt;/a&gt; also used BeautifulSoup to scrape the page, see code &lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/titans_books.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Areas for Expansion&lt;/h2&gt;
&lt;p&gt;Again, this is web scraping at its simplest. There are heaps of improvements and additions that can be made with these coming to mind right away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull the URL for each header and output that alongside the title.&lt;/li&gt;
&lt;li&gt;Automate the script to run (daily?) and store the output.&lt;/li&gt;
&lt;li&gt;Have the output emailed to you along with links to each post.&lt;/li&gt;
&lt;li&gt;Store the Request object in a local file so we don't have to keep making an HTML request every time we run the program.&lt;/li&gt;
&lt;li&gt;Store post headings in an external file to allow us to only send notifications when there's a &lt;em&gt;new&lt;/em&gt; post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a pretty satisfying project for me. Web scraping has endless possibilities - you just need to figure out what you want and from where!&lt;/p&gt;
&lt;p&gt;This example is as simple as they come but hopefully now you can see just how easy it really is.&lt;/p&gt;
&lt;p&gt;Oh and if anyone tries to say, "Isn't that what the RSS feed or Subscribe button is for?", ignore them. This is &lt;em&gt;way&lt;/em&gt; more satisfying!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="beautifulsoup"></category><category term="bs4"></category><category term="webscraping"></category><category term="namedtuples"></category></entry><entry><title>Copy and Paste with Pyperclip</title><link href="https://pybit.es/pyperclip.html" rel="alternate"></link><published>2017-01-06T12:00:00+01:00</published><updated>2017-01-06T12:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-06:/pyperclip.html</id><summary type="html">&lt;p&gt;Use the Pyperclip module to copy and paste with the clipboard!&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick and easy one for you today.&lt;/p&gt;
&lt;p&gt;While I was working through &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; (review &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;) I experienced a few "this is AMAZING!" moments. One of which was when I discovered the Pyperclip module.&lt;/p&gt;
&lt;h2&gt;What is Pyperclip?&lt;/h2&gt;
&lt;p&gt;Pyperclip is a module you can import that allows you to copy and paste to and from the clipboard on your computer. It does this through the use of two functions: copy() and paste()... go figure!&lt;/p&gt;
&lt;p&gt;It's simple but man did it blow my mind!&lt;/p&gt;
&lt;h2&gt;Why so Awesome?!&lt;/h2&gt;
&lt;p&gt;Well...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was still super new to Python so the idea that I could interact with the user to that level was insane to me. It was a new way of inputting data without actually asking for traditional "type this and hit enter" input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was exactly what I was looking for at the time! I wanted to automate the pasting of lists I had copied to the clipboard for a small tool I was writing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The exercise in &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; had you paste() text from the clipboard into the program (ie, read in), manipulate said text, then copy() it back to the clipboard. In a split second you could insert a '*' in front of every line in a list! This opened my mind to a whole new way of thinking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Okay enough talk. Let's get to it. Installation first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pip install pyperclip
#pip list
pip (9.0.1)
pyperclip (1.5.27)
setuptools (28.8.0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we import it into our code and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyperclip&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Be warned though. Pyperclip copies and pastes just like anything else. That is, it doesn't get exclusive rights to the clipboard. The text you copy to the clipboard has every chance of being overwritten by anything else that happens to copy after your command has run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above example we copied to the clipboard and then instantly pasted. In most situations you'll want to paste what the &lt;em&gt;user&lt;/em&gt; has on their clipboard then manipulate that.&lt;/p&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;The author of the tool (Al Sweigart) shows some more use cases in &lt;a href="https://automatetheboringstuff.com/chapter6/"&gt;chapter 6&lt;/a&gt; of &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff&lt;/a&gt;, for example how to add bullets to wiki markup:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bulletPointAdder.py script will get the text from the clipboard, add a star and space to the beginning of each line, and then paste this new text to the clipboard. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course the possibilities are endless. You could for example make a script that retrieves a link from the clipboard (I mean one you copied previously), retrieve the metadata for that link scraping it, and copying an enriched string (link + metadata) back to the clipboard. You could use this for example to (semi)auto-create posts to social media. You would use pyperclip for the get/put from/to clipboard.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pyperclip really opened my eyes to the power of Python. Direct interaction with the user is awesome. &lt;/p&gt;
&lt;p&gt;However, it is scary to think just how easy it is to write to and from the users clipboard without their knowledge. These functions (as per anything) can be called without any user knowledge whatsoever. In a fraction of a second we can paste the output of their clipboard to a file of our choosing! It's creepy to think of how easily this can be used maliciously!&lt;/p&gt;
&lt;p&gt;That's coding though I guess! &lt;a href="https://youtu.be/b23wrRfy7SM?t=12"&gt;With great power...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category></entry><entry><title>Code Challenge Pilot - calculate total time JS course</title><link href="https://pybit.es/js_time_scraper_ch.html" rel="alternate"></link><published>2017-01-04T20:01:00+01:00</published><updated>2017-01-04T20:01:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-04:/js_time_scraper_ch.html</id><summary type="html">&lt;p&gt;Coding Challenge to create a web scraper that calculates the total time of a Javascript Course.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;p&gt;This will not only improve my Python and his code review skills but should also (hopefully!) provide you with something interesting or at least entertaining, to read.&lt;/p&gt;
&lt;p&gt;Feel free to give any feedback or improvements of your own in the comments below!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Bob discovered a free, online &lt;a href="https://watchandcode.com/courses/enrolled/practical-javascript"&gt;Javascript Course&lt;/a&gt; that he felt would be useful to us. On creating an account you're faced with the below course content list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JS Course Content Listing" src="images/js_course_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;The problem is that while each module/video displays its own duration, there's no course total time listed anywhere.&lt;/p&gt;
&lt;p&gt;Enter the Challenge: Create a web scraper that parses the page and then calculates the total course time.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;My&lt;/em&gt; final code can be located &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;). Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Limitations and Complications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main content page is behind a login. How the heck was I supposed to automate a scraper to log into the site with my creds and then pull the page?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I manually right-clicked and selected 'Save As' (on Windows) to save the page as an html file but when I tried to parse the file with BeautifulSoup I consistently hit an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;I initially wanted to use BeautifulSoup for this but as I kept hitting the aforementioned error and was running out of time (sleep!) I decided to keep it simple, albeit a little manual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I highlighted the entire page and saved it as plain text into a file titled "content.html".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The program is to be created in the same directory as the content.html file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Moments and Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The program could have easily been a single, huge block of code but I decided it was best to split each 'job' into a different function. There are 2 functions in total:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Read in the HTML file and search it using my time regex
def search_file(file)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Strip out the brackets and the colon to calculate the mins and seconds
def time_calculation(durations)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Creating the time search regex. This was the real challenge for me! While I'd used regex before it was definitely a challenge to search for a time string. The complexity was in coding the regex to search for both single minutes and double digit minutes, eg: 7:43 and 10:43. (As the times are all within ()s on the page, it was easier to include the braces in the regex):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;) #Creating the regex
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Stripping away the unecessary bits so I could work with the raw numbers. I used the strip() and split() methods for this. Admittedly, I was stoked when I realised I could use them both in one line of code (it's the small wins). This was done within a for loop to iterate over the list created by the regex search:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#For loop to strip brackets/colon and assign the mins/seconds
for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;The program eventually worked! I was able to calculate that the course took roughly 6.8hrs to complete.&lt;/p&gt;
&lt;h2&gt;Thoughts and Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I was bummed I didn't actually get the traditional web scrape working at the time. I would like to figure out where I went wrong with that so I can use BeautifulSoup to properly scrape the content.html file. (I'd already found the css I needed to search damnit!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 30 lines of code in this program. I believe there are lines that can be refactored to do multiple assignments and calculations on a single line. Eg: The for loop that strips the brackets and colon also adds the mins and seconds - I'm sure it can be improved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion and Next Step&lt;/h2&gt;
&lt;p&gt;As annoyed as I got at certain points, I actually enjoyed this. Problem wise it's as simple as they come but it forced me to revisit the basics of regex and string manipulation.&lt;/p&gt;
&lt;p&gt;As I write this I'm getting github commit notifications of Bob refactoring and commenting so I know he's hard at work making my code as Pythonic as possible.
Tomorrow's post will be his feedback... go easy on me brother!&lt;/p&gt;
&lt;p&gt;(Again, find &lt;em&gt;my&lt;/em&gt; code for this challenge &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;. Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="code"></category></entry><entry><title>Python Naming Conventions</title><link href="https://pybit.es/naming_conventions.html" rel="alternate"></link><published>2017-01-01T11:14:00+01:00</published><updated>2017-01-01T11:14:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-01:/naming_conventions.html</id><summary type="html">&lt;p&gt;Naming conventions can be tricky in Py. It's good to make sure we're all on the same page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned in my &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff review&lt;/a&gt;, I was led astray with regards to naming my functions and variables. That is, the book was telling me to use camelCase rather than the approved underscore method.&lt;/p&gt;
&lt;p&gt;After writing that article I decided to do some digging and I totally feel this needs a dedicated post!&lt;/p&gt;
&lt;h2&gt;The Consensus&lt;/h2&gt;
&lt;p&gt;A lot of people are divided on this topic! Doing a quick Google search found people who believe it doesn't matter what you use and those that would fight for their chosen method.&lt;/p&gt;
&lt;p&gt;The one thing everyone agrees on however is that you need to remain consistent. If you decide to use camelCase in your code, then do so for the entirety of your project, &lt;strong&gt;don't mix&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Quick Example&lt;/h2&gt;
&lt;p&gt;After Bob informed me that camelCase &lt;em&gt;wasn't&lt;/em&gt; the way to go, I went through and renamed all of my functions and variables using the underscore method. Here's a quick snippet in case you don't know what this all looks like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happyNewYearEveryone():
    partyTime()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Underscore Method&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happy_new_year_everyone():
    party_time()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sticking with PEP8&lt;/h2&gt;
&lt;p&gt;I did wonder where this guidance was coming from though. How did Bob know this was exactly how it should be?&lt;/p&gt;
&lt;p&gt;That was when I discovered the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8 Style Guide&lt;/a&gt; on python.org. If you have any doubts as to how your code should be laid out, reference this baby and you'll be on your way. &lt;/p&gt;
&lt;p&gt;What does it say about naming conventions? Quite a bit actually! For the pupose of this post there, here's what it says about Function names (also applicable to Methods and Instance Variables):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function names should be lowercase, with words separated by underscores as necessary to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you check out the page for yourself you'll see further explanations on other naming convention options within Py.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Given the existence of the PEP8 standards, I don't think we really have a choice nor do I think there's any debate about how we should be naming variables and the like.&lt;/p&gt;
&lt;p&gt;Going forward I'll definitely be using these rules when working on my code. If I don't, feel free to correct me!&lt;/p&gt;
&lt;p&gt;Imagine a world where we all code to the same rules. Mmmm.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>Don't Let Indentation Catch You Out</title><link href="https://pybit.es/indentation_tips.html" rel="alternate"></link><published>2016-12-30T19:51:00+01:00</published><updated>2016-12-30T19:51:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-30:/indentation_tips.html</id><summary type="html">&lt;p&gt;Python indentation can be a cruel mistress. Let's get it right!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every programmer knows the frustration of writing code and hitting run only to have the compiler locate an error that you swear wasn't an error. (That is, I'm hoping it's not just me right?!)&lt;/p&gt;
&lt;p&gt;One of the first things to learn with Python is the absolute &lt;strong&gt;importance of indentation&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What is Indentation?&lt;/h2&gt;
&lt;p&gt;Okay I'll keep this quick. It's just important that I cover this for anyone new to programming.&lt;/p&gt;
&lt;p&gt;Indentation is the white space at the front of your code. In all languages you'll see some sort of indentation such as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the space in front of the second line.&lt;/p&gt;
&lt;h2&gt;Python's Love Affair With Indentation&lt;/h2&gt;
&lt;p&gt;It took me a day or two to fully grasp how dependent Python was on indentation. It's actually part of the beauty of the language. In most other languages you'll be wrapping your code within curly braces {} which can grow tiresome.&lt;/p&gt;
&lt;p&gt;Python, however, relies on indents. In the above code, the indent in front of line 2 tells the compiler that this code "belongs" to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Check out the difference between Javascript and Python for the same code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;how_to_be_cool() {&lt;/span&gt;
    &lt;span class="nx"&gt;wear_aviator_sunglasses&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much simpler in Python! Anything that's indented by the same amount under the function will be considered part of the function. The general rule of thumb is to use 4 spaces.&lt;/p&gt;
&lt;h2&gt;Hanging Indents for Nested Code&lt;/h2&gt;
&lt;p&gt;Indents for your nested statements is a little more flexible but there are definitely guidelines. Let's add a simple infinite while Loop to the above code and check out the indentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The while loop is now in the first indent of 4 spaces and the sunglasses function call is indented by a further 4 spaces to indicate that it's now in the loop.&lt;/p&gt;
&lt;p&gt;If I want to add code to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function after the while loop, I simply write code one indentation margin (4 spaces) "up". Check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
    time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;How Indents Can Bite You in the Butt&lt;/h2&gt;
&lt;p&gt;This brings me to one of my biggest learning points with Python. &lt;strong&gt;Always Watch Your Indents!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can't stress that enough. If you're not careful, you are bound to make mistakes and waste time debugging your code. Python expects proper marginalised indents. Unless you're continuing code from the previous line onto subsequent lines, your code needs to line up. If not, Python will most likely spit the dummy.&lt;/p&gt;
&lt;p&gt;Of course, you won't always do it intentionally. While editing and fine tuning my own code I was doing so without removing previous indents and spaces. As a result I was left with unexpected spaces that caused my code to error out.&lt;/p&gt;
&lt;p&gt;Here's an example of the above code with indentation that's just &lt;em&gt;slightly&lt;/em&gt; out of whack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool:
    while True:
        wear_aviator_sunglasses()
     time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be quite noticeable here but when you've got 200 lines of code it'll be harder to catch. Of course, the compiler should tell you where the error is but it may not jump out at you at first. It sure didn't for me!&lt;/p&gt;
&lt;h2&gt;Tabs V Spaces&lt;/h2&gt;
&lt;p&gt;I initially wrote this post assuming that tabs were mandatory in Python (as that's how I keep my code clean in other languages). &lt;a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"&gt;The official Python Style Guide&lt;/a&gt; actually says otherwise! &lt;/p&gt;
&lt;p&gt;Python.org recommends that we use only spaces and never tabs (unless it's to keep consistent with code already with tabs). Always something new to learn!&lt;/p&gt;
&lt;h2&gt;Further Reading on Indentation&lt;/h2&gt;
&lt;p&gt;There's an extensive list of different indentation scenarios on the &lt;a href="https://www.python.org/dev/peps/pep-0008/#indentation"&gt;Python Style Guide&lt;/a&gt;. I found it to be quite enlightening! I recommend checking it out posthaste!&lt;/p&gt;
&lt;h2&gt;Vim Settings to Make Your Life Easier&lt;/h2&gt;
&lt;p&gt;For the Vim lovers out there, adding the following to your &lt;em&gt;.vimrc&lt;/em&gt; file will take care of a lot of your indentation woes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These settings will make the following 3 adjustments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your tab to be only 4 spaces long instead of the usual 8.&lt;/li&gt;
&lt;li&gt;Limit the length of your lines to be 79 characters as per &lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;Python specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Save your files in a unix format (helpful for github sharing/interactions etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to RealPython.com for this info. They've actually got a heap of other handy settings for Vim + Python in their &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;original article&lt;/a&gt;. Definitely worth checking out!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For such a simple concept, indentation can be super complex which is why even the mighty Bob was caught out leaving only 2 spaces in his blocks of code (Sorry Bob!). I no longer feel bad for getting this wrong!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;edit Bob: I shamefully admit I used 2 spaces before, now that I comply with PEP8 using 4 spaces I am so much happier, and people reading my code probably too :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indentation is what makes Python beautiful but is also something that can ruin your afternoon so do yourself a favour, get those vim settings in place to automate it and keep it in the back of your mind that a stray space somewhere could be foiling your Python master plans!&lt;/p&gt;
&lt;p&gt;Remember, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>A Quick Automate the Boring Stuff Review</title><link href="https://pybit.es/automate_the_boring_stuff_review.html" rel="alternate"></link><published>2016-12-26T23:00:00+01:00</published><updated>2016-12-26T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-26:/automate_the_boring_stuff_review.html</id><summary type="html">&lt;p&gt;A quick review of the legendary free book, Automate the Boring Stuff.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When he convinced me to learn Python, Bob (co-creator of &lt;a href="http://www.pybit.es"&gt;pybit.es&lt;/a&gt;) recommended I start by reading the book &lt;a href="https://www.automatetheboringstuff.com"&gt;&lt;em&gt;Automate the Boring Stuff&lt;/em&gt;&lt;/a&gt; by Al Sweigart, which is free to read online.&lt;/p&gt;
&lt;p&gt;I loved it!&lt;/p&gt;
&lt;h2&gt;What Makes it Different?&lt;/h2&gt;
&lt;p&gt;Automate the Boring Stuff (ATBS) is unlike most other "learn to program books". As expected it starts by showing you the basics (Expressions, Data Types, etc) but very quickly moves into more exciting concepts such as Lists, Dicts and Regular Expressions.&lt;/p&gt;
&lt;p&gt;It's also worth noting that while these sections are purely around learning the concept of the chapter, Al does throw in a heap of exercises and challenges to keep things interesting. Not once did I find myself falling asleep while reading which for me is saying something!&lt;/p&gt;
&lt;p&gt;The book really comes into its own in Chapter 8. This is where Al stops with the raw learning and starts with the projects. Each chapter onward has at least one nifty little project to make.&lt;/p&gt;
&lt;p&gt;I don't mean a run of the mill Celsius to Fahrenheit converter but Web Scrapers and scripts to automatically resize images.
Actual &lt;em&gt;useful stuff&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Thus the name, Automate the Boring Stuff!&lt;/p&gt;
&lt;h2&gt;Easy to Follow&lt;/h2&gt;
&lt;p&gt;The most important quality of an educational book is its ability to teach. ATBS would be like your favourite teacher in school - it teaches you in such a way that hours, days, weeks later, you'll recall the exact sentence or problem mentioned in the book.&lt;/p&gt;
&lt;p&gt;I keep it handy as a reference tool at all times. It's that good!&lt;/p&gt;
&lt;p&gt;Al's language is easy to relate to as well. This isn't someone talking down to you, teaching you a hardcore curriculum. This is a bloke who clearly loves his code, enjoys python and legitimately wants to teach you.&lt;/p&gt;
&lt;p&gt;It's also super handy that he uses food as his variable names! Mmmm bacon...&lt;/p&gt;
&lt;h2&gt;Favourite Part&lt;/h2&gt;
&lt;p&gt;My favourite chapter in the book was the chapter on Web Scraping. I've wanted to create my own web scraper ever since I saw Bob create one of his own. (I was blown away!).&lt;/p&gt;
&lt;p&gt;I always figured it was something that was going to be super complex and way out of my league but not so! This chapter allowed me to create my own scraper to parse a site and find out when the latest episodes of my tv shows were being aired!&lt;/p&gt;
&lt;p&gt;It's such a useful tool with unlimited possibilites when you think about it!&lt;/p&gt;
&lt;h2&gt;Not-So Favourite Part&lt;/h2&gt;
&lt;p&gt;There's one thing that's irked me about ATBS. Al's naming convention differs greatly to what I've seen in current python circles.&lt;/p&gt;
&lt;p&gt;These days, best practice in python would be to create your multi-word named variables all in lower case with an underscore separating the words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this_is_a_variable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Al, however, teaches that you should be using Camel Case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# thisIsAVariable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may not seem like a big deal but it totally ruined my day when I finally had the guts to show people some of my early code and there was a concesus that camelCase wasn't really used in python!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GO. READ. THIS. BOOK. NOW!&lt;/p&gt;
&lt;p&gt;As mentioned before, it's available for free on &lt;a href="https://www.automatetheboringstuff.com"&gt;Al's website&lt;/a&gt; but can be purchased so you can show your support.&lt;/p&gt;
&lt;p&gt;I totally recommend this to anyone learning Python as well as the old hats. The projects alone are awesome and will inspire you to create other handy tools to make your life easier - and isn't that what coding's all about?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="review"></category><category term="books"></category><category term="learning"></category><category term="beginners"></category><category term="automation"></category></entry><entry><title>The Beauty of Python Virtualenvs</title><link href="https://pybit.es/the-beauty-of-virtualenv.html" rel="alternate"></link><published>2016-12-22T22:11:00+01:00</published><updated>2016-12-22T22:11:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-22:/the-beauty-of-virtualenv.html</id><summary type="html">&lt;p&gt;Python Virtualenvs are incredible yet sadly under utilised!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever heard of a Python virtualenv? No? Neither had I, until I discovered them while following a video course on Python Flask.&lt;/p&gt;
&lt;p&gt;A virtualenv (AKA venv) is essentially a Virtual Machine (VM) or sandbox environment that runs an independent and untouched Python environment.
When you create and activate the venv you no longer have access to the main Python environment running on your system.&lt;/p&gt;
&lt;p&gt;The problem programmers have is that it can be hard to isolate problems in code when their primary environment is cluttered with imported modules and the like.
Best practice would be to create a venv within your project and use it to run your project.&lt;/p&gt;
&lt;h2&gt;Step by Step&lt;/h2&gt;
&lt;p&gt;Let's create a venv called "awesome-test". You'd preferably run the following commands in your project root dir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# python3 -m venv awesome-test
# ls
awesome-test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;In Python 3, virtualenvs come installed by default. In Python 2.7 you install them with pip install virtualenv.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step is to activate the venv.
Activating the venv puts you into a standalone Python instance that has pretty much nothing installed by default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cd awesome-test
# ls
bin     include     lib     pyvenv.cfg
#
# source bin/activate
(awesome-test) #
(awesome-test) # echo YAY!
YAY!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;(awesome-test)&lt;/em&gt; tag preceding your shell prompt indicates you're now in the venv.
Now list out the modules installed in this python instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# pip list
pip (9.0.1)
setuptools (28.8.0)
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you've been using Python already, you'll know that your main env would have a boat load of modules installed. It's nice to be able to run from a clean slate when desiging new code!&lt;/p&gt;
&lt;p&gt;You can now play around and install whatever the heck you want without having to worry about corrupting or screwing up your primary environment. All modules installed in this venv will remain local to the venv.&lt;/p&gt;
&lt;p&gt;When you're done using the venv you then exit (deactivate) it using the deactivate command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(awesome-test) # deactivate
# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: All of changes you made in the venv will NOT be lost. It's all stored safely within the venv.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The seasoned veteran out there will surely read this and call me a noob... and they'd be right! It's exactly why I'm so stoked to have discovered venvs!&lt;/p&gt;
&lt;p&gt;If you're not using virtualenvs yet, install the package and give it a whirl.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="pip"></category><category term="virtualenv"></category><category term="venv"></category></entry></feed>