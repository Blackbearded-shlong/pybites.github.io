<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyBites</title><link>http://pybit.es/</link><description>Python code challenges, tutorials and news, one bite a day</description><atom:link href="http://pybit.es/feeds/learning.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 14 Feb 2017 00:48:00 +0100</lastBuildDate><item><title>Shelve It!</title><link>http://pybit.es/shelve-it.html</link><description>&lt;p&gt;When Bob first spoke about Python Shelves a while ago, I thought he'd gone bonkers. This was mainly because he was talking about his "Python shelve" storing book data in a script he was writing. &lt;/p&gt;
&lt;p&gt;"How the heck did you get a bookshelf in Python?!", I wondered. Little did I know he was talking about an awesome, persistent storage option.&lt;/p&gt;
&lt;p&gt;My first foray into Python shelves was actually rather painless (for me). I was impressed by how simple they were. They were almost as simple as opening and working text files.&lt;/p&gt;
&lt;h2&gt;Creating a Shelf File&lt;/h2&gt;
&lt;p&gt;A quick overview for the uninitiated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Break it down!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We import the shelve module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;shelve.open('data')&lt;/em&gt; opens (or creates in this case as it doesn't exist yet) a database .db file called &lt;em&gt;data&lt;/em&gt;. This is assigned to the &lt;em&gt;db&lt;/em&gt; variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a variable called &lt;em&gt;name&lt;/em&gt; and it assign it the name Julian (so vain!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interesting part. We now assign the &lt;em&gt;name&lt;/em&gt; variable (containing 'Julian') to the key &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We close off our access to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the &lt;em&gt;name&lt;/em&gt; variable has been stored in a shelf called &lt;em&gt;data.db&lt;/em&gt;. This .db file, by default, is located in the same directory that your script is run from.&lt;/p&gt;
&lt;h2&gt;UnShelve It!&lt;/h2&gt;
&lt;p&gt;It's not actually called unshelving. Just roll with it.&lt;/p&gt;
&lt;p&gt;To read the data back in, we do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The read in of the data here is the 3rd line of code. In this line we take the object stored in &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf and assign it to &lt;em&gt;name&lt;/em&gt;. The string in &lt;em&gt;name&lt;/em&gt; (Julian) is then printed.&lt;/p&gt;
&lt;h2&gt;Noteworthy&lt;/h2&gt;
&lt;p&gt;The above is super basic of course. Shelves become really useful when we start storing lists and dicts in them.&lt;/p&gt;
&lt;p&gt;There is a catch though. Any data you read in from the shelf is not automatically updated in the shelf if changed by your script. Using the above script, after reading in &lt;em&gt;db_names&lt;/em&gt;, if we were to change the name variable to contain 'Bob' instead of 'Julian', that update would not be pushed back to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;p&gt;To enable automatic writing to the shelf you can open the shelf with "writeback" enabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;db = shelve.open(&amp;#39;data&amp;#39;, writeback=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this can be super handy, it can be a bit of a memory hog if you're not careful. Any changes being made during execution are stored in cache until the shelf file is closed with &lt;em&gt;.close()&lt;/em&gt;. This is when they're written to the shelf file.&lt;/p&gt;
&lt;h2&gt;The Wall I Hit with Shelves&lt;/h2&gt;
&lt;p&gt;My biggest hurdle with regards to shelves was how to manage a script that was importing the shelf data when it was only being run for the first time. That is, before the db file had even been populated with data.&lt;/p&gt;
&lt;p&gt;If I try to run the above code to read in data before &lt;em&gt;db_names&lt;/em&gt; even exists, I'll get an error.&lt;/p&gt;
&lt;p&gt;I wasn't actually too sure how to approach this. Should I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have some sort of configuration/setup script that runs separately before running the main program?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a bunch of if statements?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a cli based menu system that allows the user to choose when to add items?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with all things Python, I found I was &lt;em&gt;try&lt;/em&gt;-ing (pun intended!) too hard. It was as simple as using &lt;em&gt;try&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;name = []

while True:
    try:
        with shelve.open(&amp;#39;data&amp;#39;) as db:
            name = db[&amp;#39;db_names&amp;#39;]
            break
    except:
        print(&amp;quot;Please enter a  name to begin: &amp;quot;)
        name.append(input())
        break 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works too!&lt;/p&gt;
&lt;p&gt;This situation got me thinking though. There's more than one way to skin a... &lt;em&gt;ahem&lt;/em&gt;... potato?&lt;/p&gt;
&lt;p&gt;How would you Pythonistas handle this? What sort of approach do you take when it comes to dealing with shelves?&lt;/p&gt;
&lt;p&gt;For now I'll stick with &lt;em&gt;try&lt;/em&gt; but I'm keen to know what you think.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Tue, 14 Feb 2017 00:48:00 +0100</pubDate><guid>tag:pybit.es,2017-02-14:shelve-it.html</guid><category>shelve</category><category>python</category><category>tips</category><category>tricks</category><category>code</category><category>pybites</category><category>database</category></item><item><title>Python Naming Conventions</title><link>http://pybit.es/naming_conventions.html</link><description>&lt;p&gt;As I mentioned in my &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff review&lt;/a&gt;, I was led astray with regards to naming my functions and variables. That is, the book was telling me to use camelCase rather than the approved underscore method.&lt;/p&gt;
&lt;p&gt;After writing that article I decided to do some digging and I totally feel this needs a dedicated post!&lt;/p&gt;
&lt;h2&gt;The Consensus&lt;/h2&gt;
&lt;p&gt;A lot of people are divided on this topic! Doing a quick Google search found people who believe it doesn't matter what you use and those that would fight for their chosen method.&lt;/p&gt;
&lt;p&gt;The one thing everyone agrees on however is that you need to remain consistent. If you decide to use camelCase in your code, then do so for the entirety of your project, &lt;strong&gt;don't mix&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Quick Example&lt;/h2&gt;
&lt;p&gt;After Bob informed me that camelCase &lt;em&gt;wasn't&lt;/em&gt; the way to go, I went through and renamed all of my functions and variables using the underscore method. Here's a quick snippet in case you don't know what this all looks like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;happyNewYearEveryone():
    partyTime()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Underscore Method&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;happy_new_year_everyone():
    party_time()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sticking with PEP8&lt;/h2&gt;
&lt;p&gt;I did wonder where this guidance was coming from though. How did Bob know this was exactly how it should be?&lt;/p&gt;
&lt;p&gt;That was when I discovered the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8 Style Guide&lt;/a&gt; on python.org. If you have any doubts as to how your code should be laid out, reference this baby and you'll be on your way. &lt;/p&gt;
&lt;p&gt;What does it say about naming conventions? Quite a bit actually! For the pupose of this post there, here's what it says about Function names (also applicable to Methods and Instance Variables):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function names should be lowercase, with words separated by underscores as necessary to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you check out the page for yourself you'll see further explanations on other naming convention options within Py.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Given the existence of the PEP8 standards, I don't think we really have a choice nor do I think there's any debate about how we should be naming variables and the like.&lt;/p&gt;
&lt;p&gt;Going forward I'll definitely be using these rules when working on my code. If I don't, feel free to correct me!&lt;/p&gt;
&lt;p&gt;Imagine a world where we all code to the same rules. Mmmm.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Sun, 01 Jan 2017 11:14:00 +0100</pubDate><guid>tag:pybit.es,2017-01-01:naming_conventions.html</guid><category>learning</category><category>python</category><category>beginners</category><category>tips</category><category>cleancode</category><category>bestpractices</category></item><item><title>Don't Let Indentation Catch You Out</title><link>http://pybit.es/indentation_tips.html</link><description>&lt;p&gt;Every programmer knows the frustration of writing code and hitting run only to have the compiler locate an error that you swear wasn't an error. (That is, I'm hoping it's not just me right?!)&lt;/p&gt;
&lt;p&gt;One of the first things to learn with Python is the absolute &lt;strong&gt;importance of indentation&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What is Indentation?&lt;/h2&gt;
&lt;p&gt;Okay I'll keep this quick. It's just important that I cover this for anyone new to programming.&lt;/p&gt;
&lt;p&gt;Indentation is the white space at the front of your code. In all languages you'll see some sort of indentation such as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the space in front of the second line.&lt;/p&gt;
&lt;h2&gt;Python's Love Affair With Indentation&lt;/h2&gt;
&lt;p&gt;It took me a day or two to fully grasp how dependent Python was on indentation. It's actually part of the beauty of the language. In most other languages you'll be wrapping your code within curly braces {} which can grow tiresome.&lt;/p&gt;
&lt;p&gt;Python, however, relies on indents. In the above code, the indent in front of line 2 tells the compiler that this code "belongs" to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Check out the difference between Javascript and Python for the same code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;how_to_be_cool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;wear_aviator_sunglasses&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much simpler in Python! Anything that's indented by the same amount under the function will be considered part of the function. The general rule of thumb is to use 4 spaces.&lt;/p&gt;
&lt;h2&gt;Hanging Indents for Nested Code&lt;/h2&gt;
&lt;p&gt;Indents for your nested statements is a little more flexible but there are definitely guidelines. Let's add a simple infinite while Loop to the above code and check out the indentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The while loop is now in the first indent of 4 spaces and the sunglasses function call is indented by a further 4 spaces to indicate that it's now in the loop.&lt;/p&gt;
&lt;p&gt;If I want to add code to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function after the while loop, I simply write code one indentation margin (4 spaces) "up". Check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
    time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;How Indents Can Bite You in the Butt&lt;/h2&gt;
&lt;p&gt;This brings me to one of my biggest learning points with Python. &lt;strong&gt;Always Watch Your Indents!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can't stress that enough. If you're not careful, you are bound to make mistakes and waste time debugging your code. Python expects proper marginalised indents. Unless you're continuing code from the previous line onto subsequent lines, your code needs to line up. If not, Python will most likely spit the dummy.&lt;/p&gt;
&lt;p&gt;Of course, you won't always do it intentionally. While editing and fine tuning my own code I was doing so without removing previous indents and spaces. As a result I was left with unexpected spaces that caused my code to error out.&lt;/p&gt;
&lt;p&gt;Here's an example of the above code with indentation that's just &lt;em&gt;slightly&lt;/em&gt; out of whack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def how_to_be_cool:
    while True:
        wear_aviator_sunglasses()
     time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be quite noticeable here but when you've got 200 lines of code it'll be harder to catch. Of course, the compiler should tell you where the error is but it may not jump out at you at first. It sure didn't for me!&lt;/p&gt;
&lt;h2&gt;Tabs V Spaces&lt;/h2&gt;
&lt;p&gt;I initially wrote this post assuming that tabs were mandatory in Python (as that's how I keep my code clean in other languages). &lt;a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"&gt;The official Python Style Guide&lt;/a&gt; actually says otherwise! &lt;/p&gt;
&lt;p&gt;Python.org recommends that we use only spaces and never tabs (unless it's to keep consistent with code already with tabs). Always something new to learn!&lt;/p&gt;
&lt;h2&gt;Further Reading on Indentation&lt;/h2&gt;
&lt;p&gt;There's an extensive list of different indentation scenarios on the &lt;a href="https://www.python.org/dev/peps/pep-0008/#indentation"&gt;Python Style Guide&lt;/a&gt;. I found it to be quite enlightening! I recommend checking it out posthaste!&lt;/p&gt;
&lt;h2&gt;Vim Settings to Make Your Life Easier&lt;/h2&gt;
&lt;p&gt;For the Vim lovers out there, adding the following to your &lt;em&gt;.vimrc&lt;/em&gt; file will take care of a lot of your indentation woes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These settings will make the following 3 adjustments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your tab to be only 4 spaces long instead of the usual 8.&lt;/li&gt;
&lt;li&gt;Limit the length of your lines to be 79 characters as per &lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;Python specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Save your files in a unix format (helpful for github sharing/interactions etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to RealPython.com for this info. They've actually got a heap of other handy settings for Vim + Python in their &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;original article&lt;/a&gt;. Definitely worth checking out!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For such a simple concept, indentation can be super complex which is why even the mighty Bob was caught out leaving only 2 spaces in his blocks of code (Sorry Bob!). I no longer feel bad for getting this wrong!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;edit Bob: I shamefully admit I used 2 spaces before, now that I comply with PEP8 using 4 spaces I am so much happier, and people reading my code probably too :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indentation is what makes Python beautiful but is also something that can ruin your afternoon so do yourself a favour, get those vim settings in place to automate it and keep it in the back of your mind that a stray space somewhere could be foiling your Python master plans!&lt;/p&gt;
&lt;p&gt;Remember, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Fri, 30 Dec 2016 19:51:00 +0100</pubDate><guid>tag:pybit.es,2016-12-30:indentation_tips.html</guid><category>python</category><category>learning</category><category>beginners</category><category>tips</category><category>cleancode</category><category>bestpractices</category></item><item><title>Learning from Python mistakes</title><link>http://pybit.es/py-mistakes.html</link><description>&lt;p&gt;There are some great &lt;a href="http://www.oreilly.com/programming/free/"&gt;free Python O'Reilly ebooks&lt;/a&gt;. In this post some useful tips from Mike Pirnat's &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;How to make mistakes in Python&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtualenv / pyvenv&lt;/a&gt; to isolate your environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still doing this: using the default REPL which leads to a lot of arrow-up repeating, use IPython or Jupyter Notebooks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always return a value from your functions / methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use PyLint (I am also relatively late in this, future post, promise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read, use, abide by &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;, the Python style guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(not Python per se) name your variables wisely. There is a whole chapter in &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;clean code&lt;/a&gt; dedicated to this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't abuse lambdas, I almost only use them for &lt;a href="https://docs.python.org/3/howto/sorting.html"&gt;sorting&lt;/a&gt;. Ditto for list comprehension, too much nesting makes it hard to read them. Same goes for decorators, too much nesting makes for complex code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid long if/elif/ blocks, wrap options into classes or dicts, use Enums, look at the &lt;a href="http://refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;Replace Conditional with Polymorphism pattern&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave extensive getters and setters for Java, use properties (future post).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write small methods and (decoupled) modules, I wrote about this generically &lt;a href="http://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid the global scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be specific in your imports, from time import * is asking for trouble. Use time.time() instead and you won't have name clashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Explicit is better than implicit" (import this): don't use pass in except, handle the error (log it). And be specific what exception to catch (e.g. 'except IOError' is better than just 'except' which catches everything).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't re-invent the wheel: &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; is full of great modules you can pip install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use mutable default values for methods, it leads to weird behavior because each time you call the method you expect a new object (say list), yet you modify an existing one, use None instead. This and other common gotchas are described &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overeager Code: keep your constuctors (dunder inits) methods lean, watch out for modules doing a lot of operations when being imported. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Test your code!&lt;/a&gt; There are great frameworks apart from unittest, checkout &lt;a href="http://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging is cheap, &lt;a href="https://docs.python.org/3.5/library/logging.html"&gt;use it!&lt;/a&gt; Config is tricky (future post ...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's thank Mike Pirnat for sharing all these great insights in this &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;freely distributed ebook&lt;/a&gt; of just 80 pages.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Wed, 28 Dec 2016 09:00:00 +0100</pubDate><guid>tag:pybit.es,2016-12-28:py-mistakes.html</guid><category>bestpractices</category><category>pep8</category><category>virtualenv</category><category>cleancode</category><category>logging</category><category>pytest</category><category>ebook</category><category>refactoring</category><category>gotchas</category></item></channel></rss>