<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Tips</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/tips.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-04-11T09:00:00+02:00</updated><entry><title>How to Write a Decorator with an Optional Argument?</title><link href="https://pybit.es/decorator-optional-argument.html" rel="alternate"></link><published>2017-04-11T09:00:00+02:00</published><updated>2017-04-11T09:00:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-04-11:/decorator-optional-argument.html</id><summary type="html">&lt;p&gt;When playing with decorators (&lt;a href="http://pybit.es/codechallenge14.html"&gt;this week's challenge&lt;/a&gt;) I got stuck: how do you write a decorator that takes an optional argument? &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; edition to the rescue. In this post how I failed my way to the right solution.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When playing with decorators (&lt;a href="http://pybit.es/codechallenge14.html"&gt;this week's challenge&lt;/a&gt;) I got stuck: how do you write a decorator that takes an optional argument? &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; edition to the rescue. In this post how I failed my way to the right solution.&lt;/p&gt;
&lt;p&gt;The code for this article is &lt;a href="https://github.com/pybites/blog_code/tree/master/decorator_opt_arg"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;First attempt&lt;/h2&gt;
&lt;p&gt;To add an argument to a decorator I ended up having three levels of functions (see &lt;a href="http://stackoverflow.com/questions/5929107/python-decorators-with-parameters"&gt;here&lt;/a&gt; and &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;real_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;real_decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works fine if we have an argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep(1)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators.py
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But when I call it without an argument (which I thought would work because I set it as optional argument) it fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()

$ python decorators.py
Traceback (most recent call last):
File &amp;quot;decorators.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;
    hello()
TypeError: real_decorator() missing 1 required positional argument: &amp;#39;func&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Can we use a class?&lt;/h2&gt;
&lt;p&gt;My intuition was that the above syntax was pretty complex so I went with the class decorator syntax (a nice exercise too):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again this works fine when I give it an argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep(1)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators_cl.py
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But leaving the arg off it fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    @sleep
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    for _ in range(3):
        hello()


$ python decorators_cl.py
Traceback (most recent call last):
File &amp;quot;decorators_cl.py&amp;quot;, line 25, in &amp;lt;module&amp;gt;
    hello()
TypeError: __call__() missing 1 required positional argument: &amp;#39;func&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Allow for optional arguments&lt;/h2&gt;
&lt;p&gt;Luckily I had &lt;a href="http://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python cookbook 3rd ed&lt;/a&gt; nearby. What I love about this book, apart from its technical depth, is that it offers short and concise recipes that you can start using right away. This really covered a need I had when I was writing my decorators: the ability to have them behave in certain ways.&lt;/p&gt;
&lt;p&gt;Here is the cookbook's solution modified for my sleep decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sleeping for {} seconds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code looks like magic and I am still wrapping my head around it. &lt;/p&gt;
&lt;p&gt;The key part though is the use of partial():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The partial() is used for partial function application which “freezes” some portion of a function’s arguments and/or keywords resulting in a new object with a simplified signature - &lt;a href="https://docs.python.org/3.6/library/functools.html#functools.partial"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should probably write another article on this useful feature ...&lt;/p&gt;
&lt;h2&gt;It works :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:

    def call_n_times(func, n=3):
        for _ in range(n):
            func()

    @sleep  # works now!
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWithout args\n---&amp;#39;)
    call_n_times(hello)


    @sleep(seconds=2)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWith one opt arg: seconds\n---&amp;#39;)
    call_n_times(hello)


    @sleep(seconds=1, msg=&amp;#39;I work so hard, resting a bit&amp;#39;)
    def hello():
        print(&amp;#39;hello world&amp;#39;)

    print(&amp;#39;\nWith two opt args: seconds and msg\n---&amp;#39;)
    call_n_times(hello)


$ python decorators_opt_arg.py

Without args
---
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world
Sleeping for 1 seconds
hello world

With one opt arg: seconds
---
Sleeping for 2 seconds
hello world
Sleeping for 2 seconds
hello world
Sleeping for 2 seconds
hello world

With two opt args: seconds and msg
---
I work so hard, resting a bit
hello world
I work so hard, resting a bit
hello world
I work so hard, resting a bit
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;As mentioned our &lt;a href="http://pybit.es/codechallenge14.html"&gt;code challenge of this week&lt;/a&gt; is all about decorators. Maybe you can use what you learned in this article to write more versatile decorators.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="decorators"></category><category term="arguments"></category><category term="tricks"></category><category term="tips"></category><category term="cookbook"></category></entry><entry><title>10 Tips to Get More out of Your Regexes</title><link href="https://pybit.es/mastering-regex.html" rel="alternate"></link><published>2017-03-15T07:45:00+01:00</published><updated>2017-03-15T07:45:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-03-15:/mastering-regex.html</id><summary type="html">&lt;p&gt;Regular expressions can be arcane, yet when used with care they can also be very powerful. In this post a couple of tips to get more out of your regexes when using Python's re module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Regular expressions can be arcane, yet when used with care they can also be very powerful. In this post a couple of tips to get more out of your regexes when using Python's re module.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some people, when confronted with a problem, think, "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1. Do we need a regex?&lt;/h2&gt;
&lt;p&gt;First and foremost don't overuse them, specially when you can use simple string operations.&lt;/p&gt;
&lt;p&gt;I like this comparison &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;by Jeff Atwood&lt;/a&gt;, explaining the quote above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regular expressions are like a particularly spicy hot sauce – to be used in moderation and with restraint only when appropriate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, some more text, lets play!&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# overkill!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a bit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, a bit more text, lets play!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^regex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_sre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SRE_Match&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;regex&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# just use&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a bit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;regexes are powerful but use with care, a bit more text, lets play!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;regex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. re.match() vs re.search()&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;match() checks at the start of a string and returns None if nothing is found.&lt;/li&gt;
&lt;li&gt;search() moves up the string, looking for the first occurrence of the given pattern, and returns None only if the pattern occurs nowhere in the string.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text = &amp;#39;Use match vs search appropriately&amp;#39;
&amp;gt;&amp;gt;&amp;gt; re.match(&amp;#39;search&amp;#39;, text)
# don&amp;#39;t do:
&amp;gt;&amp;gt;&amp;gt; re.match(&amp;#39;.*search&amp;#39;, text)
# better:
&amp;gt;&amp;gt;&amp;gt; re.search(&amp;#39;search&amp;#39;, text)
&amp;lt;_sre.SRE_Match object; span=(13, 19), match=&amp;#39;search&amp;#39;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Non-capturing parenthesis&lt;/h2&gt;
&lt;p&gt;Use (?: ) to not capture matching contents, for example lets get all links and hashtags out of the tweet below. I need the outer parenthesis for capturing and the inner parenthesis to say '# or http', latter should not capture anything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; tweet = &amp;#39;New PyBites article: Module of the Week - Requests-cache for Repeated API Calls - http://pybit.es/requests-cache.html … #python #APIs&amp;#39;
&amp;gt;&amp;gt;&amp;gt; re.findall(r&amp;#39;((?:#|http)\S+)&amp;#39;, tweet)
[&amp;#39;http://pybit.es/requests-cache.html&amp;#39;, &amp;#39;#python&amp;#39;, &amp;#39;#APIs&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I don't use (?: ) it goes wrong:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&amp;#39;((#|http)\S+)&amp;#39;, tweet)
[(&amp;#39;http://pybit.es/requests-cache.html&amp;#39;, &amp;#39;http&amp;#39;), (&amp;#39;#python&amp;#39;, &amp;#39;#&amp;#39;), (&amp;#39;#APIs&amp;#39;, &amp;#39;#&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Always use raw string (r'&lt;your_regex&gt;')&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;excellent Regex HOWTO&lt;/a&gt; gives a nice example: in order to match \section you end up writing \\\\section in your regex :( &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The solution is to use Python’s raw string notation for regular expressions; backslashes are not handled in any special way in a string literal prefixed with 'r', so r"\n" is a two-character string containing '\' and 'n', while "\n" is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regexes can be complex enough, use r'' and take escaping out of the equation.&lt;/p&gt;
&lt;h2&gt;5. Regexes are greedy!&lt;/h2&gt;
&lt;p&gt;Take this modified html from our blog: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html = &amp;quot;&amp;quot;&amp;quot;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Imagine we want to match the first paragraph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = re.search(&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;.*&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;, html)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oops, it matched too much:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m.group()
&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can prevent this default greediness by using the ? after the repeating metacharacter (*, +, etc) which makes it match as little text as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; m = re.search(&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;.*?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;, html)
&amp;gt;&amp;gt;&amp;gt; m.group()
&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. Backreferences are powerful&lt;/h2&gt;
&lt;p&gt;I like this example from the HOWTO: find double words in a text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = re.compile(r&amp;#39;(\b\w+)\s+\1&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p.search(&amp;#39;Paris in the the spring&amp;#39;).group()
&amp;#39;the the&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also 8/re.sub where we use them for string replacements.&lt;/p&gt;
&lt;h2&gt;7. findall (finditer) is awesome&lt;/h2&gt;
&lt;p&gt;We used it &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt; for example to get al mm:ss timestamps of a course TOC, very cool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def search_file(file):
    file_content = open(file).read()  # should have used with
    time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)  # seems we needed literal parenthesis as part of the match
    return time_regex.findall(file_content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python js_course_time_scraper.py

&lt;span class="c1"&gt;# intermediate result from findall:&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(3:47)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(4:41)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(1:21)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(5:32)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(2:23)&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;(1:01)&amp;#39;&lt;/span&gt;, ...

&lt;span class="c1"&gt;# further parsing + sum&lt;/span&gt;
The course takes &lt;span class="m"&gt;6&lt;/span&gt;.841944444444445 hours to complete.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8. String replacements&lt;/h2&gt;
&lt;p&gt;re.sub is your friend, I use it quite often, for example &lt;a href="https://github.com/pybites/challenges/blob/master/10/movies.py"&gt;for our last challenge&lt;/a&gt; to extract a movie title:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MOVIE_TITLE = re.compile(r&amp;#39;\d+\.\s+(.*)\s\(.*&amp;#39;).sub

def get_movie():
    with open(&amp;#39;movies.txt&amp;#39;) as f:
        rand_line = random.choice(f.readlines())
        return MOVIE_TITLE(r&amp;#39;\1&amp;#39;, rand_line.rstrip())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use subn to also get the number of replacements done. Here for example it stripped 6 html tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; html
&amp;#39;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Today a quick article on a nice caching module when working with APIs.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Read more ...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; def strip_html(text):
...     return re.subn(r&amp;#39;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;[^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+?&amp;gt;&amp;#39;, &amp;#39;&amp;#39;, text)  # non-greediness again
...
&amp;gt;&amp;gt;&amp;gt; strip_html(html)
(&amp;#39;Today a quick article on a nice caching module when working with APIs.Read more ...&amp;#39;, 6)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;re.sub even can take a function, nice example from &lt;a href="https://docs.python.org/2/library/re.html"&gt;the documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def repl(m):
...     inner_word = list(m.group(2))
...     random.shuffle(inner_word)
...     return m.group(1) + &amp;quot;&amp;quot;.join(inner_word) + m.group(3)
&amp;gt;&amp;gt;&amp;gt; text = &amp;quot;Professor Abdolmalek, please report your absences promptly.&amp;quot;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&amp;quot;(\w)(\w+)(\w)&amp;quot;, repl, text)
&amp;#39;Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;9. Compilation flags / modifiers&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://docs.python.org/3.6/howto/regex.html#compilation-flags"&gt;this table&lt;/a&gt;: apart from re.I (IGNORECASE), I don't use them often, but they can be very handy when your match spans various lines or working with other character sets.&lt;/p&gt;
&lt;p&gt;The VERBOSE (X) flag can make a regex much more readable as nicely shown &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;in Jeff Atwood's article&lt;/a&gt; or taking this example from the &lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;mentioned HOWTO&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pat = re.compile(r&amp;quot;&amp;quot;&amp;quot;
\s*                 # Skip leading whitespace
(?P&amp;lt;header&amp;gt;[^:]+)   # Header name
\s* :               # Whitespace, and a colon
(?P&amp;lt;value&amp;gt;.*?)      # The header&amp;#39;s value -- *? used to
                    # lose the following trailing whitespace
\s*$                # Trailing whitespace to end-of-line
&amp;quot;&amp;quot;&amp;quot;, re.VERBOSE)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;10. Python's unique naming style&lt;/h2&gt;
&lt;p&gt;Another readability feature is Python's specific regex syntax for named groups. This allows you to grab matches by key instead of number. I have not used this much, but writing one now I really like this so planning to adopt this syntax: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; bio = &amp;#39;&amp;#39;&amp;#39;
... name: Bob Belderbos
... country: Spain
... language: Python&amp;#39;&amp;#39;&amp;#39;

&amp;gt;&amp;gt;&amp;gt; m = re.search(r&amp;#39;name: (?P&amp;lt;name&amp;gt;.*)\ncountry: (?P&amp;lt;country&amp;gt;.*)\nlanguage: (?P&amp;lt;lang&amp;gt;.*)&amp;#39;, bio)
&amp;gt;&amp;gt;&amp;gt; m.group(&amp;#39;name&amp;#39;)
&amp;#39;Bob Belderbos&amp;#39;
&amp;gt;&amp;gt;&amp;gt; m.groupdict()
{&amp;#39;name&amp;#39;: &amp;#39;Bob Belderbos&amp;#39;, &amp;#39;country&amp;#39;: &amp;#39;Spain&amp;#39;, &amp;#39;lang&amp;#39;: &amp;#39;Python&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/howto/regex.html"&gt;Regular Expression HOWTO doc&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/library/re.html"&gt;Docs: 6.2. re — Regular expression operations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2mHe00T"&gt;Wesley Chun's book Core Python Applications Programming&lt;/a&gt; - Chapter 1. Regular Expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;Codinghorror article: Regular Expressions: Now You Have Two Problems&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To go really deep: &lt;a href="http://amzn.to/2n5AFYh"&gt;Mastering Regular Expressions&lt;/a&gt; is THE book on regular expressions, an awesome reference. Note though that language specific chapters include Perl/Java/.NET/PHP, not Python. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lookahead assertions: I have not needed those yet, but they have their use cases. They finally 'clicked' reading &lt;a href="https://docs.python.org/3.6/howto/regex.html#lookahead-assertions"&gt;the example of the HOWTO&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope you picked up something useful from this article. Use the comments below to share any cool regexes you use on a regular basis. &lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;h2&gt;Update Reddit&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="https://redd.it/5ziccw"&gt;the upvotes&lt;/a&gt;, some useful feedback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To test your regexes you can use &lt;a href="https://regex101.com/#python"&gt;regex101&lt;/a&gt; or &lt;a href="http://www.myezapp.com/apps/dev/regexp/show.ws"&gt;this site&lt;/a&gt; for explaining how a pattern is being matched. See the Reddit thread for some other ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Above HMTL examples are to show regex, but in real life you should use a parser (plenty of &lt;a href="https://www.google.com/search?q=html+parser+python&amp;amp;oq=html+parser+&amp;amp;aqs=chrome.0.0l2j69i57j0l3.2035j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;options&lt;/a&gt;), see also SO &lt;a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454"&gt;"You can't parse HTML with regex"&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/regex/"&gt;regex 2017.02.08&lt;/a&gt; is an alternative regex module, a superset of re.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update June 2017&lt;/h2&gt;
&lt;p&gt;There was a gentle intro to regex at PyCon 2017 by Al Sweigart: &lt;em&gt;Yes, It's Time to Learn Regular Expressions&lt;/em&gt;:&lt;/p&gt;
&lt;div class="container"&gt;
    &lt;iframe src="https://www.youtube.com/embed/abrcJ9MpF60" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="regex"></category><category term="tips"></category><category term="parsing"></category><category term="regular expressions"></category><category term="findall"></category></entry><entry><title>How to Order Dict Output in Python</title><link href="https://pybit.es/dict-ordering.html" rel="alternate"></link><published>2017-02-16T23:00:00+01:00</published><updated>2017-02-16T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-16:/dict-ordering.html</id><summary type="html">&lt;p&gt;Learn how to order the output of a Python Dict&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dicts are awesome, even for a beginner like me. What isn't so awesome is trying to figure out how to list out their contents for the first time! Lists are easy enough but how on earth do you list out the key/value contents of a dict, let alone in any sort of order?&lt;/p&gt;
&lt;h2&gt;Listing the Contents of a Dict&lt;/h2&gt;
&lt;p&gt;Let's start by simply listing out the dict contents. In the below example I have a dict stored in the &lt;em&gt;ages&lt;/em&gt; variable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I'm not having a mid-life crisis. I'm quite aware that I'm no longer 20.&lt;/p&gt;
&lt;p&gt;Disclaimer 2: I'm being generous when I say Bob is 23. Sorry Bob!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ages = {&amp;#39;julian&amp;#39;: 20, &amp;#39;bob&amp;#39;: 23, &amp;#39;zack&amp;#39;: 3, &amp;#39;anthony&amp;#39;: 95, &amp;#39;daniel&amp;#39;: 41}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in ages.items():
    print(k, v)

julian 20
bob 23
zack 3
anthony 95
daniel 41
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we create the dict. For the sake of this example I've made sure the keys and the values are not in alphabetical or numerical order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The for loop iterates over the keys, &lt;em&gt;k&lt;/em&gt; and values, &lt;em&gt;v&lt;/em&gt; in &lt;em&gt;ages.items&lt;/em&gt;. Each key/value pair in a dict is called an &lt;strong&gt;item&lt;/strong&gt; thus we use .items().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We print the key and value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the output is in the same "order" as it was inside the dict. It wasn't automatically ordered alphabetically or numerically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Using a Lambda to Order the Output in Alphabetical Order&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're unsure of what a Lambda is, I strongly urge you to read &lt;a href="https://dbader.org/blog/python-lambda-functions"&gt;this article by Dan Bader&lt;/a&gt;. It was my source for learning what they were and how to use them. It's a great post!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The previous output is great but what if I wanted to print the &lt;em&gt;ages&lt;/em&gt; data in alphabetical order? Not only do I need to sort it by the letter but also make sure I point my sorting method at the &lt;strong&gt;key&lt;/strong&gt; in the dict. I can do this with a lambda!&lt;/p&gt;
&lt;p&gt;First, let's sort it alphabetically with the help of a lambda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0])
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, note that we're going to use &lt;em&gt;sorted&lt;/em&gt;. This will sort everything between the () in ascending order. Run &lt;em&gt;help(sorted)&lt;/em&gt; to see the available options to &lt;em&gt;sorted&lt;/em&gt;. You'll see that we can specify a key function to help sort the data. (See more about Python's Help function &lt;a href="http://pybit.es/python-help.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;ages.items()&lt;/em&gt; is called to break the &lt;em&gt;ages&lt;/em&gt; dict up into the five individual &lt;strong&gt;items&lt;/strong&gt;. Note that these "items" I'm referring to are actually tuples!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then use a lambda function as the key to help sort. &lt;em&gt;lambda x&lt;/em&gt; at this point will be the individual &lt;strong&gt;item&lt;/strong&gt; in &lt;em&gt;ages.items()&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function of &lt;em&gt;lambda x&lt;/em&gt; is to sort by &lt;em&gt;x[0]&lt;/em&gt; The contents of x[] is the key/value pair in the dict. For example, {'julian', 20}. The 0 indicates the first position in the pair, the key, which in this case is the name 'julian'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output is then sorted by the key position in ascending, alphabetical order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: The output of &lt;em&gt;sorted()&lt;/em&gt; is a new list. The &lt;em&gt;ages&lt;/em&gt; dict was not altered, a new list was generated and can thus be stored (hint hint!).&lt;/p&gt;
&lt;h2&gt;Sorting the Output in Numerical Order&lt;/h2&gt;
&lt;p&gt;Now for the flip side. What if I wanted to sort it in numerical order which would be by the &lt;strong&gt;value&lt;/strong&gt; in this case?&lt;/p&gt;
&lt;p&gt;Identical as the above sort with one tiny change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1])
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;anthony&amp;#39;, 95)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yep! All we do is change the lambda x function to point at position &lt;em&gt;x[1]&lt;/em&gt;, the value.&lt;/p&gt;
&lt;h2&gt;Sorting in Reverse!&lt;/h2&gt;
&lt;p&gt;Sorting that output in reverse is quite simple as well. We use the &lt;em&gt;reverse&lt;/em&gt; flag that &lt;em&gt;sorted()&lt;/em&gt; so handily supports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Name Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[0], reverse=True)
[(&amp;#39;zack&amp;#39;, 3), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;anthony&amp;#39;, 95)]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; #Reverse/Descending Age Sort
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=lambda x: x[1], reverse=True)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Storing the Sorted Output in a Dict&lt;/h2&gt;
&lt;p&gt;You'll have noticed that we still have the output in a list and haven't used &lt;em&gt;print()&lt;/em&gt; yet. There's a reason for that.&lt;/p&gt;
&lt;p&gt;The thing is, it's a lot harder and less Pythonic to print the output of a dict as a list, then iterate over that to get our friendlier &lt;em&gt;print()&lt;/em&gt; output.&lt;/p&gt;
&lt;p&gt;It'd be much better to iterate over the output like we did at the start of this post but to do that, our &lt;em&gt;sorted()&lt;/em&gt; output would need to be a dict. How do we do that if we know &lt;em&gt;sorted()&lt;/em&gt; always returns a list?&lt;/p&gt;
&lt;p&gt;Easy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dict(sorted(ages.items(), key=lambda x: x[0]))
{&amp;#39;anthony&amp;#39;: 95, &amp;#39;bob&amp;#39;: 23, &amp;#39;daniel&amp;#39;: 41, &amp;#39;julian&amp;#39;: 20, &amp;#39;zack&amp;#39;: 3}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We simply call dict on the output of &lt;em&gt;sorted()&lt;/em&gt;. How cool is that? The output is now a dict!&lt;/p&gt;
&lt;h2&gt;Printing the Final Result&lt;/h2&gt;
&lt;p&gt;The moment of truth. Let's print the sorted dict output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; alpha = dict(sorted(ages.items(), key=lambda x: x[0]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in alpha.items():
    print(k, v)

anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; num = dict(sorted(ages.items(), key=lambda x: x[1]))
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; for k, v in num.items():
    print(k, v)

zack 3
julian 20
bob 23
daniel 41
anthony 95
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Is it Really Sorted Though?&lt;/h2&gt;
&lt;p&gt;Have we &lt;em&gt;really&lt;/em&gt; sorted the dict? Here's what we've done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Iterated over a dict.&lt;/li&gt;
&lt;li&gt;Sorted the items within the dict into a List.&lt;/li&gt;
&lt;li&gt;"Converted" that list to a dict.&lt;/li&gt;
&lt;li&gt;Assigned the new dict with alphabetically sorted items to a variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Dicts are unordered data structures.&lt;/strong&gt; This new dict, &lt;em&gt;alpha&lt;/em&gt;, while containing alphabetically sorted data, is still, technically, unordered.&lt;/p&gt;
&lt;p&gt;Can we order it? Sort of. This is where we can use &lt;em&gt;OrderedDict&lt;/em&gt; which is part of the Python stdlib module, &lt;em&gt;collections&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;anthony&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;
&lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="n"&gt;daniel&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;
&lt;span class="n"&gt;julian&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;zack&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output is ultimately the same with one exception. In the background, the dict &lt;em&gt;alpha&lt;/em&gt; will remember the &lt;em&gt;order&lt;/em&gt; of the keys as they were inserted.&lt;/p&gt;
&lt;p&gt;While this will work without OrderedDict, there's no &lt;em&gt;guarantee&lt;/em&gt; that keys will keep the same order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read more on OrderedDicts &lt;a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Bonus: Substituting the Lambda for Readability&lt;/h2&gt;
&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; leave things as they are but let's make this a little more readable by storing the lambda function in a variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; get_alpha = lambda x: x[0]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sorted(ages.items(), key=get_alpha)
[(&amp;#39;anthony&amp;#39;, 95), (&amp;#39;bob&amp;#39;, 23), (&amp;#39;daniel&amp;#39;, 41), (&amp;#39;julian&amp;#39;, 20), (&amp;#39;zack&amp;#39;, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad! We could also do that for the numerical sort by making a &lt;em&gt;get_num&lt;/em&gt; variable!&lt;/p&gt;
&lt;h2&gt;Bonus: Printing the Highest/Lowest Dict Item&lt;/h2&gt;
&lt;p&gt;Okay this is way out of scope for this post but I got playing and figured I'd add it in for good measure.&lt;/p&gt;
&lt;p&gt;What if I wanted to list out the oldest chap in this list? Well, we don't need to sort anything, we just need to know the &lt;em&gt;max&lt;/em&gt; number/age right? (For readability, I'm substituting the &lt;strong&gt;value&lt;/strong&gt; lambda from the previous examples with &lt;em&gt;get_num&lt;/em&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; max(ages.items(), key=get_num)
(&amp;#39;anthony&amp;#39;, 95)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also pull the youngest/lowest entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; min(ages.items(), key=get_num)
(&amp;#39;zack&amp;#39;, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bonus: Wrap it all up in a def&lt;/h2&gt;
&lt;p&gt;Okay last one, I swear!&lt;/p&gt;
&lt;p&gt;Why don't we put all of this into a function that we can call easily at any time? I mean, it'd be nice to have the ability to reuse this code on any dict we want to sort alphabetically or numerically right?&lt;/p&gt;
&lt;p&gt;Keep in mind the below is assuming the dict key is the string we're sorting by. If we tried to give it a dict where the key was a number and the value was a string it would sort it by the key/number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; def alpha_sort(some_dict):
...     alpha = OrderedDict(sorted(some_dict.items(), key=lambda x: x[0]))
...     for k, v in alpha.items():
...         print(k,v)
... 
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; alpha_sort(ages)
anthony 95
bob 23
daniel 41
julian 20
zack 3
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then use this same &lt;em&gt;alpha_sort&lt;/em&gt; function on any similarly constructed dict we want!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; #Top 5 pet peeves
&amp;gt;&amp;gt;&amp;gt; alpha_sort(pet_peeves)
Bad Drivers 2
Laziness 3
Predictable TV Shows 4
Rude People 1
Telemarketers 5
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Not really my top 5 pet peeves!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How great is Python? If you have any other ideas or comments regarding ordering the output of a dict, please let me know! Always be Learning!&lt;/p&gt;
&lt;h2&gt;Update comments Reddit&lt;/h2&gt;
&lt;p&gt;Some good discussion &lt;a href="https://www.reddit.com/r/learnpython/comments/5v3kks/ordering_dict_output/?st=izdve470&amp;amp;sh=6797b6e3"&gt;on Reddit&lt;/a&gt;. Thanks ManyInterests and nadrimajstor for suggesting itemgetter!&lt;/p&gt;
&lt;p&gt;Here is an example how you can use it for sorting instead of lambda: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sort_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sort_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;daniel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anthony&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="dicts"></category><category term="data structures"></category></entry><entry><title>Discover Python Help Options</title><link href="https://pybit.es/python-help.html" rel="alternate"></link><published>2017-02-02T21:45:00+01:00</published><updated>2017-02-02T21:45:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-02:/python-help.html</id><summary type="html">&lt;p&gt;Discover some of the numerous Python Help functions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When it comes to Python I'm pretty much self taught so it came as no surprise to me when I discovered that Python had help functions. I was blown away to say the least!&lt;/p&gt;
&lt;p&gt;There are 3 help related options I'm going to discuss: help(), dir() and pydoc.&lt;/p&gt;
&lt;h2&gt;help()&lt;/h2&gt;
&lt;p&gt;I face palmed over not finding out about help() sooner. Just like on any operating system, help exists to assist with commands. In Python you simply put whatever object you want within the help function and you'll be presented with a very "man page-esque" looking help page. For example, let's say we wanted to find out more about the &lt;em&gt;len&lt;/em&gt; function: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(len)

Help on built-in function len in module builtins:

len(obj, /)
    Return the number of items in a container.
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The help page will detail the syntax for running the object as well as an explanation as to what it does. Some objects return much more detail than others based on their complexity. Try running &lt;strong&gt;help(range)&lt;/strong&gt; in IDLE to see an example of the detail help() can provide. It's pretty awesome!&lt;/p&gt;
&lt;h2&gt;dir()&lt;/h2&gt;
&lt;p&gt;It constantly baffled me as to how programmers like Bob seemed to just &lt;em&gt;know&lt;/em&gt; the attributes to use with a specific object. I may never know the answer but I'm
definitely one step closer thanks to dir().&lt;/p&gt;
&lt;p&gt;dir() is just as wonderful as help(). It allows you to query an object and return its attributes. That is to say, if you've ever wondered what to use with &lt;em&gt;len&lt;/em&gt; (eg: len.&lt;attribute/module&gt;) then use dir(len) to get a list. Check out what happens if we use dir() on &lt;em&gt;range&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; dir(range)
[&amp;#39;__class__&amp;#39;, &amp;#39;__contains__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getitem__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__iter__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__len__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__reversed__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;count&amp;#39;, &amp;#39;index&amp;#39;, &amp;#39;start&amp;#39;, &amp;#39;step&amp;#39;, &amp;#39;stop&amp;#39;]
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now know we can use the &lt;em&gt;count&lt;/em&gt; function with range: range.count.&lt;/p&gt;
&lt;h2&gt;help() and dir() Together&lt;/h2&gt;
&lt;p&gt;The best part is that both help() and dir() compliment each other perfectly.&lt;/p&gt;
&lt;p&gt;Using the previous example of &lt;em&gt;range&lt;/em&gt; we found that we can use the &lt;em&gt;count&lt;/em&gt; function with it. The question is how?&lt;/p&gt;
&lt;p&gt;Use help() of course!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; help(range.count)
Help on method_descriptor:

count(...)
    rangeobject.count(value) -&amp;gt; integer -- return number of occurrences of value
(END)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How awesome is that?!&lt;/p&gt;
&lt;p&gt;Modules that aren't in stdlib respond to help() and dir() as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;NAME&lt;/span&gt;
    &lt;span class="n"&gt;tweepy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Tweepy&lt;/span&gt; &lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;

&lt;span class="n"&gt;PACKAGE&lt;/span&gt; &lt;span class="n"&gt;CONTENTS&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt;
    &lt;span class="n"&gt;binder&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt;
    &lt;span class="n"&gt;models&lt;/span&gt;
    &lt;span class="n"&gt;parsers&lt;/span&gt;
    &lt;span class="n"&gt;streaming&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;

&lt;span class="n"&gt;FUNCTIONS&lt;/span&gt;
    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATA&lt;/span&gt;
    &lt;span class="n"&gt;__license__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;API&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;AppAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DirectMessage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FileCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friendship&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MemoryCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ModelFactory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OAuthHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RateLimitError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SavedSearch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SearchResults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;StreamListener&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TweepError&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__author__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__license__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__path__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__version__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;binder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cursor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;models&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parsers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;streaming&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utils&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pydoc&lt;/h2&gt;
&lt;p&gt;Pydoc is different to help() and dir() in that you don't actually run it in IDLE or within a script. It's a command line tool that gets installed with Python.&lt;/p&gt;
&lt;p&gt;That said, Pydoc is actually quite similar to help(). It displays a help page (again, man page similarities!) of the Python object you want to query but does so on the command line. No need to start up IDLE.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) juliansequeira$ pydoc datetime
Help on module datetime:

NAME
    datetime - Fast implementation of the datetime type.

FILE
    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/datetime.so

MODULE DOCS
    http://docs.python.org/library/datetime
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The text displayed is made up of the docstrings within the object which means you can create your own if you make your own module etc.&lt;/p&gt;
&lt;p&gt;In typical Python fashion though, Pydoc takes it up a notch. It actually has the ability to display documentation for your installed modules/packages using the built in Python web server!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pydoc -p 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you point your browser to localhost:8000 you'll get a (relatively) nice web page with links to your Python package documentation.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Help is everywhere! I'm almost annoyed that it took me a year to discover this stuff. Better late than never I guess!&lt;/p&gt;
&lt;p&gt;It's so much nicer being able to get the syntax and attribute help that I need from within IDLE rather than having to Google it and sort through pages of stack overflow articles.&lt;/p&gt;
&lt;p&gt;Let me know if there are any other cool help modules or functions out there. I'd love to know!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="help"></category></entry></feed>