<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Books</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/books.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-02-07T06:00:00+01:00</updated><entry><title>From beginner to pro: Python books, videos and resources</title><link href="https://pybit.es/python-resources.html" rel="alternate"></link><published>2017-02-07T06:00:00+01:00</published><updated>2017-02-07T06:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-07:/python-resources.html</id><summary type="html">&lt;p&gt;A list of useful Python resources to boost up your skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article a list of useful Python resources to boost up your skills. It goes without saying that the best way to get better in Python is to read and write a lot of code. However these resources can definitely help fill in the knowledge gaps.&lt;/p&gt;
&lt;h2&gt;To get started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/"&gt;The Python Tutorial&lt;/a&gt;: official, quick-start tour to the language, introduces the standard library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lVnTJP"&gt;Head first Python, 2nd ed&lt;/a&gt;: detailed explanation of the language, lot of practical examples and as head first provides a lot of visual aid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jessica McKellar's &lt;a href="http://shop.oreilly.com/product/110000448.do"&gt;Introduction to Python&lt;/a&gt; and &lt;a href="http://shop.oreilly.com/product/0636920049852.do"&gt;Intermediate Python Programming&lt;/a&gt; are awesome. I recommended these videos to a new Pythonista at work and he already thanked me: clear, concise, fun and practical examples, for him the concepts really started to make sense watching these videos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Kennedy has &lt;a href="https://training.talkpython.fm/"&gt;a growing set of awesome trainings&lt;/a&gt;: &lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt; teaches you a lot of Python features and more importantly how to write Pythonic code. See &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;our review&lt;/a&gt;, for us it's kind of the manual we wish we'd had when we started! To learn by building cool projects, check out his &lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by Building 10 Apps&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.diveintopython3.net/"&gt;Dive into Python&lt;/a&gt;: this is another excellent introduction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn by practical projects, take a look at &lt;a href="http://amzn.to/2lxrPiK"&gt;Automate the boring stuff&lt;/a&gt; which we reviewed &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;, the author also has &lt;a href="https://inventwithpython.com/"&gt;a free tutorial on games&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lV8rgL"&gt;Learn Python the Hard Way&lt;/a&gt; takes another approach by having your hands at the keyboard, working through progressively more difficult code examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fundamentals done, get better&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's guide to Python&lt;/a&gt;: this is a great work, it teaches Python best practices, comunnity tools, and is quite unique in that it teaches by looking at the source code of top-notch open source projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt;: on to become a classic. This is one of the best Python books out there. This gem has so much knowledge, best practices, and deep understanding of Python embedded. I read it last summer (somebody at PyData recommended it to me) and it is THE book that got me to the next level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsIba"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;: I like the effective series for its recipe format. Very knowledgeable author, this book teaches you how to write Pythonic code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxxiq1"&gt;Core Python Applications Programming&lt;/a&gt;: teaches concepts through real-world applications. Lot of code, covers a lot: Google App Engine, APIs, Database / web programming, even MS office programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thehackerguidetopython.com/"&gt;The hacker's guide to Python&lt;/a&gt;: I bought this ebook last week after being impressed reading the free functional programming chapter, not done yet, but already found some great insights, not easily found in other resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://powerfulpython.com/"&gt;Powerful Python&lt;/a&gt;: good tutorial on advanced concepts like decorators, OOP design patterns, automated testing. The accompanying video shows you how to make a RESTful API using TDD, very interesting / useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two Packt books that I read parts of and explain more advanced topics very well: &lt;a href="http://amzn.to/2lVphMx"&gt;Mastering Python&lt;/a&gt; and &lt;a href="http://amzn.to/2lxLQ91"&gt;Expert Python Programming, 2nd ed&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For reference works check out &lt;a href="http://amzn.to/2lxIB18"&gt;Python cookbook&lt;/a&gt; and &lt;a href="http://amzn.to/2mcgKHs"&gt;Python in a nutshell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you learn better by video checkout &lt;a href="http://pyvideo.org/"&gt;PyVideo&lt;/a&gt;, I also found it very useful to watch PyCon talks, see &lt;a href="https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw"&gt;this PyCon 2016 playlist&lt;/a&gt; for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dbader.org/"&gt;Dan Bader's blog&lt;/a&gt;, his new book: &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks&lt;/a&gt; reviewed &lt;a href="http://pybit.es/pytricks-review.html"&gt;here&lt;/a&gt;. He also made a useful &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;list of Python podcasts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the subject of podcasts, Michael Kennedy's &lt;a href="https://talkpython.fm"&gt;Talk Python To Me&lt;/a&gt; is a must-listen for any Python developer. For headlines tune into &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes&lt;/a&gt;, a nice weekly digest of Python news.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing is important, and Python has great coverage: unittest, pytest, nose, doctest ... get started &lt;a href="http://pythontesting.net/start-here/"&gt;here&lt;/a&gt; or listen to Brian Okken's &lt;a href="http://testandcode.com"&gt;Test and Code podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For an understanding of algorithms I recommend &lt;a href="http://amzn.to/2lxGLNP"&gt;Grokking algorithms&lt;/a&gt; we detailed &lt;a href="http://pybit.es/grokking_algorithms.html"&gt;here&lt;/a&gt;. Another resource is &lt;a href="http://interactivepython.org/runestone/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn Flask and Django, and Python web development and database programming in general, check out &lt;a href="https://realpython.com"&gt;Real Python's great courses&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://awesome-python.com/"&gt;Awesome Python&lt;/a&gt; - a curated list of awesome Python frameworks, libraries, software and resources (discussed &lt;a href="http://pybit.es/awesome_python_resources.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru"&gt;Python progression path - From apprentice to guru SO thread&lt;/a&gt; contains some useful advice as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guido's &lt;a href="http://neopythonic.blogspot.com.es/2016/04/kings-day-speech.html"&gt;King's Day Speech&lt;/a&gt; as well as &lt;a href="https://www.python.org/doc/essays/"&gt;his essays&lt;/a&gt; (I read &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;one about optimization&lt;/a&gt; today, awesome!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lists from other Pythonistas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mentioned Hitchhiker's guide has &lt;a href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;a good resources list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full Stack Python's &lt;a href="https://www.fullstackpython.com/best-python-resources.html"&gt;Best Python Resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pixelmonkey's article: &lt;a href="http://www.pixelmonkey.org/2015/06/06/pybooks"&gt;The 3 Best Python Books for Your Team&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pff ...&lt;/h2&gt;
&lt;p&gt;I know what you are saying, and I had the same feeling writing this article: there are just too many resources. Again, writing code is the best way to get better so the best advice I can give you is to pick up one of the resources, read some, start coding. Read some more, try new things you learn in your code. Repeat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;code some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this list is useful. Feel free to use the comments below to share other resources that made you a better Python programmer.&lt;/p&gt;
&lt;h2&gt;Update: additions after Reddit&lt;/h2&gt;
&lt;p&gt;Wow amazed at the amount of upvotes / comments &lt;a href="https://redd.it/5sjt3l"&gt;on Reddit&lt;/a&gt;, thanks for your support. I am adding some suggestions made in the commens: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Youtube channel: &lt;a href="https://www.youtube.com/user/sentdex"&gt;sentdex&lt;/a&gt;, lot of good Python learning, Django was specially mentioned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Data Science I heard good things about &lt;a href="http://amzn.to/2lVnp6j"&gt;Python Data Science Handbook&lt;/a&gt; which shares all Jupyter notebooks freely &lt;a href="https://github.com/jakevdp/PythonDataScienceHandbook"&gt;here&lt;/a&gt;. See also &lt;a href="https://redd.it/5som5b"&gt;this new thread&lt;/a&gt; with cheat sheets for Python for data science.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I replied another question about web scraping &lt;a href="https://www.reddit.com/r/learnpython/comments/5sjt3l/from_beginner_to_pro_python_books_videos_and/ddh6ski/"&gt;with some resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9"&gt;MIT intro computer science&lt;/a&gt; was labeled as very tough for a beginner. I read some of &lt;a href="http://greenteapress.com/wp/"&gt;Allen Downey's work&lt;/a&gt; sometime ago which I liked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="python"></category><category term="resources"></category><category term="books"></category><category term="videos"></category><category term="reference"></category><category term="tricks"></category><category term="tools"></category></entry><entry><title>Python Tricks book review</title><link href="https://pybit.es/pytricks-review.html" rel="alternate"></link><published>2017-01-31T09:00:00+01:00</published><updated>2017-01-31T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-31:/pytricks-review.html</id><summary type="html">&lt;p&gt;A review of Dan Bader's &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks book&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A review of Dan Bader's &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Discover Python’s Best Practices with Simple Examples and Start Writing Beautiful &amp;amp; Pythonic Code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Take your Python to the next level&lt;/h3&gt;
&lt;p&gt;I found out about this book through Dan's Python Tricks I get via email / Twitter. The book defines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python Trick: A short Python code snippet meant as a teaching tool. A Python Trick either teaches an aspect of Python with a simple illustration, or serves as a motivating example to dig deeper and develop an intuitive understanding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I really enjoyed reading Dan's book. He explains important Python aspects with clear examples (using two twin cats to explain "is" vs "==" for example). It is not just code samples, it discusses relevant implementation details comprehensibly.&lt;/p&gt;
&lt;p&gt;Since &lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M"&gt;this talk by Raymond Hettinger&lt;/a&gt; I am more conscious about writing Pythonic code. This book cares too. Most tricks show the "one-- and preferably only one --obvious way to do it" (import this), for example how to merge dicts, or for dict access use try/except (&lt;a href="https://docs.python.org/3/glossary.html"&gt;EAFP style&lt;/a&gt;) but prefer dict.get() as being even more precise. The beginner gets into Pythonic mode, the expert might still pick up new stuff. Another good book in this context is &lt;a href="http://amzn.to/2lxsIba"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Few things I learned (refreshed)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Language features section: the "is" vs "==" I mentioned, dictionary internals, deep vs shallow copy. The article on 4 ways of string formatting is awesome. I like Dan’s Python String Formatting Rule of Thumb:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your format strings are user-supplied, use Template Strings to avoid security issues. Otherwise, use Literal String Interpolation if you’re on Python 3.6+, and "New Style" String Formatting if you’re not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cleaner Python section (my favorite part of the book): use your own exceptions (which we used &lt;a href="http://pybit.es/error_handling.html"&gt;here&lt;/a&gt;), ABC's (we used &lt;a href="http://pybit.es/oop-primer.html"&gt;here&lt;/a&gt;), the key func of sorted() (we used &lt;a href="http://pybit.es/codechallenge01_review.html"&gt;here&lt;/a&gt;), which is shown with both lambda and operator.getitem syntax, refactoring an ugly switch statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pythonic syntactic sugar section: * and ** (splat) function arg unpacking (very Pythonic), various (stdlib) ways to merge dicts. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Now is better than never (import this)&lt;/h3&gt;
&lt;p&gt;And more so because you can still get it for a lower early-access price, eventually the final version of the book will cost more.&lt;/p&gt;
&lt;p&gt;Keep in mind this is a work in progress. I did find the initial version of 60 pages a bit short, but recently I got an update of 25+ pages so the final version will be longer. &lt;/p&gt;
&lt;p&gt;What really matters though is that this book makes you write better Python code! The book is actually responsible for recent new good py habits I picked up, for example: using custom exceptions and ABC's (I found Dan's blog searching for abstract classes). These new learnings alone are worth the price.&lt;/p&gt;
&lt;p&gt;Thanks Dan for sharing your great work.&lt;/p&gt;</content><category term="review"></category><category term="tricks"></category><category term="tips"></category><category term="pythonic"></category><category term="oop"></category><category term="ABC"></category><category term="dicts"></category><category term="cleancode"></category></entry><entry><title>A great book that makes algorithms accessible</title><link href="https://pybit.es/grokking_algorithms.html" rel="alternate"></link><published>2017-01-03T09:00:00+01:00</published><updated>2017-01-03T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-03:/grokking_algorithms.html</id><summary type="html">&lt;p&gt;I finished reading Grokking Algorithms, it's a very accessible resource for learning algorithms / data structures, highly recommended.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://amzn.to/2nFlsPg"&gt;Grokking algorithms&lt;/a&gt; is a unique gem. I discovered it on &lt;a href="https://talkpython.fm/episodes/show/82/grokking-algorithms-in-python"&gt;episode 82 of Talk Python&lt;/a&gt;. Knowing algorithms is fundamental for programming and problem solving. This book presents the key algorithms in an accessible way using great examples and &lt;a href="https://github.com/egonSchiele/grokking_algorithms/tree/master/images"&gt;hundreds of illustrations&lt;/a&gt; with &lt;a href="https://github.com/egonSchiele/grokking_algorithms"&gt;code samples in Python&lt;/a&gt;. Specially for self-taught programmers (like myself) this approach is awesome. After reading it I noted that I more easily grasp related topics in other books and I am now more confident picking up more advanced algorithms (which will be needed when learning ML).&lt;/p&gt;
&lt;h2&gt;Visual learning&lt;/h2&gt;
&lt;p&gt;This is a great summarizing video about some basic algorithms and the way the book teaches them:&lt;/p&gt;
&lt;div class="container"&gt;
&lt;iframe src="https://www.youtube.com/embed/oo_sb4luiPo" frameborder="0" allowfullscreen class="video"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;The examples in the book are easy to follow. For example to explain the performance between an array (Python's list) and linked list (Python's &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt;) we are taken to the movies. What if you are 5 and a 6th friend joined? Possibly you have to relocate all 6 to find new seats if you are an array. Not so with a linked list, because the new friend can just sit 'anywhere' ( = linked to). This visualization stayed with me and I much better understand why inserts on arrays are slower.&lt;/p&gt;
&lt;p&gt;And it does matter when your data set grows. &lt;a href="http://amzn.to/2lxLQ91"&gt;Expert Python&lt;/a&gt; provides a nice snippet in chapter 12 that shows the performance of array (list) vs linked list (deque):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sequence=list(range(10000))&amp;#39;&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sequence.insert(0, 0); sequence.pop(0)&amp;#39;&lt;/span&gt;
&lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.12&lt;/span&gt; &lt;span class="n"&gt;usec&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt; \
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from collections import deque; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="mi"&gt;10000000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.204&lt;/span&gt; &lt;span class="n"&gt;usec&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another good example is binary search. Compared to selection sort the number of steps needed to search a (sorted) list goes from 4 billion down to 32. That demonstrates an important concept of Big O, quoting the book: "algorithm times are measured in terms of growth of an algorithm." Fascinating! &lt;/p&gt;
&lt;p&gt;See Python's &lt;a href="https://wiki.python.org/moin/TimeComplexity"&gt;TimeComplexity wiki&lt;/a&gt; for performance details on all stdlib collections.&lt;/p&gt;
&lt;h2&gt;Cool use cases&lt;/h2&gt;
&lt;p&gt;Some cool stuff you can do with basic algorithms: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hashtable lookups (dict, set) are O(1) so they are ideal for building search engines. On the mentioned episode of Talk Python Michael Kennedy explained he made the search for his show using dicts because of this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recusion provides elegant solutions. The book shows an example of finding a key in boxes, the recursive solution is much shorter and cleaner. And recursion at its simplest really comes down to &lt;a href="https://github.com/egonSchiele/grokking_algorithms/blob/master/03_recursion/python/01_countdown.py"&gt;just a few lines of code&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def countdown(i):
print i
# base case
if i &amp;lt;= 0:
    return
# recursive case
else:
    countdown(i-1)

countdown(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example to do a manual os.walk it only takes this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_files_in_dir(dirname=&amp;quot;.&amp;quot;):
    for file_name in os.listdir(dirname):
        abs_path = os.path.join(dirname, file_name)
        if os.path.isdir(abs_path):
            yield from get_files_in_dir(abs_path)
        else:
            yield abs_path
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wondered how Netflix recommends those cool movies to you? They are probably using the &lt;a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm"&gt;k-nearest neighbors algorithm&lt;/a&gt; (k-nn) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graphs: what is the shortest path on Facebook between you and Brad Pitt? Similarly what is the shortest path from NY to LA? You can use &lt;a href="https://en.wikipedia.org/wiki/Dijkstra's_algorithm"&gt;Dijkstra's algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic programming is useful when you’re trying to optimize something given a constraint. The book starts out with the 'knapsack problem': maximizing the value of a set of goods to steal, being constrained by the size of the knapsack. &lt;/p&gt;
&lt;p&gt;Then it shows a simple implementation of suggesting similar words based on misspelled words (like Google). This is a bit more complex to grasp but very powerful. This chapter, as all the others, shows a lot of practical / real life use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The explanation of Big O, array vs list and hash tables (meet Maggie!) are worth the price alone, but there is much more. If you are new to algorithms or need a refresher this is un unmissable book.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="algorithms"></category><category term="data structures"></category><category term="performance"></category><category term="collections"></category></entry><entry><title>A Quick Automate the Boring Stuff Review</title><link href="https://pybit.es/automate_the_boring_stuff_review.html" rel="alternate"></link><published>2016-12-26T23:00:00+01:00</published><updated>2016-12-26T23:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-26:/automate_the_boring_stuff_review.html</id><summary type="html">&lt;p&gt;A quick review of the legendary free book, Automate the Boring Stuff.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When he convinced me to learn Python, Bob (co-creator of &lt;a href="http://www.pybit.es"&gt;pybit.es&lt;/a&gt;) recommended I start by reading the book &lt;a href="https://www.automatetheboringstuff.com"&gt;&lt;em&gt;Automate the Boring Stuff&lt;/em&gt;&lt;/a&gt; by Al Sweigart, which is free to read online.&lt;/p&gt;
&lt;p&gt;I loved it!&lt;/p&gt;
&lt;h2&gt;What Makes it Different?&lt;/h2&gt;
&lt;p&gt;Automate the Boring Stuff (ATBS) is unlike most other "learn to program books". As expected it starts by showing you the basics (Expressions, Data Types, etc) but very quickly moves into more exciting concepts such as Lists, Dicts and Regular Expressions.&lt;/p&gt;
&lt;p&gt;It's also worth noting that while these sections are purely around learning the concept of the chapter, Al does throw in a heap of exercises and challenges to keep things interesting. Not once did I find myself falling asleep while reading which for me is saying something!&lt;/p&gt;
&lt;p&gt;The book really comes into its own in Chapter 8. This is where Al stops with the raw learning and starts with the projects. Each chapter onward has at least one nifty little project to make.&lt;/p&gt;
&lt;p&gt;I don't mean a run of the mill Celsius to Fahrenheit converter but Web Scrapers and scripts to automatically resize images.
Actual &lt;em&gt;useful stuff&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Thus the name, Automate the Boring Stuff!&lt;/p&gt;
&lt;h2&gt;Easy to Follow&lt;/h2&gt;
&lt;p&gt;The most important quality of an educational book is its ability to teach. ATBS would be like your favourite teacher in school - it teaches you in such a way that hours, days, weeks later, you'll recall the exact sentence or problem mentioned in the book.&lt;/p&gt;
&lt;p&gt;I keep it handy as a reference tool at all times. It's that good!&lt;/p&gt;
&lt;p&gt;Al's language is easy to relate to as well. This isn't someone talking down to you, teaching you a hardcore curriculum. This is a bloke who clearly loves his code, enjoys python and legitimately wants to teach you.&lt;/p&gt;
&lt;p&gt;It's also super handy that he uses food as his variable names! Mmmm bacon...&lt;/p&gt;
&lt;h2&gt;Favourite Part&lt;/h2&gt;
&lt;p&gt;My favourite chapter in the book was the chapter on Web Scraping. I've wanted to create my own web scraper ever since I saw Bob create one of his own. (I was blown away!).&lt;/p&gt;
&lt;p&gt;I always figured it was something that was going to be super complex and way out of my league but not so! This chapter allowed me to create my own scraper to parse a site and find out when the latest episodes of my tv shows were being aired!&lt;/p&gt;
&lt;p&gt;It's such a useful tool with unlimited possibilites when you think about it!&lt;/p&gt;
&lt;h2&gt;Not-So Favourite Part&lt;/h2&gt;
&lt;p&gt;There's one thing that's irked me about ATBS. Al's naming convention differs greatly to what I've seen in current python circles.&lt;/p&gt;
&lt;p&gt;These days, best practice in python would be to create your multi-word named variables all in lower case with an underscore separating the words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this_is_a_variable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Al, however, teaches that you should be using Camel Case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# thisIsAVariable = []
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may not seem like a big deal but it totally ruined my day when I finally had the guts to show people some of my early code and there was a concesus that camelCase wasn't really used in python!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GO. READ. THIS. BOOK. NOW!&lt;/p&gt;
&lt;p&gt;As mentioned before, it's available for free on &lt;a href="https://www.automatetheboringstuff.com"&gt;Al's website&lt;/a&gt; but can be purchased so you can show your support.&lt;/p&gt;
&lt;p&gt;I totally recommend this to anyone learning Python as well as the old hats. The projects alone are awesome and will inspire you to create other handy tools to make your life easier - and isn't that what coding's all about?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="review"></category><category term="books"></category><category term="learning"></category><category term="beginners"></category><category term="automation"></category></entry></feed>