<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - PyBites</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/pybites.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-07-16T16:23:00+02:00</updated><entry><title>Twitter digest 2017 week 28</title><link href="https://pybit.es/twitter_digest_201728.html" rel="alternate"></link><published>2017-07-16T16:23:00+02:00</published><updated>2017-07-16T16:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-16:/twitter_digest_201728.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We were mentioned on the Python Bytes Podcast! Woohoo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Thanks &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; and &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; for your nice feedback on our &lt;a href="https://twitter.com/search/#100DaysOfCode," target="_blank"&gt;#100DaysOfCode,&lt;/a&gt; motivates us even more. &lt;a href="https://t.co/GzLgyyM8Sg" title="https://t.co/GzLgyyM8Sg" target="_blank"&gt;https://t.co/GzLgyyM8Sg&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/885975114701058048" data-datetime="2017-07-14T21:31:42+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build 9 Projects in Python and PostgreSQL &lt;a href="https://t.co/x8UzjLgAOQ" title="https://t.co/x8UzjLgAOQ" target="_blank"&gt;https://t.co/x8UzjLgAOQ&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/886269128851509249" data-datetime="2017-07-15T17:00:01+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use the pathlib module to recursively search for files &amp;gt;&amp;gt;&amp;gt; from pathlib import Path &amp;gt;&amp;gt;&amp;gt; Path('.').glob('**/*.py') &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/884353407380852736" data-datetime="2017-07-10T10:07:37+00:00"&gt;July 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PylonsProject:" target="_blank"&gt;@PylonsProject:&lt;/a&gt; Pyramid 1.9.1 released &lt;a href="https://t.co/8AjKhXHTQS" title="https://t.co/8AjKhXHTQS" target="_blank"&gt;https://t.co/8AjKhXHTQS&lt;/a&gt; PyPI &lt;a href="https://t.co/vmTWv5w4f5" title="https://t.co/vmTWv5w4f5" target="_blank"&gt;https://t.co/vmTWv5w4f5&lt;/a&gt; Changes &lt;a href="https://t.co/yhgpUJYSWA" title="https://t.co/yhgpUJYSWA" target="_blank"&gt;https://t.co/yhgpUJYSWA&lt;/a&gt; Issues htt‚Ä¶&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/886242830682791936" data-datetime="2017-07-15T15:15:31+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Performance comparison of Python / pandas / numpy &lt;a href="https://t.co/OKzIVE0QQf" title="https://t.co/OKzIVE0QQf" target="_blank"&gt;https://t.co/OKzIVE0QQf&lt;/a&gt; &lt;a href="https://t.co/f8ej9cLOCG" title="https://t.co/f8ej9cLOCG" target="_blank"&gt;https://t.co/f8ej9cLOCG&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/886274666574336000" data-datetime="2017-07-15T17:22:01+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 Python books, categorized and ranked &lt;a href="https://t.co/izZPRELAGk" title="https://t.co/izZPRELAGk" target="_blank"&gt;https://t.co/izZPRELAGk&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/885906745738113024" data-datetime="2017-07-14T17:00:02+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúFAT Python : the next chapter in Python optimization‚Äù by &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://t.co/4ydZ8AAzC3" title="https://t.co/4ydZ8AAzC3" target="_blank"&gt;https://t.co/4ydZ8AAzC3&lt;/a&gt;&lt;/p&gt;‚Äî Bob Belderbos (@bbelderbos) &lt;a href="https://twitter.com/bbelderbos/status/885981931296501763" data-datetime="2017-07-14T21:58:47+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Really cool tutorial (video): "It is ridiculously easy to generate any audio signal using Python"‚Ä¶ &lt;a href="https://t.co/VpOn3eH7Rk" title="https://t.co/VpOn3eH7Rk" target="_blank"&gt;https://t.co/VpOn3eH7Rk&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/886353190123442178" data-datetime="2017-07-15T22:34:02+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üêçüì∫ A Python Shorthand for Swapping Two Variables &lt;a href="https://t.co/6A8dFVgMg0" title="https://t.co/6A8dFVgMg0" target="_blank"&gt;https://t.co/6A8dFVgMg0&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/884967298708254721" data-datetime="2017-07-12T02:47:00+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;O'Reilly interview with Aaron Maxwell on powerfully programming in Python: &lt;a href="https://t.co/AnwwJjJ5D2" title="https://t.co/AnwwJjJ5D2" target="_blank"&gt;https://t.co/AnwwJjJ5D2&lt;/a&gt; &lt;a href="https://twitter.com/search/#PowerfulPython" target="_blank"&gt;#PowerfulPython&lt;/a&gt;&lt;/p&gt;‚Äî Powerful Python (@powerfulpython) &lt;a href="https://twitter.com/powerfulpython/status/885550868937850880" data-datetime="2017-07-13T17:25:54+00:00"&gt;July 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ncoghlan_dev:" target="_blank"&gt;@ncoghlan_dev:&lt;/a&gt; I personally had a trouble-free upgrade to the F26 beta last week, and now the official release is also here: &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/885138419206176772" data-datetime="2017-07-12T14:06:58+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python packaging tip: MANIFEST.in puts things in the tarball; setup.py installs things from the tarball. You need to update both.&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/885904120082812928" data-datetime="2017-07-14T16:49:36+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Deep Learning with Python and Keras &lt;a href="https://t.co/IEFnKIyNJe" title="https://t.co/IEFnKIyNJe" target="_blank"&gt;https://t.co/IEFnKIyNJe&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/885017685586841601" data-datetime="2017-07-12T06:07:13+00:00"&gt;July 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make sure your next NBA related discussion is a slam dunk thanks to Python, Flask, and &lt;a href="https://twitter.com/@openpyxl" target="_blank"&gt;@openpyxl&lt;/a&gt; üèÄ‚Ä¶ &lt;a href="https://t.co/2ctuxhkrLE" title="https://t.co/2ctuxhkrLE" target="_blank"&gt;https://t.co/2ctuxhkrLE&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/885906759994531841" data-datetime="2017-07-14T17:00:05+00:00"&gt;July 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
Ha!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jdeisenberg:" target="_blank"&gt;@jdeisenberg:&lt;/a&gt; Book idea: "Programming for People Whose Programs Don't Need to Scale to Millions of Users or Billions of Transactions per‚Ä¶&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/886326591747366912" data-datetime="2017-07-15T20:48:21+00:00"&gt;July 15, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pybites"></category><category term="PostgreSQL"></category><category term="books"></category><category term="resources"></category><category term="pathlib"></category><category term="Pyramid"></category><category term="FAT"></category><category term="audio"></category><category term="machine learning"></category><category term="pandas"></category><category term="numpy"></category><category term="tricks"></category><category term="interview"></category><category term="Fedora"></category><category term="packaging"></category><category term="deep learning"></category><category term="Keras"></category><category term="Flask"></category><category term="Openpyxl"></category></entry><entry><title>Code Challenge 27 - PRAW: The Python Reddit API Wrapper</title><link href="https://pybit.es/codechallenge27.html" rel="alternate"></link><published>2017-07-11T11:00:00+02:00</published><updated>2017-07-11T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-11:/codechallenge27.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;First of all thanks &lt;a href="https://github.com/shibasisp"&gt;shibasisp&lt;/a&gt; for raising &lt;a href="https://github.com/pybites/challenges/issues/42"&gt;the issue&lt;/a&gt;. We like the 2 examples you provided so we post them here: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch one challenge from easy, one from Intermediate and one hard from r/dailyprogrammer and shows it in the console. (PyBites: definitely something we could use!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch 10 (or so) news items from r/news and sort them in decreasing order of upvotes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More ideas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fetch a user's history, &lt;a href="http://alan-wright.com/programming/tutorial/python/2014/03/09/praw-tutorial/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build a Reddit Bot, &lt;a href="http://pythonforengineers.com/build-a-reddit-bot-part-1/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do some data analysis, for example: build word clouds, &lt;a href="http://www.randalolson.com/2013/03/01/fun-with-the-python-reddit-api-wrapper-and-word-clouds/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even do a bit of sentiment analysis of a comment thread using something like &lt;a href="https://pybit.es/codechallenge07_review.html"&gt;textblob&lt;/a&gt; or the &lt;a href="http://www.nltk.org"&gt;Natural Language Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But these are just examples. Feel free to build anything. The goal is to sharpen your coding skills. If you scratch your own itch even better (last week's &lt;a href="https://pybit.es/codechallenge26_review.html"&gt;Pomodori Tracker&lt;/a&gt; for example is something we use on a daily basis now).&lt;/p&gt;
&lt;h3&gt;Further resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://praw.readthedocs.io/en/latest/"&gt;PRAW docs&lt;/a&gt; - probably your number one goto. The easiest way to get PRAW running is to &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;create a virtual env&lt;/a&gt; and do a &lt;code&gt;pip install praw&lt;/code&gt; and follow the docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/reddit/reddit/wiki/API"&gt;Reddit API resources page&lt;/a&gt; - info on OAuth / API limits / links to other wrapper modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Please share&lt;/h3&gt;
&lt;p&gt;While you're at it, if you like this challenge upvote it &lt;a href="https://redd.it/6ml3hv"&gt;on Reddit&lt;/a&gt; or retweet it on &lt;a href="https://twitter.com/pybites/status/884702973795987458"&gt;Twitter&lt;/a&gt;. The more people coding with us == more possible PR submissions for our review == the more we all learn from this!&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="reddit"></category><category term="API"></category><category term="PRAW"></category><category term="news"></category><category term="dailyprogrammer"></category><category term="data"></category><category term="data analysis"></category><category term="textblob"></category><category term="bot"></category><category term="word clouds"></category><category term="nltk"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI - Review</title><link href="https://pybit.es/codechallenge26_review.html" rel="alternate"></link><published>2017-07-10T11:30:00+02:00</published><updated>2017-07-10T11:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-10:/codechallenge26_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; made a &lt;em&gt;Reading Progress Pomodori Tracker GUI&lt;/em&gt; inspired by the article: &lt;a href="https://kimschlesinger.com/blog/read-more.html"&gt;How to Read More&lt;/a&gt;. It uses &lt;a href="http://pythonhosted.org/easygui/"&gt;easygui&lt;/a&gt; and &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. For more info, see &lt;a href="https://github.com/pybites/challenges/tree/community/26/bbelderbos"&gt;the README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; continued his &lt;a href="https://pybit.es/guest-pytrack-app.html"&gt;&lt;em&gt;pyTrack&lt;/em&gt;&lt;/a&gt; project wrapping a GUI around it using &lt;a href="https://docs.python.org/3/library/tkinter.html#module-tkinter"&gt;tkinter&lt;/a&gt;. Nice addition, will make it more usable. See &lt;a href="https://github.com/pybites/challenges/tree/community/26/clamytoe"&gt;the README&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pytrack gui" src="https://pybit.es/images/pytrack-gui.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for our new challenge tomorrow ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. We can always update our review posts with new PRs.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="GUI"></category><category term="tkinter"></category><category term="easygui"></category><category term="matplotlib"></category><category term="pyTrack"></category><category term="pygame"></category></entry><entry><title>Twitter digest 2017 week 27</title><link href="https://pybit.es/twitter_digest_201727.html" rel="alternate"></link><published>2017-07-09T17:52:00+02:00</published><updated>2017-07-09T17:52:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-09:/twitter_digest_201727.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don‚Äôt think I could start this digest with any other tweet!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#100daysofcode" target="_blank"&gt;#100daysofcode&lt;/a&gt; + 200 Days of PyBites! We recap the challenge, 10 stand out scripts and our next project here &lt;a href="https://t.co/RNTI13cjvm" title="https://t.co/RNTI13cjvm" target="_blank"&gt;https://t.co/RNTI13cjvm&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/883308644883812352" data-datetime="2017-07-07T12:56:06+00:00"&gt;July 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@GKLauraF:" target="_blank"&gt;@GKLauraF:&lt;/a&gt; Saw this interesting project featured in &lt;a href="https://twitter.com/@PythonWeekly" target="_blank"&gt;@PythonWeekly&lt;/a&gt; &lt;a href="https://t.co/I3KqG8UNHc" title="https://t.co/I3KqG8UNHc" target="_blank"&gt;https://t.co/I3KqG8UNHc&lt;/a&gt; &lt;a href="https://twitter.com/search/#github" target="_blank"&gt;#github&lt;/a&gt; &lt;a href="https://twitter.com/search/#RaspberryPi" target="_blank"&gt;#RaspberryPi&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/883069922775109634" data-datetime="2017-07-06T21:07:30+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Update: Animated version of previous tweet to show steps sequentially. &lt;a href="https://t.co/PIp63byPLH" title="https://t.co/PIp63byPLH" target="_blank"&gt;https://t.co/PIp63byPLH&lt;/a&gt; &lt;a href="https://t.co/Xqx3cqLUnQ" title="https://t.co/Xqx3cqLUnQ" target="_blank"&gt;https://t.co/Xqx3cqLUnQ&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/883793455897620484" data-datetime="2017-07-08T21:02:34+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;scikit-plot: An &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; library to add plotting functionality to scikit-learn objects. &lt;a href="https://twitter.com/search/#dataviz‚Ä¶" target="_blank"&gt;#dataviz‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/Bba5apZblT" title="https://t.co/Bba5apZblT" target="_blank"&gt;https://t.co/Bba5apZblT&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/883341575950151680" data-datetime="2017-07-07T15:06:58+00:00"&gt;July 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fullstackpython:" target="_blank"&gt;@fullstackpython:&lt;/a&gt; How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS &lt;a href="https://t.co/2wObQPPJDD" title="https://t.co/2wObQPPJDD" target="_blank"&gt;https://t.co/2wObQPPJDD&lt;/a&gt; &lt;a href="https://t.co/dIVp0zgbkk" title="https://t.co/dIVp0zgbkk" target="_blank"&gt;https://t.co/dIVp0zgbkk&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/883758485430730752" data-datetime="2017-07-08T18:43:37+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A very simple Lisp interpreter in 250 lines of Python. Cool exercise &amp;amp; well documented! &lt;a href="https://t.co/4D2CUEtFdY" title="https://t.co/4D2CUEtFdY" target="_blank"&gt;https://t.co/4D2CUEtFdY&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/883746255146557443" data-datetime="2017-07-08T17:55:01+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 days of algorithms - the challenge is over. &lt;a href="https://t.co/6DguVcE5IA" title="https://t.co/6DguVcE5IA" target="_blank"&gt;https://t.co/6DguVcE5IA&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/883734500575981568" data-datetime="2017-07-08T17:08:18+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Five Tips To Get You Started With Jupyter ... &lt;a href="https://t.co/bluM53gJqo" title="https://t.co/bluM53gJqo" target="_blank"&gt;https://t.co/bluM53gJqo&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#visualization" target="_blank"&gt;#visualization&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/883056320735203329" data-datetime="2017-07-06T20:13:27+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Take ten minutes to improve your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; and math skills. Get schooled by Mark Dickinson. &lt;a href="https://t.co/BoE236tL07" title="https://t.co/BoE236tL07" target="_blank"&gt;https://t.co/BoE236tL07&lt;/a&gt;&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/881502724919054337" data-datetime="2017-07-02T13:20:01+00:00"&gt;July 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Fourth Beta of "Python Testing with pytest" now available. &lt;a href="https://t.co/lwcq9i1quR" title="https://t.co/lwcq9i1quR" target="_blank"&gt;https://t.co/lwcq9i1quR&lt;/a&gt; &lt;a href="https://t.co/3FHUhReRGY" title="https://t.co/3FHUhReRGY" target="_blank"&gt;https://t.co/3FHUhReRGY&lt;/a&gt;&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/883096179671678976" data-datetime="2017-07-06T22:51:51+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to use Python &amp;amp; Flask to upload files to AWS S3 &lt;a href="https://t.co/1jedW8x9k8" title="https://t.co/1jedW8x9k8" target="_blank"&gt;https://t.co/1jedW8x9k8&lt;/a&gt; &lt;a href="https://t.co/QL68jyxqiE" title="https://t.co/QL68jyxqiE" target="_blank"&gt;https://t.co/QL68jyxqiE&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/883677811336241155" data-datetime="2017-07-08T13:23:02+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@APIguy:" target="_blank"&gt;@APIguy:&lt;/a&gt; If you're not already using &lt;a href="https://twitter.com/search/#pipenv" target="_blank"&gt;#pipenv&lt;/a&gt; in your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; workflow...start right now. Thanks &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; &lt;a href="https://t.co/hgl4zk1YBH" title="https://t.co/hgl4zk1YBH" target="_blank"&gt;https://t.co/hgl4zk1YBH&lt;/a&gt;&lt;/p&gt;‚Äî Kenneth Reitz üêç (@kennethreitz) &lt;a href="https://twitter.com/kennethreitz/status/882641719396892672" data-datetime="2017-07-05T16:45:59+00:00"&gt;July 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;404 link detector with scrapy &lt;a href="https://t.co/T6iI1E1A5K" title="https://t.co/T6iI1E1A5K" target="_blank"&gt;https://t.co/T6iI1E1A5K&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/883083251966922752" data-datetime="2017-07-06T22:00:28+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Create XKCD-like plots with &lt;a href="https://twitter.com/search/#matplotlib:" target="_blank"&gt;#matplotlib:&lt;/a&gt; &lt;a href="https://t.co/AzSFgaof7W" title="https://t.co/AzSFgaof7W" target="_blank"&gt;https://t.co/AzSFgaof7W&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/19OX0Hy8k8" title="https://t.co/19OX0Hy8k8" target="_blank"&gt;https://t.co/19OX0Hy8k8&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/882871740468035584" data-datetime="2017-07-06T08:00:00+00:00"&gt;July 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ankurb:" target="_blank"&gt;@ankurb:&lt;/a&gt; I've been trying to get all Python devs on our team to laugh at this: What do you call a folder of unrelated Django code? Djan‚Ä¶&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/883755656729292801" data-datetime="2017-07-08T18:32:22+00:00"&gt;July 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@vboykis:" target="_blank"&gt;@vboykis:&lt;/a&gt; Disciplining a child: 1950s: Spanking 1970s: Go to your room 1990s: Timeout 2010s: &lt;a href="https://t.co/snBCYJymhG" title="https://t.co/snBCYJymhG" target="_blank"&gt;https://t.co/snBCYJymhG&lt;/a&gt;&lt;/p&gt;‚Äî Vincent Driessen (@nvie) &lt;a href="https://twitter.com/nvie/status/882501558050721792" data-datetime="2017-07-05T07:29:02+00:00"&gt;July 05, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pybites"></category><category term="raspberry pi"></category><category term="matplotlib"></category><category term="scikit"></category><category term="Django"></category><category term="flask"></category><category term="ubuntu"></category><category term="Lisp"></category><category term="algorithms"></category><category term="math"></category><category term="pytest"></category><category term="AWS"></category><category term="scrapy"></category><category term="jupyter"></category></entry><entry><title>200 Days of PyBites, 100 Days of Code and our Next Project</title><link href="https://pybit.es/special-100days-of-code.html" rel="alternate"></link><published>2017-07-07T13:23:00+02:00</published><updated>2017-07-07T13:23:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-07:/special-100days-of-code.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/pybites/status/883219041912987648"&gt;We did it!&lt;/a&gt; #100DaysOfCode is done: 5K lines of code, 100 scripts. Just on the day PyBites turns 200 days. In this article we will share our learning on this major project and announce our next 100 days effort ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;We highly recommend doing 100 Days no matter your level. Being aspiring or experienced programmers, you need deliberate practice. A lot of it. We can now assure you that 100Days makes you practice. And with the public commitment it's also a way to enhance your portfolio. - PyBites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/pybites/status/883219041912987648"&gt;We did it!&lt;/a&gt; #100DaysOfCode is done: 5K lines of code, 100 scripts. Just on the day PyBites turns 200 days. In this article we will share our learning on this major project and announce our next 100 days effort ...&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pybit.es/special-100days.html"&gt;Last 100 days celebration&lt;/a&gt; we rewarded ourselves with a challenge: do the &lt;a href="https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4"&gt;100 Days of Code Challenge&lt;/a&gt;. Today is &lt;em&gt;Day 100&lt;/em&gt; and we confirm: &lt;em&gt;mission accomplished&lt;/em&gt;. With busy schedules it was not always easy, but we delivered. More on this in the Retrospective towards the end. First let us break it down ...&lt;/p&gt;
&lt;h2&gt;Stats&lt;/h2&gt;
&lt;p&gt;Here is our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100DaysOfCode repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/100"&gt;We wrote roughly 5K lines of code&lt;/a&gt;, divided into 100 scripts, one each day:&lt;/p&gt;
&lt;p&gt;&lt;img alt="distribution of LOC per script" src="https://pybit.es/images/100d_histogram.png"&gt;&lt;/p&gt;
&lt;p&gt;We &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/007"&gt;auto-tweeted&lt;/a&gt; our progress each day which was tracked in our &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/LOG.md"&gt;log file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/096"&gt;most popular tweets&lt;/a&gt; were: &lt;/p&gt;
&lt;p&gt;&lt;img alt="most popular tweets" src="https://pybit.es/images/100d_most_popular.png"&gt;&lt;/p&gt;
&lt;h2&gt;Module Index&lt;/h2&gt;
&lt;p&gt;We ended up using exactly 100 modules as well (weird coincidence LOL):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pypi&lt;/span&gt;      &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;42.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="n"&gt;stdlib&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;38.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="n"&gt;own&lt;/span&gt;       &lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt;
&lt;span class="o"&gt;------------------------------&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the full index &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/021/index.txt"&gt;of used modules&lt;/a&gt;. Here you can pick your module and go directly to the days where we used it. &lt;/p&gt;
&lt;p&gt;Find something useful? You can thank us by starring the repo. &lt;/p&gt;
&lt;p&gt;See any issue or things we can improve? Fork the repo and make a Pull Request. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do notice&lt;/em&gt; that some scripts are in a pretty basic state. Time was not always on our side. We need a round 2 to do some cleanup. Bear   with us ...&lt;/p&gt;
&lt;h2&gt;Showcase of 10 Utilities&lt;/h2&gt;
&lt;p&gt;Here are some scripts we specially liked:&lt;/p&gt;
&lt;h3&gt;1. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/086"&gt;Day 086&lt;/a&gt; - Twitter Archive Stats&lt;/h3&gt;
&lt;p&gt;Script to pull some quick stats from a #Twitter Archive CSV&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Using Counter and csv.Dictreader. Simple exercise, yet useful data. You can run it yourself downloading your Twitter Archive in Settings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Twitter archive stats" src="https://pybit.es/images/100d_twitter-archive.png"&gt;&lt;/p&gt;
&lt;p&gt;(refactored into a package later - see &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/093"&gt;Day 093&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;2. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/014"&gt;Day 014&lt;/a&gt; - Lynda.com new Python course auto-tweeter&lt;/h3&gt;
&lt;p&gt;Script to automatically tweet out new @lynda (#Python) titles&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Feedparser is awesome. Want to run it with filter on Python. Abstracted twitter config away in repo's common dir (re-use).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were &lt;em&gt;surprised&lt;/em&gt; to find &lt;em&gt;us&lt;/em&gt; tweeting out this one yesterday ;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="lynda notifications" src="https://pybit.es/images/100d_lynda.png"&gt;&lt;/p&gt;
&lt;h3&gt;3. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/059"&gt;Day 059&lt;/a&gt; - Send an SMS with Twilio&lt;/h3&gt;
&lt;p&gt;Using the #Twilio #API to send SMS messages&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Prework for another app where I want to use Twilio to send reminder notification and text friends :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="twilio API" src="https://pybit.es/images/100d_twilio.png"&gt;&lt;/p&gt;
&lt;h3&gt;4. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Day 013&lt;/a&gt; - Weather app&lt;/h3&gt;
&lt;p&gt;A simple #Flask app to compare weather of 2 cities (using OpenWeatherMap #API)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) This was a nice follow-up of 012, making it more generic (support any city), using Jinja templating, Flask form handling, and of course a good chunk of timezone handling (for sunset and sunrise)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="weather compare app" src="https://pybit.es/images/weather-app.png"&gt;&lt;/p&gt;
&lt;p&gt;This led to &lt;a href="https://pybit.es/flask-simple-weather-app.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;5. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/099"&gt;Day 099&lt;/a&gt; - Flask photo gallery&lt;/h3&gt;
&lt;p&gt;Simple #Flask app to display photos in a directory&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) This is a very basic app to demonstrate displaying images using Flask and Jinja templates. All photos need to be stored in the "static" dir within the Flask folder structure. The glob module is used to parse the photo dir. The app can and will be expanded and refactored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="flask gallery" src="https://pybit.es/images/100d_photo_gallery.png"&gt;&lt;/p&gt;
&lt;h3&gt;6. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/003"&gt;Day 003&lt;/a&gt; - Gif image creator&lt;/h3&gt;
&lt;p&gt;Script to generate a gif from various png/jpg images&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Useful for blog, awesome: pip install imageio, cli arg interface is more code :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="example gif made with script" src="https://pybit.es/images/slackbot.gif"&gt;&lt;/p&gt;
&lt;h3&gt;7. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/033"&gt;Day 033&lt;/a&gt; - Water reminder app&lt;/h3&gt;
&lt;p&gt;I need to drink more water at work so I wrote a #Python #script to remind (spam) me every hour&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A simple script using MIME and a cron job (read the readme.txt) to remind me to drink more water at work! Doesn't email on the weekends or before/after hours. Over the top? Maybe. Satisfying? Hell yes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="water drinking app" src="https://pybit.es/images/100d_waterdrinking-app.png"&gt;&lt;/p&gt;
&lt;h3&gt;8. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/022"&gt;Day 022&lt;/a&gt; - Amazon affiliation link generator&lt;/h3&gt;
&lt;p&gt;Create and paste #Amazon affiliation link to clipboard #pyperclip @AlSweigart&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A nice little utility to copy an take Amazon link from clipboard, convert it into an affiliation link and paste it back to clipboard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="amazon affiliation link generator" src="https://pybit.es/images/100d_affiliation_link_creator.png"&gt;&lt;/p&gt;
&lt;h3&gt;9. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/074"&gt;Day 074&lt;/a&gt; - Making a ecard with Pillow&lt;/h3&gt;
&lt;p&gt;Using Pillow to add text and opacity to an image = your own cards&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Played with the Pillow module. Script to let user enter an image path (or url) and text to put on the image. Pillow does the rest. Could be a useful recipe to make your own Birthday cards :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="putting text on image with PIL" src="https://pybit.es/images/100d_pillow.png"&gt;&lt;/p&gt;
&lt;h3&gt;10. &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/080"&gt;Day 080&lt;/a&gt; - "Is this Bob or Julian?"&lt;/h3&gt;
&lt;p&gt;"Is this Bob or Julian?" - script to reveal who of @pybites tweets&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) Fun little exercise that started with Anthony Shaw asking who he was talking to - it actually became more involved turning/testing out location on our tweets and adding exception handling ... nice practice! (and a funny new service for our PyBites community)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="who tweets script" src="https://pybit.es/images/100d_twotweeted.png"&gt;&lt;/p&gt;
&lt;h3&gt;Bonus &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/009"&gt;Day 009&lt;/a&gt; - as we initiated this post ...&lt;/h3&gt;
&lt;p&gt;Interactive script to create a new Pelican blog article&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(log) A lot of known concepts, but nice to bring a lot of functionality together, and above all a really useful script for our blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we started this post: HAPPY BIRTHDAY!&lt;/p&gt;
&lt;p&gt;&lt;img alt="easter egg" src="https://pybit.es/images/100d_newpost.png"&gt;&lt;/p&gt;
&lt;h2&gt;Retrospective&lt;/h2&gt;
&lt;p&gt;As you can see, not only did we get a lot of code written but we had a hell of a lot of fun doing it!&lt;/p&gt;
&lt;p&gt;That‚Äôs the only way we got to 100 days with our sanity intact. It wasn‚Äôt easy in the least: Family, Kids, new jobs, and the usual PyBites responsibilities didn‚Äôt leave us with a heap of time but we managed to push and get there in the end. Again, the fun factor is what made it achievable.&lt;/p&gt;
&lt;p&gt;Looking back on the 100 days, it‚Äôs quite shocking to see how much we accomplished and learned. Julian developed an almost obsessive love affair with Flask (not a hip flask) and Bob created some truly outstanding, fully functional applications.&lt;/p&gt;
&lt;p&gt;The challenge also gave us the opportunity to scratch our own itches. Julian was able to create a &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/045"&gt;Steam Games notification service&lt;/a&gt; for himself and Bob &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/061"&gt;assigned himself reading goals using Twilio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it was insanely tough, the payoff has been huge! We‚Äôve honed our skills, created tools, learned new modules and even developed relationships with other coders - all from participating in the challenge.&lt;/p&gt;
&lt;p&gt;We encourage anyone with a love of programming to take the 100 days of code challenge. Dedicating ourselves to a working script every day was a bit on the crazy side though and is by no means a requirement for the challenge. Just remember, &lt;strong&gt;anything&lt;/strong&gt; is better than nothing so give it a crack!&lt;/p&gt;
&lt;h2&gt;next(PyBites.projects) ?!&lt;/h2&gt;
&lt;p&gt;Yes, the rumors are true: our next 100 days project will be around learning Django. &lt;/p&gt;
&lt;p&gt;We will work incrementally on 2 or 3 projects which we will announce as we go. We will also tailor some articles and code challenges around this effort, so you can learn with us. &lt;/p&gt;
&lt;p&gt;This will be a lot of fun and with this major project under our belt, we're sure that we will learn a thing or two about Django which we hope you can benefit from too. &lt;/p&gt;
&lt;p&gt;Stay tuned ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="pybites"></category><category term="100DaysOfCode"></category><category term="learning"></category><category term="modules"></category><category term="special"></category><category term="milestone"></category><category term="lessons"></category><category term="community"></category><category term="automation"></category><category term="utilities"></category><category term="scripts"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI</title><link href="https://pybit.es/codechallenge26.html" rel="alternate"></link><published>2017-07-04T20:30:00+02:00</published><updated>2017-07-04T20:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-04:/codechallenge26.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it‚Äôs about time we shared the spotlight with GUIs. This week let‚Äôs take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it‚Äôs about time we shared the spotlight with GUIs. This week let‚Äôs take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;We‚Äôre keeping this simple as this will be the first foray into GUIs for a lot of you (us included). All we‚Äôre asking you to do is create a simple GUI. Done!&lt;/p&gt;
&lt;p&gt;You can use whatever framework or toolkit that floats your boat, just be creative and come up with a plain old GUI screen.&lt;/p&gt;
&lt;p&gt;You could use an image as a backdrop with some overlays or even create your own type of Game ‚ÄúMain Menu‚Äù screen. The choice is yours.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;We imagine that this may be a bit too simple for some of you, or may just be quicker to achieve than you thought. If that‚Äôs the case, why not add some functionality to the GUI? Consider this a bonus objective - not mandatory in the least.&lt;/p&gt;
&lt;p&gt;For example, with the Game Main Menu screen, you could make a ‚ÄúCredits‚Äù button that then links to another screen which scrolls through fictional names.&lt;/p&gt;
&lt;p&gt;Create a stopwatch GUI that actually has timing functionality. How about a calculator?&lt;/p&gt;
&lt;p&gt;Whatever you decide, create a working GUI with added functionality and earn extra kudos.&lt;/p&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The two main toolkits that come to mind are &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; and &lt;a href="http://pygame.org/"&gt;PyGame&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out this comprehensive &lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;list of Frameworks/Toolkits&lt;/a&gt; to get started.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="beginners"></category><category term="GUI"></category><category term="frameworks"></category><category term="toolkits"></category><category term="tkinter"></category><category term="pygame"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies - Review</title><link href="https://pybit.es/codechallenge25_review.html" rel="alternate"></link><published>2017-07-03T11:20:00+02:00</published><updated>2017-07-03T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-03:/codechallenge25_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;The Movie Database (TMDb)&lt;/h3&gt;
&lt;p&gt;This challenge we focused on &lt;a href="https://www.themoviedb.org/documentation/api"&gt;TMDb's API&lt;/a&gt; to send html emails of movies / tv series. We decided to query 4 API endpoints: now playing movies, upcoming movies, popular TV series, and on-the-air TV series. &lt;/p&gt;
&lt;p&gt;We used 2 shelves for caching: movie info and items sent (to avoid duplicates in the mails). We also got to play with decorators and classes. We used &lt;a href="https://pypi.python.org/pypi/tmdbsimple"&gt;tmdbsimple&lt;/a&gt; to interface with TMDb's API.&lt;/p&gt;
&lt;p&gt;We followed &lt;a href="https://pybit.es/python-packaging.html"&gt;what we learned about packaging&lt;/a&gt; to structure our modules. Having a notifications package now makes it easier to add a Twitter bot later on for example.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/pybites/challenges/tree/community/25/bbelderbos"&gt;here&lt;/a&gt; and this is a screenshot of part of the notification email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="upcoming movies" src="https://pybit.es/images/upcoming-movies.png"&gt;&lt;/p&gt;
&lt;p&gt;We did not have time to build a front-end to add filters. We did start a login system in Flask but ran out of time. I think this would be a nice exercise for us learning Django. To be continued ...&lt;/p&gt;
&lt;h3&gt;PRs&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/santiagobenitez"&gt;santiagobenitez&lt;/a&gt;: a single script allowing to filter on genre, year and vote average, using &lt;code&gt;argparse&lt;/code&gt;. It uses &lt;a href="https://www.mailgun.com/"&gt;mailgun&lt;/a&gt; - "The Email Service For Developers" - for emailing.&lt;/p&gt;
&lt;p&gt;His script demonstrates that it's not necessary to use a API wrapper package. He uses &lt;code&gt;requests&lt;/code&gt; which leads to compact code like: &lt;code&gt;movies_resp = requests.get(upcoming_movies_url, params=query_params)&lt;/code&gt; to query TMDb's API.&lt;/p&gt;
&lt;p&gt;You can checkout the code &lt;a href="https://github.com/pybites/challenges/blob/community/25/santiagobenitez/movies.py"&gt;here&lt;/a&gt;. We read in the PR: "This is my first ever python code ..." - really? Good job! &lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;This was a challenge to sink your teeth in, there were many options, lot to code. This week we try to keep it simpler making the challenge smaller, not necessarily easier. We will also change topics a bit to do something entirely different: build a simple GUI app. Stay tuned ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="apis"></category><category term="argparse"></category><category term="requests"></category><category term="mailgun"></category></entry><entry><title>Twitter digest 2017 week 26</title><link href="https://pybit.es/twitter_digest_201726.html" rel="alternate"></link><published>2017-07-02T17:52:00+02:00</published><updated>2017-07-02T17:52:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-02:/twitter_digest_201726.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How cool is this? Too bad that I don't have a mac, I could rule my network! Wonder if I could get it to work on Pyt‚Ä¶ &lt;a href="https://t.co/H1PKdKDBpg" title="https://t.co/H1PKdKDBpg" target="_blank"&gt;https://t.co/H1PKdKDBpg&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/881177568900239360" data-datetime="2017-07-01T15:47:58+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@johnjones4:" target="_blank"&gt;@johnjones4:&lt;/a&gt; An Interview With PGCLI and MYCLI Creator Amjith Ramanujam &lt;a href="https://t.co/fYeJDj2MWa" title="https://t.co/fYeJDj2MWa" target="_blank"&gt;https://t.co/fYeJDj2MWa&lt;/a&gt;&lt;/p&gt;‚Äî Amjith (@amjithr) &lt;a href="https://twitter.com/amjithr/status/879767723357519872" data-datetime="2017-06-27T18:25:45+00:00"&gt;June 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Over 15,000 kids across every province and territory created these projects during Canada Learning Code Week! (And‚Ä¶ &lt;a href="https://t.co/hbIeOFsGfG" title="https://t.co/hbIeOFsGfG" target="_blank"&gt;https://t.co/hbIeOFsGfG&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/881135310268022784" data-datetime="2017-07-01T13:00:03+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Effectively using&amp;nbsp;matplotlib &lt;a href="https://t.co/IJU1TKN7Gq" title="https://t.co/IJU1TKN7Gq" target="_blank"&gt;https://t.co/IJU1TKN7Gq&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/880761667373719552" data-datetime="2017-06-30T12:15:19+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@tjukanov:" target="_blank"&gt;@tjukanov:&lt;/a&gt; Optimal routes from &lt;a href="https://twitter.com/search/#London" target="_blank"&gt;#London&lt;/a&gt; to ~2000 locations in the UK. &lt;a href="https://t.co/snUvuzeDGb" title="https://t.co/snUvuzeDGb" target="_blank"&gt;https://t.co/snUvuzeDGb&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/880445916515323906" data-datetime="2017-06-29T15:20:39+00:00"&gt;June 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@VictorStinner:" target="_blank"&gt;@VictorStinner:&lt;/a&gt; Yeah! &lt;a href="https://twitter.com/@methane" target="_blank"&gt;@methane&lt;/a&gt; just made Python 3.7 startup 30% faster on macOS! (5% faster on Linux) &lt;a href="https://t.co/jM6lxowIog" title="https://t.co/jM6lxowIog" target="_blank"&gt;https://t.co/jM6lxowIog&lt;/a&gt; Don't impo‚Ä¶&lt;/p&gt;‚Äî Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/status/880180502073933824" data-datetime="2017-06-28T21:45:59+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Just launched a new course! &lt;a href="https://twitter.com/@MongoDB" target="_blank"&gt;@MongoDB&lt;/a&gt; for Python for Developers covering pymongo, &lt;a href="https://twitter.com/search/#mongoengine," target="_blank"&gt;#mongoengine,&lt;/a&gt; deployments and more &lt;a href="https:‚Ä¶" title="https:‚Ä¶" target="_blank"&gt;https:‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/880842818087997440" data-datetime="2017-06-30T17:37:47+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Flask Skeleton - a simple Flask starter project (UPDATED!) &amp;gt;&amp;gt; &lt;a href="https://t.co/Srf57p6TPO" title="https://t.co/Srf57p6TPO" target="_blank"&gt;https://t.co/Srf57p6TPO&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#webdev" target="_blank"&gt;#webdev&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/881322544724357120" data-datetime="2017-07-02T01:24:03+00:00"&gt;July 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building a Social Network Content Recommendation Service Using Factorisation Machines - Conor Duke &lt;a href="https://twitter.com/search/#pyconie" target="_blank"&gt;#pyconie&lt;/a&gt; &lt;a href="https://twitter.com/search/#pydata" target="_blank"&gt;#pydata&lt;/a&gt; &lt;a href="https://t.co/jRy1Vyo1E6" title="https://t.co/jRy1Vyo1E6" target="_blank"&gt;https://t.co/jRy1Vyo1E6&lt;/a&gt;&lt;/p&gt;‚Äî Python Ireland (@PythonIreland) &lt;a href="https://twitter.com/PythonIreland/status/880794326355279872" data-datetime="2017-06-30T14:25:06+00:00"&gt;June 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An intro to static type checking in Python 3.6: &lt;a href="https://t.co/pBxqmNDEuu" title="https://t.co/pBxqmNDEuu" target="_blank"&gt;https://t.co/pBxqmNDEuu&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/881209539483365376" data-datetime="2017-07-01T17:55:00+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brianokken:" target="_blank"&gt;@brianokken:&lt;/a&gt; You know you've gotten tons of value from Miguel's instruction. Pay it forward for future devs and keep the tutorial curren‚Ä¶&lt;/p&gt;‚Äî Brian Okken (@brianokken) &lt;a href="https://twitter.com/brianokken/status/879924323946971136" data-datetime="2017-06-28T04:48:01+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Multiple constructors: the pythonic way? [Score:13] &lt;a href="https://t.co/GhVPRY4S41" title="https://t.co/GhVPRY4S41" target="_blank"&gt;https://t.co/GhVPRY4S41&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/879473463844638722" data-datetime="2017-06-26T22:56:28+00:00"&gt;June 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; 3 gripe: List indexing is as slow as a dict lookup timeit -s 's=[0]' 's[0]' # 0.032 usec timeit -s 's={0:0}' 's[0]' # 0.0331 usec&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/879954202780368897" data-datetime="2017-06-28T06:46:45+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An overview of Vim (especially for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; development) &lt;a href="https://t.co/bDeMdqGKCo" title="https://t.co/bDeMdqGKCo" target="_blank"&gt;https://t.co/bDeMdqGKCo&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/880080138402017281" data-datetime="2017-06-28T15:07:10+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;kube-shell - Kubernetes shell: An integrated shell for working with the Kubernetes CLI &lt;a href="https://t.co/Hmx2U2w7JS" title="https://t.co/Hmx2U2w7JS" target="_blank"&gt;https://t.co/Hmx2U2w7JS&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/881256500139896832" data-datetime="2017-07-01T21:01:37+00:00"&gt;July 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Interesting!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Quora: Why did Pinterest move from Django to Flask: &lt;a href="https://t.co/LR3aLssbmD" title="https://t.co/LR3aLssbmD" target="_blank"&gt;https://t.co/LR3aLssbmD&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/880207939943968769" data-datetime="2017-06-28T23:35:01+00:00"&gt;June 28, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="code"></category><category term="Siri"></category><category term="voice"></category><category term="PGCLI"></category><category term="MYCLI"></category><category term="matplotlib"></category><category term="data science"></category><category term="MacOS"></category><category term="MongoDB"></category><category term="pymongo"></category><category term="training"></category><category term="Flask"></category><category term="pydata"></category><category term="type checking"></category><category term="Django"></category><category term="vim"></category><category term="constructors"></category><category term="Kubernetes"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies</title><link href="https://pybit.es/codechallenge25.html" rel="alternate"></link><published>2017-06-26T13:40:00+02:00</published><updated>2017-06-26T13:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge25.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: find a resource that updates with now playing and/or upcoming movies and consume it. Make a simple notification mechanism. We think an email would be best, but you could also try a bot of some kind (Twitter, Slack, ...). You are more into series? That's fine too. You could for example make a notification service around air dates of TV shows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: add command line switches to the script to filter on things like genre, director, actor, country, rating, streaming service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: make a subscription service web app where the filters are check boxes and subscribers get customized emails based on their stored preferences.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google &lt;em&gt;now playing/upcoming movies/series&lt;/em&gt; and you get a ton of resources. Just a few examples: &lt;a href="http://www.fandango.com/moviesintheaters"&gt;Fadango&lt;/a&gt;, &lt;a href="http://www.imdb.com/movies-coming-soon/"&gt;Imdb&lt;/a&gt;, &lt;a href="https://www.rottentomatoes.com/browse/upcoming/"&gt;Rotten tomatoes&lt;/a&gt;, etc. For series you could use &lt;a href="http://www.airdates.tv/"&gt;airdates.tv&lt;/a&gt; for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the resource has an API we recommend using it. One nice API for example is &lt;a href="https://www.themoviedb.org/?language=en"&gt;The Movie DB&lt;/a&gt;. Another open database you could use is &lt;a href="http://thetvdb.com/"&gt;TheTVDB.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to make a bot, we did a few, just search &lt;a href="https://pybit.es/pages/articles.html"&gt;our articles&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="imdb"></category><category term="omdb"></category><category term="apis"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class - Review</title><link href="https://pybit.es/codechallenge24_review.html" rel="alternate"></link><published>2017-06-26T10:00:00+02:00</published><updated>2017-06-26T10:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge24_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge we coupled to &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;our guest post&lt;/a&gt; on Dan Bader's blog.&lt;/p&gt;
&lt;h3&gt;Account class&lt;/h3&gt;
&lt;p&gt;First of all you can follow along with the code in the article &lt;a href="https://github.com/pybites/dunders"&gt;here&lt;/a&gt; (class and notebook). One thing we learned from the comments on the article is that __reversed__ should reverse the normal iteration. So newest to oldest, not by transaction amount (&lt;a href="https://github.com/pybites/dunders/commit/fced4f1f9a22270eb57bf3342289568e5ed7f113"&gt;fix&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;As there were no PR submissions other than ours we keep it short. &lt;/p&gt;
&lt;p&gt;We made a &lt;a href="https://github.com/pybites/challenges/tree/community/24/bbelderbos"&gt;Developer class&lt;/a&gt; pretty similar to the Account class example. &lt;/p&gt;
&lt;p&gt;Funny fact is it was meant for our new &lt;a href="https://github.com/pybites/karmabot"&gt;Karma Bot&lt;/a&gt; but &lt;a href="https://pybit.es/slack-karma-bot.html"&gt;we implementing it without using dunders&lt;/a&gt;! So it is good to note that you don't always need them. &lt;/p&gt;
&lt;p&gt;Even a word of caution is warranted as pointed out by &lt;em&gt;_seemethere&lt;/em&gt;  on the article's &lt;a href="https://www.reddit.com/r/Python/comments/6ih6cj/enriching_your_python_classes_with_dunder_magic/"&gt;Reddit thread&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would say that you should be careful with magic methods.&lt;/p&gt;
&lt;p&gt;On one hand they can be extremely useful and extend your objects and on the other hand they can make using your library very difficult and hard to understand.&lt;/p&gt;
&lt;p&gt;Use them where you feel as though they make sense and not just because it would be cool to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Useful tool, powerful and elegant, but use wisely.&lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for this week's code challenge where we get you to code up a weekly digest email of now playing/ upcoming movies or series.&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Twitter digest 2017 week 25</title><link href="https://pybit.es/twitter_digest_201725.html" rel="alternate"></link><published>2017-06-25T16:53:00+02:00</published><updated>2017-06-25T16:53:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-25:/twitter_digest_201725.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@DataSciFact:" target="_blank"&gt;@DataSciFact:&lt;/a&gt; Python plotting for exploratory analysis &lt;a href="https://t.co/kRlFNQKTNK" title="https://t.co/kRlFNQKTNK" target="_blank"&gt;https://t.co/kRlFNQKTNK&lt;/a&gt; &lt;a href="https://t.co/42LEk3cevR" title="https://t.co/42LEk3cevR" target="_blank"&gt;https://t.co/42LEk3cevR&lt;/a&gt;&lt;/p&gt;‚Äî Scientific Python (@SciPyTip) &lt;a href="https://twitter.com/SciPyTip/status/877898032070766596" data-datetime="2017-06-22T14:36:16+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Introduction to the Peewee &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; object-relational mapper (ORM) &lt;a href="https://t.co/UDpClFnhLh" title="https://t.co/UDpClFnhLh" target="_blank"&gt;https://t.co/UDpClFnhLh&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/878670149271924737" data-datetime="2017-06-24T17:44:23+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It is ridiculously easy to generate any audio signal using Python ‚Äì &lt;a href="https://t.co/JEEgjW4ES3" title="https://t.co/JEEgjW4ES3" target="_blank"&gt;https://t.co/JEEgjW4ES3&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/878682638999048192" data-datetime="2017-06-24T18:34:00+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;CONGRATS BOB ON THIS INCREDIBLE ARTICLE!!!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üì∞üêç Make your classes more Pythonic with this tutorial on dunder methods &lt;a href="https://t.co/mpxvq58ZMn" title="https://t.co/mpxvq58ZMn" target="_blank"&gt;https://t.co/mpxvq58ZMn&lt;/a&gt; by &lt;a href="https://twitter.com/@bbelderbos" target="_blank"&gt;@bbelderbos&lt;/a&gt;&lt;/p&gt;‚Äî Bob Belderbos (@bbelderbos) &lt;a href="https://twitter.com/bbelderbos/status/877778746673176576" data-datetime="2017-06-22T06:42:16+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Published a guest post: Yelp Reviews: Authorship Attribution with Python and scikit-learn &lt;a href="https://t.co/pPAiWCrdJ1" title="https://t.co/pPAiWCrdJ1" target="_blank"&gt;https://t.co/pPAiWCrdJ1&lt;/a&gt; &lt;a href="https://t.co/mlTNKlEGcL" title="https://t.co/mlTNKlEGcL" target="_blank"&gt;https://t.co/mlTNKlEGcL&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/877571229527552000" data-datetime="2017-06-21T16:57:40+00:00"&gt;June 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; socketserver: A module in Python's std lib that makes writing socket-based network servers easier: &lt;a href="https://t.co/s3gLrBS2PX" title="https://t.co/s3gLrBS2PX" target="_blank"&gt;https://t.co/s3gLrBS2PX&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/878746025674014720" data-datetime="2017-06-24T22:45:53+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django vs Flask, a practitioner's perspective &lt;a href="https://t.co/SXrWB4XWph" title="https://t.co/SXrWB4XWph" target="_blank"&gt;https://t.co/SXrWB4XWph&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/877973723462029312" data-datetime="2017-06-22T19:37:02+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python variables got you confused? 1) assignment never copies. 2) lots of things are assignments. Full details: &lt;a href="https://t.co/Ayxi0TRfFg" title="https://t.co/Ayxi0TRfFg" target="_blank"&gt;https://t.co/Ayxi0TRfFg&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/877581946452234241" data-datetime="2017-06-21T17:40:15+00:00"&gt;June 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build an IoT Grow-box on a budget for the holidays with your &lt;a href="https://twitter.com/@Raspberry_Pi" target="_blank"&gt;@Raspberry_Pi&lt;/a&gt; and Python. &lt;a href="https://t.co/gRWtDDOVGB" title="https://t.co/gRWtDDOVGB" target="_blank"&gt;https://t.co/gRWtDDOVGB&lt;/a&gt; &lt;a href="https://t.co/3NEk5oxvIE" title="https://t.co/3NEk5oxvIE" target="_blank"&gt;https://t.co/3NEk5oxvIE&lt;/a&gt;&lt;/p&gt;‚Äî Alex Ellis (@alexellisuk) &lt;a href="https://twitter.com/alexellisuk/status/878649599593938944" data-datetime="2017-06-24T16:22:43+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mikeloukides:" target="_blank"&gt;@mikeloukides:&lt;/a&gt; Using static type checking in Python 3.6 to find bugs before they find you: &lt;a href="https://t.co/RUZphqa1jS" title="https://t.co/RUZphqa1jS" target="_blank"&gt;https://t.co/RUZphqa1jS&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/878249577043828738" data-datetime="2017-06-23T13:53:10+00:00"&gt;June 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New location for the Python dev guide! &lt;a href="https://t.co/Mzxi0DM6tx" title="https://t.co/Mzxi0DM6tx" target="_blank"&gt;https://t.co/Mzxi0DM6tx&lt;/a&gt; Thanks &lt;a href="https://twitter.com/@brettsky" target="_blank"&gt;@brettsky&lt;/a&gt; and the PSF infrastructure team.&lt;/p&gt;‚Äî Guido van Rossum (@gvanrossum) &lt;a href="https://twitter.com/gvanrossum/status/877717256167243776" data-datetime="2017-06-22T02:37:55+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@plotlygraphs:" target="_blank"&gt;@plotlygraphs:&lt;/a&gt; üåü Announcement üåü Today we‚Äôre launching Dash: Create Reactive Web Apps in pure Python &lt;a href="https://t.co/CnRiQFSwcJ" title="https://t.co/CnRiQFSwcJ" target="_blank"&gt;https://t.co/CnRiQFSwcJ&lt;/a&gt; &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Michael Herman (@MikeHerman) &lt;a href="https://twitter.com/MikeHerman/status/877900677489594369" data-datetime="2017-06-22T14:46:46+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@adnan_hashmi:" target="_blank"&gt;@adnan_hashmi:&lt;/a&gt; GitHub Repo: Introduction to Geo-spatial Data with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/8dNfS1UGAl" title="https://t.co/8dNfS1UGAl" target="_blank"&gt;https://t.co/8dNfS1UGAl&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://‚Ä¶" title="https://‚Ä¶" target="_blank"&gt;https://‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/877978904279035906" data-datetime="2017-06-22T19:57:37+00:00"&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Solid üéØ - A comprehensive gradient-free optimization framework written in Python &lt;a href="https://t.co/DXXaxFP8X1" title="https://t.co/DXXaxFP8X1" target="_blank"&gt;https://t.co/DXXaxFP8X1&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/878766575330836481" data-datetime="2017-06-25T00:07:32+00:00"&gt;June 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@KirkDBorne:" target="_blank"&gt;@KirkDBorne:&lt;/a&gt; üåüAWESOMEüåü Essential Cheat Sheets for &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; and &lt;a href="https://twitter.com/search/#DeepLearning:" target="_blank"&gt;#DeepLearning:&lt;/a&gt; &lt;a href="https://t.co/fA1Dqx8mQC" title="https://t.co/fA1Dqx8mQC" target="_blank"&gt;https://t.co/fA1Dqx8mQC&lt;/a&gt; &lt;a href="https://twitter.com/search/#BigData" target="_blank"&gt;#BigData&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; by &lt;a href="https://twitter.com/@‚Ä¶" target="_blank"&gt;@‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Karlijn Willems (@willems_karlijn) &lt;a href="https://twitter.com/willems_karlijn/status/878367218970484738" data-datetime="2017-06-23T21:40:38+00:00"&gt;June 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;How freaking awesome is this?!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Want to take Pok√©mon to the next level? Create your own app like this student did on Code Studio! &lt;a href="https://t.co/mUxtBuZnnD" title="https://t.co/mUxtBuZnnD" target="_blank"&gt;https://t.co/mUxtBuZnnD&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/878613684313964544" data-datetime="2017-06-24T14:00:00+00:00"&gt;June 24, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="code"></category><category term="data analysis"></category><category term="audio"></category><category term="scikit"></category><category term="socketserver"></category><category term="Django"></category><category term="flask"></category><category term="Peewee"></category><category term="ORM"></category><category term="variables"></category><category term="raspberry pi"></category><category term="type checking"></category><category term="plotly"></category><category term="data science"></category><category term="machine learning"></category><category term="solid"></category><category term="cheatsheet"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class</title><link href="https://pybit.es/codechallenge24.html" rel="alternate"></link><published>2017-06-20T09:50:00+02:00</published><updated>2017-06-20T09:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-20:/codechallenge24.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;
&lt;h2&gt;What Are Dunder Methods?&lt;/h2&gt;
&lt;p&gt;To quote from our guest post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Python, special methods are a set of predefined methods you can use to enrich your classes. They are easy to recognize because they start and end with double underscores, for example &lt;code&gt;__init__&lt;/code&gt; or &lt;code&gt;__str__&lt;/code&gt;. .... This elegant design is known as the Python data model and lets developers tap into rich language features like sequences, iteration, operator overloading, attribute access, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: take an existing class you wrote or write one from scratch (other than Account), implementing at least construction, object representation and iteration using special methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate to Advanced: implement one or more of the other language features discussed in the article: operator overloading, method invocation, context management. And/or look at the &lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;data model documentation&lt;/a&gt; and try to implement one or more dunders not discussed in the article: attribute access, metaclasses or coroutines for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus: write some tests to verify the dunders you have implemented behave as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;New PR template&lt;/h3&gt;
&lt;p&gt;Note that when you do a PR you should see a short template asking for some meta data. We implemented that &lt;a href="https://pybit.es/codechallenge23_review.html"&gt;as part of code challenge 23&lt;/a&gt; to track our challenges and over time enrich our &lt;a href="https://pybit.es/pages/challenges.html"&gt;Challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API - Review</title><link href="https://pybit.es/codechallenge23_review.html" rel="alternate"></link><published>2017-06-18T21:32:00+02:00</published><updated>2017-06-18T21:32:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-18:/codechallenge23_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;More than just parsing data&lt;/h3&gt;
&lt;p&gt;This challenge was two in one: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We had to think about how to get data from our challenge takers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We had to code up the processing of this data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first point took us a bit of brainstorming, but we stumbled upon &lt;a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/"&gt;Github's PR template methodology&lt;/a&gt; we &lt;a href="https://github.com/pybites/challenges/commit/614b080a16da0b53187ebc93fd95239d18621c68"&gt;happily embraced&lt;/a&gt; (yeah "Simple is better than complex").&lt;/p&gt;
&lt;p&gt;The cool thing about this is that it puts the template in the comment field when you want to submit a PR:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template upon PR" src="https://pybit.es/images/pr-template1.png"&gt;&lt;/p&gt;
&lt;p&gt;Of course you can just nuke the template, but we think this is the best we can get: the folks that do PRs are probably in the best position to provide input on these metrics. Secondly if you provide a Google doc a click is an extra step. Doing it this way it's part of the process you're already following.&lt;/p&gt;
&lt;p&gt;Example of a filled in template in the PR submission: &lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template filled in" src="https://pybit.es/images/pr-template2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Github API&lt;/h3&gt;
&lt;p&gt;For interacting with the Github API we used the &lt;a href="https://github.com/PyGithub/PyGithub"&gt;PyGithub&lt;/a&gt; package which made this pretty easy (although it took some inspection of the various GH API endpoint objects to get to the relevant data).&lt;/p&gt;
&lt;p&gt;The code: in &lt;a href="https://github.com/pybites/challenges/blob/community/23/bbelderbos/challenge_stats.py"&gt;challenge_stats.py&lt;/a&gt; we get &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; object with &lt;code&gt;get_challenge_repo&lt;/code&gt;. From that we parse out the submissions with &lt;code&gt;get_submissions&lt;/code&gt; in which we loop through all PRs: &lt;code&gt;for pr in challenge_repo.get_pulls('all')&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To get the code challenge number we cannot rely on the PR title. Looking at the PR files we see that they are like: &lt;em&gt;challenge_number/GH_USER/filename&lt;/em&gt; (e.g. &lt;em&gt;23/bbelderbos/challenge_stats.py&lt;/em&gt;) so we parse it from there.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;_parse_template_response&lt;/code&gt; helper we parse the new feedback template with the help of &lt;a href="https://pybit.es/mastering-regex.html"&gt;some regex&lt;/a&gt;. We use a &lt;code&gt;defaultdict(dict)&lt;/code&gt; to store user responses per challenge number. The advantages are: we don't have to initialize keys, and user responses are uniquified this way.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;We only just used the template ourselves so we only have one response :)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;pprint&lt;/code&gt; we can see the structure of the submissions defaultdict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python challenge_stats.py
defaultdict&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;class &lt;span class="s1"&gt;&amp;#39;dict&amp;#39;&lt;/span&gt;&amp;gt;,
            &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;23&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bbelderbos&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;completed&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;difficulty_level&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;estimated_time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;i_stretched&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;other_feedback&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;another test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's where we leave it for now. This will be a handy script to get recorded stats of all PR submissions. When we have enough data, we can write some more code to parse these metrics and show (anonymous) averages on &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;PR: PyTrack&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt;: &lt;em&gt;PyTrack&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple project/task time tracker for Python 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/tree/community/23/clamytoe"&gt;on community branch&lt;/a&gt; | &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;original repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To quote the excellent Readme documentation: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Helps you keep track of how much time you spend on your projects and tasks. A sqlite database is used to track your time logs, and it is kept simple by only implementing as few commands as needed to get a full featured application. You can add/remove multiple projects, start/stop tracking any of them, or completely reset the database to start with a clean slate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We like how this works as a stopwatch, just stop and start to track a project, and it stores all timings in a DB. &lt;/p&gt;
&lt;p&gt;It uses click for command line interface, maya for datetime parsing, and peewee for ORM, check out the code if you want to learn about these packages. &lt;/p&gt;
&lt;p&gt;Another nice aspect is that Matin refactored this into a package.&lt;/p&gt;
&lt;h3&gt;Thanks for joining&lt;/h3&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way!&lt;/p&gt;
&lt;p&gt;You can start any challenge at any time, just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="PyGithub"></category><category term="PR template"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category><category term="packaging"></category><category term="peewee"></category><category term="click"></category><category term="maya"></category></entry><entry><title>Twitter digest 2017 week 24</title><link href="https://pybit.es/twitter_digest_201724.html" rel="alternate"></link><published>2017-06-18T19:00:00+02:00</published><updated>2017-06-18T19:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-18:/twitter_digest_201724.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@baybryj:" target="_blank"&gt;@baybryj:&lt;/a&gt; Python 3.6.2 release candidate 1 is now available for testing: go for it! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/YSVCUh6Lmp" title="https://t.co/YSVCUh6Lmp" target="_blank"&gt;https://t.co/YSVCUh6Lmp&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/876294713447391232" data-datetime="2017-06-18T04:25:15+00:00"&gt;June 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to work with time in &lt;a href="https://twitter.com/search/#postgres:" target="_blank"&gt;#postgres:&lt;/a&gt; &lt;a href="https://t.co/wIud6Gsaas" title="https://t.co/wIud6Gsaas" target="_blank"&gt;https://t.co/wIud6Gsaas&lt;/a&gt; via &lt;a href="https://twitter.com/@craigkerstiens" target="_blank"&gt;@craigkerstiens&lt;/a&gt;&lt;/p&gt;‚Äî Caktus Group (@CaktusGroup) &lt;a href="https://twitter.com/CaktusGroup/status/875370743332253696" data-datetime="2017-06-15T15:13:43+00:00"&gt;June 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; How to convert JSON data into a &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; object &lt;a href="https://t.co/XCWj5iiZTd" title="https://t.co/XCWj5iiZTd" target="_blank"&gt;https://t.co/XCWj5iiZTd&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/875813386277322752" data-datetime="2017-06-16T20:32:37+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Simple Rest API Example and String Formatting (always learning) &lt;a href="https://t.co/6yMdQ4KFSS" title="https://t.co/6yMdQ4KFSS" target="_blank"&gt;https://t.co/6yMdQ4KFSS&lt;/a&gt; by &lt;a href="https://twitter.com/@gngrninja" target="_blank"&gt;@gngrninja&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/876320446823530496" data-datetime="2017-06-18T06:07:30+00:00"&gt;June 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Microservices with Docker, Flask, and React (part 2) - from localhost to Amazon EC2 &lt;a href="https://t.co/pxWl68vCsC" title="https://t.co/pxWl68vCsC" target="_blank"&gt;https://t.co/pxWl68vCsC&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/874295229695832065" data-datetime="2017-06-12T16:00:01+00:00"&gt;June 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Py is teaching people to code in "byte"-sized, gamified chunks. &lt;a href="https://t.co/qH9ouu7weG" title="https://t.co/qH9ouu7weG" target="_blank"&gt;https://t.co/qH9ouu7weG&lt;/a&gt;&lt;/p&gt;‚Äî Code.org (@codeorg) &lt;a href="https://twitter.com/codeorg/status/876076982664138752" data-datetime="2017-06-17T14:00:04+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Instagram Makes a Smooth Move to Python3 &lt;a href="https://t.co/a5BEEUA8DC" title="https://t.co/a5BEEUA8DC" target="_blank"&gt;https://t.co/a5BEEUA8DC&lt;/a&gt; "Performance speed is no longer the primary worry. Time to market speed is"&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/875632151990947840" data-datetime="2017-06-16T08:32:28+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@haxor:" target="_blank"&gt;@haxor:&lt;/a&gt; Check out this week's &lt;a href="https://twitter.com/@talkpython" target="_blank"&gt;@talkpython&lt;/a&gt; podcast where &lt;a href="https://twitter.com/@mkennedy" target="_blank"&gt;@mkennedy&lt;/a&gt; and I cover the best talks of &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/KjE6CcZqqj" title="https://t.co/KjE6CcZqqj" target="_blank"&gt;https://t.co/KjE6CcZqqj&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/874662874391511040" data-datetime="2017-06-13T16:20:54+00:00"&gt;June 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Overlaying charts in Python ‚Äì &lt;a href="https://t.co/eHJFywo0ua" title="https://t.co/eHJFywo0ua" target="_blank"&gt;https://t.co/eHJFywo0ua&lt;/a&gt; &lt;a href="https://t.co/G8iiTwGRWs" title="https://t.co/G8iiTwGRWs" target="_blank"&gt;https://t.co/G8iiTwGRWs&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/876145941883047936" data-datetime="2017-06-17T18:34:05+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@openNASA:" target="_blank"&gt;@openNASA:&lt;/a&gt; Interested in joining &lt;a href="https://twitter.com/search/#NASADatanauts?" target="_blank"&gt;#NASADatanauts?&lt;/a&gt; Engage with open data, learn skills, work on NASA projects or create your own! &lt;a href="https://‚Ä¶" title="https://‚Ä¶" target="_blank"&gt;https://‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/876188697858789376" data-datetime="2017-06-17T21:23:59+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tutorial for Faker, a library that generates placeholder data (names, addresses, ...) for use in unit tests: &lt;a href="https://t.co/UAlaLvEYUp" title="https://t.co/UAlaLvEYUp" target="_blank"&gt;https://t.co/UAlaLvEYUp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/875907602730942465" data-datetime="2017-06-17T02:47:00+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;HA!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@spolsky:" target="_blank"&gt;@spolsky:&lt;/a&gt; I can tell this is not going to end well &lt;a href="https://t.co/PMi3jYFFnf" title="https://t.co/PMi3jYFFnf" target="_blank"&gt;https://t.co/PMi3jYFFnf&lt;/a&gt;&lt;/p&gt;‚Äî Vincent Driessen (@nvie) &lt;a href="https://twitter.com/nvie/status/875394995678842882" data-datetime="2017-06-15T16:50:05+00:00"&gt;June 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@AnalyticsVidhya:" target="_blank"&gt;@AnalyticsVidhya:&lt;/a&gt; Cheat sheet with various codes and steps while performing exploratory &lt;a href="https://twitter.com/search/#dataanalysis" target="_blank"&gt;#dataanalysis&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python." target="_blank"&gt;#Python.&lt;/a&gt; &lt;a href="https://t.co/ex6ca2kSR‚Ä¶" title="https://t.co/ex6ca2kSR‚Ä¶" target="_blank"&gt;https://t.co/ex6ca2kSR‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/875939073159946242" data-datetime="2017-06-17T04:52:03+00:00"&gt;June 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Birth Announcements for the Busy Father using &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; Flask and &lt;a href="https://twitter.com/@Twilio" target="_blank"&gt;@Twilio&lt;/a&gt; SMS &lt;a href="https://t.co/zEB3BVZZey" title="https://t.co/zEB3BVZZey" target="_blank"&gt;https://t.co/zEB3BVZZey&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/875820712694624257" data-datetime="2017-06-16T21:01:44+00:00"&gt;June 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;
And something different. Take a look at the reply thread involving myself, Bob and @anthonyshaw that was started on the below Tweet. It‚Äôs a good example of how issues are identified and solved using code! Amazing job Bob! (The article is awesome too of course!).&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞ How to write a great README for your GitHub project (tips + template you can use) &lt;a href="https://t.co/hedbw7FWZn" title="https://t.co/hedbw7FWZn" target="_blank"&gt;https://t.co/hedbw7FWZn&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/875048945113845762" data-datetime="2017-06-14T17:55:00+00:00"&gt;June 14, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Postgres"></category><category term="JSON"></category><category term="Rest"></category><category term="API"></category><category term="Strings"></category><category term="Docker"></category><category term="Flask"></category><category term="React"></category><category term="AWS"></category><category term="learning"></category><category term="Py"></category><category term="Instagram"></category><category term="data science"></category><category term="charts"></category><category term="NASA"></category><category term="Faker"></category><category term="GitHub"></category><category term="Readme"></category><category term="indentation"></category><category term="data analysis"></category><category term="twilio"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API</title><link href="https://pybit.es/codechallenge23.html" rel="alternate"></link><published>2017-06-13T11:20:00+02:00</published><updated>2017-06-13T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-13:/codechallenge23.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;
&lt;p&gt;Why? To quote one of our challenge takers: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just wanted to say thanks for accepting my PR last week. My first one! I also have a request for the challenges. One of the reasons I am doing these challenges is to improve how efficiently I can write code. At the moment I have a timer on from starting up my venv to the end of unit testing. I'm recording these times each week to see if I improve. I was wondering if you could put a suggested time in the challenge readme. Almost like the 'suggested reading time' Medium have on their articles.¬†&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And we got similar inqueries. We saw that adding reading times to our articles was something our audience really liked. Now challenges take a lot more investment of one's time than reading an article, so it does make sense to work on this feature. &lt;/p&gt;
&lt;p&gt;Estimating the time it takes to do a code challenge however is inherently difficult. People have different levels of experience and the the &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;open nature&lt;/a&gt; of our challenges allows for different levels of effort.&lt;/p&gt;
&lt;p&gt;At least as we get some indication from an increasing amount of participants we can average the data making &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt; more informative.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: make a simple class or API to track and persistently save (e.g. SQLite, Google docs) challenge estimated times (minutes). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: allow the user to save more attributes about the challenges: difficulty level (1-10), rating (1-5), could complete (True/False).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: authenticate with the &lt;a href="https://developer.github.com/v3/"&gt;Github API&lt;/a&gt; so we only get real user data. This makes sense because challenge participants == GH users. This also allows you to add validation: user to enter data once per challenge and CRUD: user being able to update what he/she entered. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced part II: another idea we really like is making a private Slack for our community and participants could enter this meta data into a dedicated channel. If you like this option you could code something up using the &lt;a href="https://api.slack.com/"&gt;Slack API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual you are free to pick the tools you want: Flask, Django, ..., or just vanilla Python. &lt;/p&gt;
&lt;h2&gt;Make our code challenges better!&lt;/h2&gt;
&lt;p&gt;We challenge you to try to finish all 3 levels providing a complete solution for our PyBites community. Note this could be an integral part of our challenges platform moving forward! Pretty exciting, no?&lt;/p&gt;
&lt;p&gt;The best solution not only gets featured on our weekly review, but also on the &lt;a href="https://pybit.es/pages/challenges.html"&gt;challenges page&lt;/a&gt; (one of the most visited page on our blog). That is, when it collected enough data we are happy integrating it.&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;Here are some similar topics you can reference while taking this challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask is one way to do this, we wrote this article some time ago: &lt;a href="https://pybit.es/simple-flask-api.html"&gt;How To Build a Simple API with Flask and Unit Test it&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A similar tracking app we wrote: &lt;a href="https://pybit.es/flask-api-part2.html"&gt;Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is similar to &lt;a href="https://pybit.es/codechallenge08.html"&gt;Code Challenge 08 - House Inventory Tracker&lt;/a&gt;, reviewed &lt;a href="https://pybit.es/codechallenge08_review.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you go the Slack route you can check out: &lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to Build a Simple Slack Bot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="Slack"></category><category term="Flask"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper - Review</title><link href="https://pybit.es/codechallenge22_review.html" rel="alternate"></link><published>2017-06-12T13:00:00+02:00</published><updated>2017-06-12T13:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-12:/codechallenge22_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;
&lt;p&gt;First of all we were a tad disappointed not being able to automate the whole thing. Packt's &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;free-learning link&lt;/a&gt; requires a "I'm not a robot" captcha to be solved. We are not the only ones &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning/issues/51"&gt;hitting this wall&lt;/a&gt;. &lt;a href="https://2captcha.com/recaptchav2_eng_instruction"&gt;2captcha&lt;/a&gt; provies a possible way around it, but we didn't go there. There was still a lot of room to build cool/useful stuff:&lt;/p&gt;
&lt;h2&gt;Packt Daily Notification Email&lt;/h2&gt;
&lt;p&gt;We wrote a script to get a daily html email of the free html book, the amount of hh:mm before it expires, and adding &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;Pybonacci's affiliation link&lt;/a&gt; (to sponsor Python Spain).&lt;/p&gt;
&lt;p&gt;Here is how it looks: &lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-notifier" src="https://pybit.es/images/packt-notifier.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/076"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Packt Ebook Download Manager&lt;/h2&gt;
&lt;p&gt;We also made a script to manage downloaded/purchased Packt ebooks. It uses requests session (detailed &lt;a href="https://pybit.es/requests-session.html"&gt;here&lt;/a&gt;) to login/access/download books. We use BeautifulSoup for html parsing. Here you can see it in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python packt.py
PACKT DOWNLOAD MANAGER

Logging in
Retrieving books

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: dta
No matches, try again

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: data
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Data Mining with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; R Data Visualization Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Data Analysis with R &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ASP.NET Data Presentation Controls Essentials &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Implementing Splunk: Big Data Reporting and Development &lt;span class="k"&gt;for&lt;/span&gt; Operational Intelligence &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/21201/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-data-mining-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: python
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Expert Python Programming - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Modern Python Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python GUI Programming Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; What You Need to Know about Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Raspberry Pi Cookbook &lt;span class="k"&gt;for&lt;/span&gt; Python Programmers &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Python Application Development &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Robotics Using Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
...
many more &lt;span class="o"&gt;(&lt;/span&gt;thanks Packt!&lt;span class="o"&gt;)&lt;/span&gt;
...
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/25257/mobi
Saving to /Users/bbelderb/Documents/books/Packt/expert-python-programming-second-edition.mobi
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;22&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/20125/pdf
Saving to /Users/bbelderb/Documents/books/Packt/functional-python-programming.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: postgres
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; PostgreSQL &lt;span class="m"&gt;9&lt;/span&gt; Admin Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning PostgreSQL &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/22041/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-postgresql.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: c
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: science
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: machine
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with R - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with Spark &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Building Machine Learning Systems with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;6&lt;/span&gt;
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: f
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/11703/pdf
Saving to /Users/bbelderb/Documents/books/Packt/building-machine-learning-systems-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n
Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: q
Bye
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on the file system (some downloads were already there):&lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-dl-manager" src="https://pybit.es/images/packt-dl-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/072"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: if you want to do login with Selenium, we covered that &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/066"&gt;in our 100 Days Challenge too&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PacktScraper&lt;/h2&gt;
&lt;p&gt;We got a nice PR from &lt;a href="http://github.com/wonderfulboyx"&gt;wonderfulboyx&lt;/a&gt; scraping the free ebook site and offering email and tweet notification options, all modular and configurable with configparser. Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/22/wonderfulboyx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way. Thanks for joining.&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch - see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Twitter digest 2017 week 23</title><link href="https://pybit.es/twitter_digest_201723.html" rel="alternate"></link><published>2017-06-11T19:48:00+02:00</published><updated>2017-06-11T19:48:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-11:/twitter_digest_201723.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Generating mock data wit... &lt;a href="https://t.co/Gj8VKPPOSV" title="https://t.co/Gj8VKPPOSV" target="_blank"&gt;https://t.co/Gj8VKPPOSV&lt;/a&gt; &lt;a href="https://twitter.com/search/#mock" target="_blank"&gt;#mock&lt;/a&gt; &lt;a href="https://twitter.com/search/#tutorial" target="_blank"&gt;#tutorial&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Get Python (@getpy) &lt;a href="https://twitter.com/getpy/status/873391122000642048" data-datetime="2017-06-10T04:07:24+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Expert Python Programming" free thanks to &lt;a href="https://twitter.com/@PacktPub" target="_blank"&gt;@PacktPub&lt;/a&gt; Log in into her page and paste the link &lt;a href="https://t.co/9n7cLvUQbL" title="https://t.co/9n7cLvUQbL" target="_blank"&gt;https://t.co/9n7cLvUQbL&lt;/a&gt; to download it.&lt;/p&gt;‚Äî Pybonacci (@Pybonacci) &lt;a href="https://twitter.com/Pybonacci/status/873050877203947523" data-datetime="2017-06-09T05:35:24+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mirkolorenz:" target="_blank"&gt;@mirkolorenz:&lt;/a&gt; Walks you through the steps: Exploratory Data Analysis in Python - Silicon Valley Data Science &lt;a href="https://twitter.com/search/#ddj" target="_blank"&gt;#ddj&lt;/a&gt; &lt;a href="https://t.co/GtlO0ijVwO" title="https://t.co/GtlO0ijVwO" target="_blank"&gt;https://t.co/GtlO0ijVwO&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/873531791910379520" data-datetime="2017-06-10T13:26:23+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞üêç "plain old data objects" in Python and how to use them effectively &lt;a href="https://t.co/E1QJShlR4G" title="https://t.co/E1QJShlR4G" target="_blank"&gt;https://t.co/E1QJShlR4G&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/872985094822273027" data-datetime="2017-06-09T01:14:00+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The best sentiment analysis tool has been ported from python to C# &lt;a href="https://t.co/0Ilg1XnDNu" title="https://t.co/0Ilg1XnDNu" target="_blank"&gt;https://t.co/0Ilg1XnDNu&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/873244240415006720" data-datetime="2017-06-09T18:23:45+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scatter plotting pandas DataFrame with categorically labeled rows/columns [Score:9] &lt;a href="https://t.co/BsoqJL7l8a" title="https://t.co/BsoqJL7l8a" target="_blank"&gt;https://t.co/BsoqJL7l8a&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/873217688541306880" data-datetime="2017-06-09T16:38:15+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; teaching tip: Give learners frequent practice using help(). That way, they won't be literally helpless after the class ;-)&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/872504847983034368" data-datetime="2017-06-07T17:25:40+00:00"&gt;June 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; vs R: 4 Implementations of Same Machine Learning Technique &lt;a href="https://t.co/OD0NV50JBN" title="https://t.co/OD0NV50JBN" target="_blank"&gt;https://t.co/OD0NV50JBN&lt;/a&gt; &lt;a href="https://t.co/L8LTc7IE0a" title="https://t.co/L8LTc7IE0a" target="_blank"&gt;https://t.co/L8LTc7IE0a&lt;/a&gt;&lt;/p&gt;‚Äî Cool Python (@cool_python) &lt;a href="https://twitter.com/cool_python/status/873761944204963840" data-datetime="2017-06-11T04:40:55+00:00"&gt;June 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@captainsafia:" target="_blank"&gt;@captainsafia:&lt;/a&gt; command line tip of the day: use `ls -p` to add a forward slash at the end of directories when listing directory contents‚Ä¶&lt;/p&gt;‚Äî ‚ú® Trey Hunner üêç (@treyhunner) &lt;a href="https://twitter.com/treyhunner/status/873027386576560128" data-datetime="2017-06-09T04:02:03+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Building an API with &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; REST Framework and Class-Based Views &lt;a href="https://t.co/xZ9FXDe0aO" title="https://t.co/xZ9FXDe0aO" target="_blank"&gt;https://t.co/xZ9FXDe0aO&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/N1yOzzLx7V" title="https://t.co/N1yOzzLx7V" target="_blank"&gt;https://t.co/N1yOzzLx7V&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/873130973864448000" data-datetime="2017-06-09T10:53:40+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Newest post is up! How to Create Your First Static Site with &lt;a href="https://twitter.com/@getpelican" target="_blank"&gt;@getpelican&lt;/a&gt; and Jinja2. How's it look &lt;a href="https://twitter.com/@jmayer?" target="_blank"&gt;@jmayer?&lt;/a&gt; &lt;a href="https://t.co/Ijes5F13We" title="https://t.co/Ijes5F13We" target="_blank"&gt;https://t.co/Ijes5F13We&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/873520719547830272" data-datetime="2017-06-10T12:42:23+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;10 awesome features of Python that you can't use because you refuse to upgrade t... &lt;a href="https://t.co/33xcVl9WMX" title="https://t.co/33xcVl9WMX" target="_blank"&gt;https://t.co/33xcVl9WMX&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/872947293208444928" data-datetime="2017-06-08T22:43:47+00:00"&gt;June 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;uvicorn - A lightning-fast asyncio server for Python 3. &lt;a href="https://t.co/ghYWwDAvz2" title="https://t.co/ghYWwDAvz2" target="_blank"&gt;https://t.co/ghYWwDAvz2&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/873444289958817792" data-datetime="2017-06-10T07:38:41+00:00"&gt;June 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why we should stop making learning to code too easy - do you agree? &lt;a href="https://t.co/c4qP0ahwJ8" title="https://t.co/c4qP0ahwJ8" target="_blank"&gt;https://t.co/c4qP0ahwJ8&lt;/a&gt;&lt;/p&gt;‚Äî Grok Learning (@groklearning) &lt;a href="https://twitter.com/groklearning/status/873055745083719681" data-datetime="2017-06-09T05:54:44+00:00"&gt;June 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;/r/ProgrammerHumor has been going nuts with innovating the volume slider. &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/j45HjcCHWK" title="https://t.co/j45HjcCHWK" target="_blank"&gt;https://t.co/j45HjcCHWK&lt;/a&gt; &lt;a href="https://t.co/jYygNZZYaq" title="https://t.co/jYygNZZYaq" target="_blank"&gt;https://t.co/jYygNZZYaq&lt;/a&gt;&lt;/p&gt;‚Äî Randy Olson (@randal_olson) &lt;a href="https://twitter.com/randal_olson/status/872450897888071681" data-datetime="2017-06-07T13:51:18+00:00"&gt;June 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="Elizabeth"></category><category term="books"></category><category term="packtpub"></category><category term="data analysis"></category><category term="objects"></category><category term="sentiment analysis"></category><category term="VADER"></category><category term="matplotlib"></category><category term="pandas"></category><category term="help"></category><category term="R"></category><category term="machine learning"></category><category term="cli"></category><category term="Django"></category><category term="REST"></category><category term="Pelican"></category><category term="Jinja2"></category><category term="asyncio"></category><category term="learning"></category><category term="coding"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper</title><link href="https://pybit.es/codechallenge22.html" rel="alternate"></link><published>2017-06-05T11:20:00+02:00</published><updated>2017-06-05T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge22.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will do some web scraping of Packt's daily free ebook, sending out daily notifications. This week we even have a unique opportunity to sponsor the Python Community, read on ... and happy coding!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding :)&lt;/p&gt;
&lt;p&gt;This week we will do some web scraping. As you might know &lt;a href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt; gives away a free ebook &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;every (!) single day&lt;/a&gt;. In this challenge you will scrape that page and send out a notification to never miss an interesting title.&lt;/p&gt;
&lt;h2&gt;Sponsor the Python Community&lt;/h2&gt;
&lt;p&gt;But it gets better: the guys from &lt;a href="https://pybonacci.es/"&gt;Pybonacci&lt;/a&gt; (great Spanish Python science blog) partnered up with Packt:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Pybonacci"&gt;@Pybonacci&lt;/a&gt; Inviting you to participate in our free eBook initiative next week, including a donation to a tech charity of your choice.&lt;/p&gt;&amp;mdash; Packt (@PacktPub) &lt;a href="https://twitter.com/PacktPub/status/870223070027550720"&gt;June 1, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Packt will donate up till 1000 bucks ($ 1 per free ebook download) to a Python related non-profit (more info &lt;a href="https://pybonacci.es/2017/06/03/donaciones-gracias-a-packtpub/#en"&gt;here&lt;/a&gt;, you can vote for the non-profit &lt;a href="https://twitter.com/Pybonacci/status/870943704500056065"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So taking this challenge you get to promote the awesome Python community, isn't that cool?&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is to make a script that scrapes &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;the free learning link&lt;/a&gt; every day for meta data about the book (title, description, cover, promo time left).&lt;/p&gt;
&lt;p&gt;Then have the script share this info together with this affiliation link: &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals&lt;/a&gt; to your favorite channel: email, Twitter, Facebook, reddit, slack, etc.&lt;/p&gt;
&lt;p&gt;That's it for the basic requirements. You probably want to put this in OS cron or you can use Dan Bader's &lt;a href="https://schedule.readthedocs.io/"&gt;schedule package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the web scraping you could use &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt; or &lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt; for example. We did an article &lt;a href="https://pybit.es/simplewebscraper.html"&gt;on the former&lt;/a&gt; and used it &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/055"&gt;in our 100days Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;If you really want to challenge yourself, you could have the script login to your Packt account and click the 'Claim Your Free eBook', making it fully automated. It might not be easy because they use a &lt;a href="https://en.wikipedia.org/wiki/CAPTCHA"&gt;CAPTCHA&lt;/a&gt;, but hey we like a good challenge, right? It would definitely be a useful tool and a good skill to add.&lt;/p&gt;
&lt;p&gt;Not sure where to start? Check out &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning"&gt;this repo&lt;/a&gt; (Github is your friend!). They used &lt;a href="http://docs.python-requests.org/en/master/user/advanced/#session-objects"&gt;Requests / Session&lt;/a&gt; to do this.&lt;/p&gt;
&lt;p&gt;You could also look at &lt;a href="http://selenium-python.readthedocs.io/"&gt;Selenium&lt;/a&gt; (here is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/066/packt.py"&gt;some 100days code&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App - Review</title><link href="https://pybit.es/codechallenge21_review.html" rel="alternate"></link><published>2017-06-05T11:15:00+02:00</published><updated>2017-06-05T11:15:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge21_review.html</id><summary type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;
&lt;p&gt;This was a relatively easy challenge but building it out to something cool had its challenge. We are stoked to receive solutions with similar functionality yet using different technologies.&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;We merged 4 PRs onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Martin made &lt;a href="https://github.com/pybites/challenges/tree/community/21/clamytoe"&gt;a nice app&lt;/a&gt; for iPhone use with Pythonista 3. We really like how you guys provide screenshots and other meta data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dante made a cool Flask app: &lt;a href="https://github.com/pybites/challenges/tree/community/21/dseptem/wattapp"&gt;wattapp&lt;/a&gt;. Features include: simple interface, history of energy consumption and an option to clear items. Check it out to learn about useful Flask extensions like Flask-SQLAlchemy and Flask-WTF for forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we got some Django! Wonderfulboyx made an energy app that lets us add devices and companies, then do the calculation based on inputs. It also saves the history. It's hosted &lt;a href="http://wonderfulboyx.pythonanywhere.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites: we made a simple &lt;a href="https://github.com/pybites/challenges/tree/community/21/bbelderbos"&gt;cli app&lt;/a&gt; that loads in real data from the web: kwh per country and estimated wattages per device (parsing this was a challenge, html tables arg!). It's not done yet, we still need to cache the data and write some more tests. We found out that energy in expensive in Spain!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourselves by taking our challenges (we do too!). Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;When we merge your work onto our Challenges branch the PR auto-closes but you can still add comments to it. For new revisions, just open a new PR.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="electricity"></category><category term="Flask"></category><category term="Django"></category><category term="cli"></category><category term="data"></category><category term="BeautifulSoup"></category><category term="Python Anywhere"></category><category term="Pythonista 3"></category></entry><entry><title>Twitter digest 2017 week 22</title><link href="https://pybit.es/twitter_digest_201722.html" rel="alternate"></link><published>2017-06-04T21:08:00+02:00</published><updated>2017-06-04T21:08:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-04:/twitter_digest_201722.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just published ‚Äú&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Package Management for the Paranoid‚Äù &lt;a href="https://t.co/nkWUWR9isX" title="https://t.co/nkWUWR9isX" target="_blank"&gt;https://t.co/nkWUWR9isX&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/871247979813806080" data-datetime="2017-06-04T06:11:20+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Quick Tip - The easiest way to grab data out of a web page in Python &lt;a href="https://t.co/yRjQKBH7FF" title="https://t.co/yRjQKBH7FF" target="_blank"&gt;https://t.co/yRjQKBH7FF&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/871095937124384768" data-datetime="2017-06-03T20:07:10+00:00"&gt;June 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Tutorial &lt;a href="https://twitter.com/search/#20" target="_blank"&gt;#20&lt;/a&gt; - Processing Video I, How to build a webcam app &lt;a href="https://t.co/9gqu9H1G0V" title="https://t.co/9gqu9H1G0V" target="_blank"&gt;https://t.co/9gqu9H1G0V&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/870082474113720320" data-datetime="2017-06-01T01:00:01+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sometimes it helps to know what goes on underneath all these layers of abstractions we use every day. Nice read! &lt;a href="https://t.co/binTY94CzU" title="https://t.co/binTY94CzU" target="_blank"&gt;https://t.co/binTY94CzU&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/870423466775916544" data-datetime="2017-06-01T23:35:00+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Top 15 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Libraries for Data Science in 2017 &lt;a href="https://t.co/A0U2ME4ggd" title="https://t.co/A0U2ME4ggd" target="_blank"&gt;https://t.co/A0U2ME4ggd&lt;/a&gt; &lt;a href="https://t.co/1W9B4fYtne" title="https://t.co/1W9B4fYtne" target="_blank"&gt;https://t.co/1W9B4fYtne&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/871047220228890624" data-datetime="2017-06-03T16:53:35+00:00"&gt;June 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@hackebrot:" target="_blank"&gt;@hackebrot:&lt;/a&gt; Reminder: You can pretty-print JSON text with a built-in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; CLI tool &lt;a href="https://t.co/ha5N8Y829B" title="https://t.co/ha5N8Y829B" target="_blank"&gt;https://t.co/ha5N8Y829B&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/871320021145755648" data-datetime="2017-06-04T10:57:36+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@JaniKarh:" target="_blank"&gt;@JaniKarh:&lt;/a&gt; 27 excellent Podcasts&amp;nbsp;revisited, including some &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; goodies like &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; üéß &lt;a href="https://twitter.com/search/#podcast" target="_blank"&gt;#podcast&lt;/a&gt; &lt;a href="https://t.co/8gygt6‚Ä¶" title="https://t.co/8gygt6‚Ä¶" target="_blank"&gt;https://t.co/8gygt6‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/869644465304096768" data-datetime="2017-05-30T19:59:32+00:00"&gt;May 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/S0jgbY4Wja" title="https://t.co/S0jgbY4Wja" target="_blank"&gt;https://t.co/S0jgbY4Wja&lt;/a&gt; ‚Äì a series of small programming puzzles for a variety of skill levels&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/871196559676932096" data-datetime="2017-06-04T02:47:00+00:00"&gt;June 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python For Finance: Algorithmic Trading &lt;a href="https://t.co/ZpbzgwRDmD" title="https://t.co/ZpbzgwRDmD" target="_blank"&gt;https://t.co/ZpbzgwRDmD&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/870764533815672832" data-datetime="2017-06-02T22:10:17+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6 Mac O/S tip: To fix &lt;a href="https" title="https" target="_blank"&gt;https&lt;/a&gt; certificate failures, run this once: $ /Applications/Python\ 3.6/Install\ Certificates.command&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/870528999998410752" data-datetime="2017-06-02T06:34:21+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;(Shameless plug!)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyBites ‚Äì How to Write a Python Class &lt;a href="https://t.co/3QLx1sRsa5" title="https://t.co/3QLx1sRsa5" target="_blank"&gt;https://t.co/3QLx1sRsa5&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/870383485612982272" data-datetime="2017-06-01T20:56:08+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome interview with &lt;a href="https://twitter.com/@ellisonbg" target="_blank"&gt;@ellisonbg&lt;/a&gt; on JupyterLab and the Future &lt;a href="https://twitter.com/@ProjectJupyter" target="_blank"&gt;@ProjectJupyter&lt;/a&gt; &lt;a href="https://t.co/YZzILIw1tQ" title="https://t.co/YZzILIw1tQ" target="_blank"&gt;https://t.co/YZzILIw1tQ&lt;/a&gt;&lt;/p&gt;‚Äî Andreas Mueller (@amuellerml) &lt;a href="https://twitter.com/amuellerml/status/870243148987076608" data-datetime="2017-06-01T11:38:29+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Working with paths is easy in &lt;a href="https://twitter.com/search/#Python3" target="_blank"&gt;#Python3&lt;/a&gt; from pathlib import Path d = Path("/etc") filepath = d/"test.txt" if filepath.exists(): somestuff&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/870188166325600256" data-datetime="2017-06-01T08:00:00+00:00"&gt;June 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üéâGood news.üéâ Every video from &lt;a href="https://twitter.com/search/#signalconf" target="_blank"&gt;#signalconf&lt;/a&gt; is now online. Grab the popcorn and get the üìπ train rolling here:‚Ä¶ &lt;a href="https://t.co/o28pYkw0rS" title="https://t.co/o28pYkw0rS" target="_blank"&gt;https://t.co/o28pYkw0rS&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/870722152437227520" data-datetime="2017-06-02T19:21:53+00:00"&gt;June 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@MichelePlayfair:" target="_blank"&gt;@MichelePlayfair:&lt;/a&gt; I laughed at this way more than I should have &lt;a href="https://t.co/e1BlxSJ3Jl" title="https://t.co/e1BlxSJ3Jl" target="_blank"&gt;https://t.co/e1BlxSJ3Jl&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/869705941570142208" data-datetime="2017-05-31T00:03:49+00:00"&gt;May 31, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="packages"></category><category term="pandas"></category><category term="video"></category><category term="data science"></category><category term="cloud"></category><category term="json"></category><category term="podcasts"></category><category term="puzzles"></category><category term="arrays"></category><category term="finance"></category><category term="classes"></category><category term="jupyter"></category><category term="pathlib"></category><category term="signalconf"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App</title><link href="https://pybit.es/codechallenge21.html" rel="alternate"></link><published>2017-05-29T11:00:00+02:00</published><updated>2017-05-29T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge21.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is simple. We want you to create an app that will allow you to calculate the hourly cost of running an electrical device.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;App will allow a user to enter the wattage consumption of a device (eg, a 20w light globe) and a cost per kilowatt hour (kWh). kWh being the unit of measurement the electric company charges by.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app will then return the cost of running the device for 1 hour.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the absolute baseline for beginners. We recommend you continue with the Bonus Features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Features:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make it interesting, see if you can complete the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make this a web app using the framework of your choice. It‚Äôd look great in a browser!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow a user to enter in how many hours they want to use the device for and have this factored into your cost result (eg, Using a 20w globe at 50 cents per kWh for 10 hours).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use persistent storage (sqlite, shelf, etc) to store all queries to the app and have the ability to print this stored data back to the user when requested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don‚Äôt want to make it a web app, see if you can construct a GUI using &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; or other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
Consider this a half specific, half open ended challenge. There‚Äôs an intentional, specific goal here but how you get there is up to you. If you‚Äôre a newbie and it takes time, feel free to leave this as a CLI based app.&lt;/p&gt;
&lt;p&gt;It doesn‚Äôt matter how great it looks, only that you were challenged along the way and learned something!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="math"></category><category term="electricity"></category><category term="beginner"></category><category term="GUI"></category><category term="TkInter"></category><category term="Flask"></category><category term="newquote"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun - Review</title><link href="https://pybit.es/codechallenge20_review.html" rel="alternate"></link><published>2017-05-29T09:00:00+02:00</published><updated>2017-05-29T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge20_review.html</id><summary type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;This was a great challenge. We got to play with OOP and learned a couple of things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Julian: exploring inheritance using the character class system in the World of Warcraft, see &lt;a href="https://github.com/pybites/challenges/blob/community/20/hobojoe1848/warlock_class.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bob: a book/video task planner that sends a weekly SMS (Twilio API) with material to consume, see &lt;a href="https://github.com/pybites/challenges/tree/community/20/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode&lt;/a&gt;: simple Karma app using inheritance and playing with dunder methods, see &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/058/karma.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;Dante&lt;/a&gt;: Rooms framework (including unittests, nice!), Readme:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rooms is a humble and simple Framework to create adventure games with Python. A player has an inventory and moves between Rooms, interacting with Actors. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ python rooms.py

    ...
    ...
    This normal looking room has a weird guy standing against the wall

    -=-

    Here I see a weird guy that I don&amp;#39;t know. he looks friendly..

    Actions:
    1) Talk to the friendly weird guy I don&amp;#39;t know
    2) Inventory

    Exits:
    3) A place with a strange aura

    Choose your action / exit: 1

    Take this botato, use is wisely!

    Received 1 Holy Botato!

    ...
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourself by taking our challenges. Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="dunder"></category><category term="games"></category><category term="adventure"></category><category term="warcraft"></category><category term="Twilio"></category><category term="karma"></category><category term="Rooms"></category></entry><entry><title>Twitter digest 2017 week 21</title><link href="https://pybit.es/twitter_digest_201721.html" rel="alternate"></link><published>2017-05-28T20:01:00+02:00</published><updated>2017-05-28T20:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-28:/twitter_digest_201721.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nostarch:" target="_blank"&gt;@nostarch:&lt;/a&gt; The latest from &lt;a href="https://twitter.com/@AlSweigart," target="_blank"&gt;@AlSweigart,&lt;/a&gt; Cracking Codes with Python, is now in Early Access! &lt;a href="https://t.co/19trOQbBhk" title="https://t.co/19trOQbBhk" target="_blank"&gt;https://t.co/19trOQbBhk&lt;/a&gt; &lt;a href="https://t.co/oHtPpOG‚Ä¶" title="https://t.co/oHtPpOG‚Ä¶" target="_blank"&gt;https://t.co/oHtPpOG‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Al Sweigart (@AlSweigart) &lt;a href="https://twitter.com/AlSweigart/status/867880275728060417" data-datetime="2017-05-25T23:09:16+00:00"&gt;May 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brettsky:" target="_blank"&gt;@brettsky:&lt;/a&gt; My post on explaining PEP 518 thanks to &lt;a href="https://twitter.com/@takluyver" target="_blank"&gt;@takluyver&lt;/a&gt; landing his PR implementing it in pip &lt;a href="https://t.co/ul4eOLHyql" title="https://t.co/ul4eOLHyql" target="_blank"&gt;https://t.co/ul4eOLHyql&lt;/a&gt;&lt;/p&gt;‚Äî Mariatta ü§¶ (@mariatta) &lt;a href="https://twitter.com/mariatta/status/868646481699364864" data-datetime="2017-05-28T01:53:54+00:00"&gt;May 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Will have to check this out. Wonder how it compares to &lt;a href="https://twitter.com/search/#Faker?" target="_blank"&gt;#Faker?&lt;/a&gt; &lt;a href="https://t.co/Do93AHH71g" title="https://t.co/Do93AHH71g" target="_blank"&gt;https://t.co/Do93AHH71g&lt;/a&gt;&lt;/p&gt;‚Äî Mohhinder Suresh (@mohhinder) &lt;a href="https://twitter.com/mohhinder/status/868022004963844097" data-datetime="2017-05-26T08:32:27+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hand-crafted Python 2 and 3 boilerplates with argparse, logging, Flask, pytest, tox, and more &lt;a href="https://t.co/Etcmb5QJHN" title="https://t.co/Etcmb5QJHN" target="_blank"&gt;https://t.co/Etcmb5QJHN&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/868196850095882240" data-datetime="2017-05-26T20:07:14+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kdnuggets:" target="_blank"&gt;@kdnuggets:&lt;/a&gt; Top 20 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; Open Source Projects, updated &lt;a href="https://t.co/xyuGDGtBWP" title="https://t.co/xyuGDGtBWP" target="_blank"&gt;https://t.co/xyuGDGtBWP&lt;/a&gt; &lt;a href="https://t.co/swskwnrN2S" title="https://t.co/swskwnrN2S" target="_blank"&gt;https://t.co/swskwnrN2S&lt;/a&gt;&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/868494213415018496" data-datetime="2017-05-27T15:48:50+00:00"&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;calculate memory footprint for any python object &lt;a href="https://t.co/NPlYeMrrBa" title="https://t.co/NPlYeMrrBa" target="_blank"&gt;https://t.co/NPlYeMrrBa&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/868693322939998208" data-datetime="2017-05-28T05:00:02+00:00"&gt;May 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Navigate to the last edit using Shift+Cmd+Backspace/Shift+Ctrl+Backspace &lt;a href="https://twitter.com/search/#PyCharmTip" target="_blank"&gt;#PyCharmTip&lt;/a&gt; &lt;a href="https://t.co/jp40j8GB8N" title="https://t.co/jp40j8GB8N" target="_blank"&gt;https://t.co/jp40j8GB8N&lt;/a&gt;&lt;/p&gt;‚Äî JetBrains PyCharm (@pycharm) &lt;a href="https://twitter.com/pycharm/status/866624694178508800" data-datetime="2017-05-22T12:00:02+00:00"&gt;May 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Shallow and deep copy: &amp;gt;&amp;gt; from copy import copy, deepcopy &amp;gt;&amp;gt; a = [1,[2,3]] &amp;gt;&amp;gt; b = a &amp;gt;&amp;gt; c = copy(a) &amp;gt;&amp;gt; d = deepcopy(‚Ä¶ &lt;a href="https://t.co/KBePIiuqX6" title="https://t.co/KBePIiuqX6" target="_blank"&gt;https://t.co/KBePIiuqX6&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/866926676520738816" data-datetime="2017-05-23T08:00:01+00:00"&gt;May 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nicoddemus:" target="_blank"&gt;@nicoddemus:&lt;/a&gt; Pytest 3.1.0 has been released! Changelog: &lt;a href="https://t.co/QkUqbNw0Lz" title="https://t.co/QkUqbNw0Lz" target="_blank"&gt;https://t.co/QkUqbNw0Lz&lt;/a&gt; &lt;a href="https://twitter.com/search/#pytest" target="_blank"&gt;#pytest&lt;/a&gt;&lt;/p&gt;‚Äî pytest.org (@pytestdotorg) &lt;a href="https://twitter.com/pytestdotorg/status/866792741367197696" data-datetime="2017-05-22T23:07:48+00:00"&gt;May 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My first book - Tkinter By Example - now available (Free, CC BY-ND) &lt;a href="https://t.co/PzulG4NUXc" title="https://t.co/PzulG4NUXc" target="_blank"&gt;https://t.co/PzulG4NUXc&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/868481931180224512" data-datetime="2017-05-27T15:00:02+00:00"&gt;May 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New post is up! Responsive Bar Charts with &lt;a href="https://twitter.com/@BokehPlots," target="_blank"&gt;@BokehPlots,&lt;/a&gt; Flask and &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3 &lt;a href="https://t.co/rP6BxBKkE2" title="https://t.co/rP6BxBKkE2" target="_blank"&gt;https://t.co/rP6BxBKkE2&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/868111827783340033" data-datetime="2017-05-26T14:29:23+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"Exposing Python 3.6's Private Dict Version" ‚Äî blog post inspired by &lt;a href="https://twitter.com/@raymondh" target="_blank"&gt;@raymondh&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/@brandon_rhodes" target="_blank"&gt;@brandon_rhodes&lt;/a&gt; talks at &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/ZAVJhUFyLD" title="https://t.co/ZAVJhUFyLD" target="_blank"&gt;https://t.co/ZAVJhUFyLD&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/868127985504624640" data-datetime="2017-05-26T15:33:35+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Gitsuggest ‚Äì A tool to suggest github repositories based on the repositories you have shown interest in &amp;gt;&amp;gt; &lt;a href="https://t.co/nSZfVoqIE4" title="https://t.co/nSZfVoqIE4" target="_blank"&gt;https://t.co/nSZfVoqIE4&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/868095390121435136" data-datetime="2017-05-26T13:24:04+00:00"&gt;May 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This is &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/0svw0OdApP" title="https://t.co/0svw0OdApP" target="_blank"&gt;https://t.co/0svw0OdApP&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/866429000670863361" data-datetime="2017-05-21T23:02:25+00:00"&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;And just because I can‚Äôt wait for this stuff here in Australia‚Ä¶&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just as I got all the lights setup, this is going to be legit. &lt;a href="https://t.co/mIF3UVFk3z" title="https://t.co/mIF3UVFk3z" target="_blank"&gt;https://t.co/mIF3UVFk3z&lt;/a&gt;&lt;/p&gt;‚Äî Mahdi Yusuf (@myusuf3) &lt;a href="https://twitter.com/myusuf3/status/867238505784672256" data-datetime="2017-05-24T04:39:06+00:00"&gt;May 24, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="books"></category><category term="pycon2017"></category><category term="pip"></category><category term="PEP"></category><category term="pyPI"></category><category term="Elizabeth"></category><category term="machine learning"></category><category term="boilerplates"></category><category term="open source"></category><category term="pycharm"></category><category term="copy"></category><category term="pytest"></category><category term="memory"></category><category term="tkinter"></category><category term="bokeh"></category><category term="flask"></category><category term="dicts"></category><category term="gitsuggest"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun</title><link href="https://pybit.es/codechallenge20.html" rel="alternate"></link><published>2017-05-22T15:10:00+02:00</published><updated>2017-05-22T15:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge20.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;If you are new to OOP you might want to checkout &lt;a href="http://pybit.es/oop-primer.html"&gt;our primer tutorial&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class with a constructor (__init__ = object setup code, e.g. defining instance variables) and at least two methods. To relive PyCon you could have a generic Session class, but use any concept you like (Employee, Car, Person, Animal, Account, Notebook, etc). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a subclass that inherits from the parent class. For example you could let (Lightning)Talk, KeyNote and Workshop be subclasses (inherit from) Session. Other examples: Employee - Manager / Developer, Car - Toyota, Account - SavingsAccount ... you get the idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define another class for use in the initial (sub)class. So for the PyCon Session example you could pull in a bunch of Person (Developer) objects that joined it. This &lt;a href="http://www.amazon.com/dp/1784398780/?tag=pyb0f-20"&gt;Python OOP book&lt;/a&gt; has an example of a Notebook class to which Note objects are getting added. Or you could model a Blog with Posts, Tags, Categories, Comments. The possibilities are endless. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another (more fun) option that could be a good fit for OOP is developing a simple game with different Characters (Monsters, Heros, maybe Princesses even?) and Places they go, each class (blueprint) defining its own state (attributes) and behaviors (methods).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We hope you follow along so far. For the more experienced coders among us, get bonus credits if you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apart from Inheritance implement Polymorphism and Encapsulation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use one or more class and/or static methods. You could have a class variable keep track of the number of instances of the class for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;investigate and use Abstract base classes (= ABCs, see also our &lt;a href="http://pybit.es/oop-primer.html"&gt;OOP primer&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement special (aka "dunder" aka "magic") methods which we covered &lt;a href="http://pybit.es/python-data-model.html"&gt;here&lt;/a&gt;, at least __str__ and __repr__ &lt;/p&gt;
&lt;p&gt;To get an idea of the difference between these two and a list of dunder methods on a typical Python object run this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;2017-05-22 12:16:08.816364&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;datetime.datetime(2017, 5, 22, 12, 16, 8, 816364)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not sure if we should go down the route of multiple inheritance but it is possible if you have a use case. You can use __mro__ to figure out the inheritance order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="encapsulation"></category><category term="polymorphism"></category><category term="dunder"></category><category term="games"></category><category term="ABCs"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API - Review</title><link href="https://pybit.es/codechallenge19_review.html" rel="alternate"></link><published>2017-05-22T15:00:00+02:00</published><updated>2017-05-22T15:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge19_review.html</id><summary type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API. &lt;/p&gt;
&lt;h2&gt;PyCon&lt;/h2&gt;
&lt;p&gt;Before we dive in just to say we are absolutely stoked about the positive feedback we got engaging with fellow Pythonistas at PyCon this week! People got excited about the code challenges: the fact it stretches fellow programmers and the way they can submit their work via PR. So we definitely keep using this format for now. Do reach out though if you have any feedback or want to submit a code challenge / share your ideas, they are more than welcome. Thanks. &lt;/p&gt;
&lt;h2&gt;Our solutions&lt;/h2&gt;
&lt;p&gt;Here are some scripts that POST to APIs all taken from our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100 Days of Code repo&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This week's contribution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facebook API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/"&gt;a script to automatically post to our FB group&lt;/a&gt; which uses the &lt;a href="https://github.com/mobolic/facebook-sdk"&gt;facebook-sdk package&lt;/a&gt; and &lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt; which is neat to create command line interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previously featured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Twitter API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/053/"&gt;script to (daily) auto-tweet our 100 Days of Code progress&lt;/a&gt; (&lt;a href="http://pybit.es/100days-autotweet.html"&gt;article&lt;/a&gt;). If you are curious about Twitter bots, you might want to check out &lt;a href="http://pybit.es/automate-twitter.html"&gt;our article&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/866346450699001856"&gt;this poster&lt;/a&gt; spotted at PyCon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slack API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/"&gt;post to Slack upon each domain mention on Twitter&lt;/a&gt; (&lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;article&lt;/a&gt;). We also have &lt;a href="http://pybit.es/simple-chatbot.html"&gt;an article&lt;/a&gt; on how to build a Slack bot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We initially wanted to look at the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify&lt;/a&gt; or &lt;a href="https://developers.google.com/youtube/"&gt;YouTube&lt;/a&gt; API but we lacked the time. We will update this article when we get around it. Or maybe it's a nice one for you to contribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;This week we will dive into Object Oriented Programming. We will set up a nice free-form challenge to let you experiment with classes, inheritance and more. Stay tuned ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now is better than never.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We hope you are having fun with these challenges. Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="POST"></category><category term="Twitter"></category><category term="Facebook"></category></entry><entry><title>Twitter digest 2017 week 20</title><link href="https://pybit.es/twitter_digest_201720.html" rel="alternate"></link><published>2017-05-21T19:59:00+02:00</published><updated>2017-05-21T19:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-21:/twitter_digest_201720.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week we‚Äôve decided to include cool things that we‚Äôve found, learned and heard while Bob‚Äôs been at #PyCon2017! Woohoo!&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cool, &lt;a href="https://twitter.com/@pycharm" target="_blank"&gt;@pycharm&lt;/a&gt; supports &lt;a href="https://twitter.com/search/#vim" target="_blank"&gt;#vim&lt;/a&gt; mode via IdeaVim - &lt;a href="https://t.co/g2TId7f70K" title="https://t.co/g2TId7f70K" target="_blank"&gt;https://t.co/g2TId7f70K&lt;/a&gt; - trying it out ...&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866094856543780865" data-datetime="2017-05-21T00:54:39+00:00"&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Always amazes me how fast &lt;a href="https://twitter.com/@pycon" target="_blank"&gt;@pycon&lt;/a&gt; is able to upload their videos. All the tutorials are already available! &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/nB24mksIV9" title="https://t.co/nB24mksIV9" target="_blank"&gt;https://t.co/nB24mksIV9&lt;/a&gt;&lt;/p&gt;‚Äî Jake VanderPlas (@jakevdp) &lt;a href="https://twitter.com/jakevdp/status/865943453884071938" data-datetime="2017-05-20T14:53:02+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why have I not used bpython yet?! It's awesome &lt;a href="https://t.co/mAO9CJojVC" title="https://t.co/mAO9CJojVC" target="_blank"&gt;https://t.co/mAO9CJojVC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866028106942775296" data-datetime="2017-05-20T20:29:25+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The evolution of dictionaries in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; history. Great thing to know &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt; &lt;a href="https://t.co/2yfqJwY0M6" title="https://t.co/2yfqJwY0M6" target="_blank"&gt;https://t.co/2yfqJwY0M6&lt;/a&gt;&lt;/p&gt;‚Äî yosola (@yosola) &lt;a href="https://twitter.com/yosola/status/866015571376197633" data-datetime="2017-05-20T19:39:36+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The new features of Python 3.6 (&lt;a href="https://t.co/fcHMkEf5Yd" title="https://t.co/fcHMkEf5Yd" target="_blank"&gt;https://t.co/fcHMkEf5Yd&lt;/a&gt;) are a highlight in many &lt;a href="https://twitter.com/search/#pycon2017" target="_blank"&gt;#pycon2017&lt;/a&gt; talks so far. It seems like an inflection point!&lt;/p&gt;‚Äî Brett Slatkin (@haxor) &lt;a href="https://twitter.com/haxor/status/865995754401284096" data-datetime="2017-05-20T18:20:51+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pgcli - a REPL for Postgres &lt;a href="https://t.co/8ddSupFmi3" title="https://t.co/8ddSupFmi3" target="_blank"&gt;https://t.co/8ddSupFmi3&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866020323384213504" data-datetime="2017-05-20T19:58:29+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;2D platformer game made in Python 3 and... *Tkinter* Can you believe it!? So cool! &lt;a href="https://t.co/4wpJRUQvcM" title="https://t.co/4wpJRUQvcM" target="_blank"&gt;https://t.co/4wpJRUQvcM&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/865760742724833280" data-datetime="2017-05-20T02:47:00+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Speedml is a Python package to speed start machine learning projects. - &lt;a href="https://t.co/t9n45sbf5u" title="https://t.co/t9n45sbf5u" target="_blank"&gt;https://t.co/t9n45sbf5u&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/865569500393082880" data-datetime="2017-05-19T14:07:05+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use ast_note_interactivity option in &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; notebooks to see the value of multiple statements at once. &lt;a href="https://t.co/KKZG3UtPlf" title="https://t.co/KKZG3UtPlf" target="_blank"&gt;https://t.co/KKZG3UtPlf&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/864397514719604736" data-datetime="2017-05-16T08:30:01+00:00"&gt;May 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;3D Interfaces for Python using Unity3D &lt;a href="https://t.co/2BSxSPU2Gz" title="https://t.co/2BSxSPU2Gz" target="_blank"&gt;https://t.co/2BSxSPU2Gz&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/865673428291813380" data-datetime="2017-05-19T21:00:03+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Inspect PCAP Files Using AWS Lambda &lt;a href="https://t.co/t94k4YVLKu" title="https://t.co/t94k4YVLKu" target="_blank"&gt;https://t.co/t94k4YVLKu&lt;/a&gt; &lt;a href="https://twitter.com/search/#scapy" target="_blank"&gt;#scapy&lt;/a&gt; &lt;a href="https://twitter.com/search/#aws" target="_blank"&gt;#aws&lt;/a&gt; &lt;a href="https://twitter.com/search/#lambda" target="_blank"&gt;#lambda&lt;/a&gt; &lt;a href="https://twitter.com/search/#pcap" target="_blank"&gt;#pcap&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/865349881119911937" data-datetime="2017-05-18T23:34:23+00:00"&gt;May 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Raymond Hettinger: Modern Python Dictionaries: A confluence of a dozen great ideas (PyCon 2017) &lt;a href="https://t.co/SuFpnCfqNK" title="https://t.co/SuFpnCfqNK" target="_blank"&gt;https://t.co/SuFpnCfqNK&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/866068084372766721" data-datetime="2017-05-20T23:08:16+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Create a Facebook Messenger Bot with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Flask" target="_blank"&gt;#Flask&lt;/a&gt; &lt;a href="https://t.co/Oym57PwyGb" title="https://t.co/Oym57PwyGb" target="_blank"&gt;https://t.co/Oym57PwyGb&lt;/a&gt; &lt;a href="https://t.co/2j3KbXeL40" title="https://t.co/2j3KbXeL40" target="_blank"&gt;https://t.co/2j3KbXeL40&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/865852623345274881" data-datetime="2017-05-20T08:52:06+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An &lt;a href="https://twitter.com/search/#API" target="_blank"&gt;#API&lt;/a&gt; should make the simple easy, the complex possible and the wrong impossible - great talk by &lt;a href="https://twitter.com/@flaviojuvenal‚Ä¶" target="_blank"&gt;@flaviojuvenal‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/jiw3UeUkZy" title="https://t.co/jiw3UeUkZy" target="_blank"&gt;https://t.co/jiw3UeUkZy&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/866053135399174145" data-datetime="2017-05-20T22:08:52+00:00"&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A great truth from &lt;a href="https://twitter.com/@marriatta's" target="_blank"&gt;@marriatta's&lt;/a&gt; talk: Good mentor's don't hang around in communities that enable and accept trolls and assholes. &lt;a href="https://twitter.com/search/#PyCon2017" target="_blank"&gt;#PyCon2017&lt;/a&gt;&lt;/p&gt;‚Äî Leland McInnes (@leland_mcinnes) &lt;a href="https://twitter.com/leland_mcinnes/status/865674442499702785" data-datetime="2017-05-19T21:04:05+00:00"&gt;May 19, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="pycharm"></category><category term="vim"></category><category term="PyCon2017"></category><category term="tutorials"></category><category term="resources"></category><category term="bpython"></category><category term="dictionaries"></category><category term="Postgres"></category><category term="cli"></category><category term="mentors"></category><category term="tkinter"></category><category term="speedml"></category><category term="machine learning"></category><category term="jupyter"></category><category term="aws"></category><category term="lambda"></category><category term="pcap"></category><category term="unity3d"></category><category term="bot"></category><category term="flask"></category></entry><entry><title>How to Parse Common Data Formats in Python</title><link href="https://pybit.es/parsing-data.html" rel="alternate"></link><published>2017-05-16T20:37:00+02:00</published><updated>2017-05-16T20:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-16:/parsing-data.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest jumps you make in your Python learning is when you start dealing with external data. &lt;/p&gt;
&lt;p&gt;With this post we wanted to demonstrate a few ways you can work with the more common data formats. Why? Because it‚Äôs a big deal when you‚Äôre starting out! Furthermore, unless you do it often enough it‚Äôs easy to forget how so bookmark this baby and reference it!&lt;/p&gt;
&lt;p&gt;The links below are to articles and scripts we‚Äôve actually written as well as to external resources we‚Äôve found helpful.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;1. CSV&lt;/h2&gt;
&lt;p&gt;If you‚Äôre going to play with CSV files, &lt;code&gt;DictReader&lt;/code&gt; is your friend. It converts each row into an &lt;code&gt;OrderedDict&lt;/code&gt; (Hallelujah!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading the contents of a CSV file:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/001/pytip.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for entry in csv.DictReader(f, fieldnames=FIELDS):
    yield entry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Opening and reading the CSV using a &lt;code&gt;with&lt;/code&gt; statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def read_csv(cf=CSV_FILE):
    with open(cf, &amp;#39;r&amp;#39;) as csvfile:
        return list(csv.DictReader(csvfile))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. JSON&lt;/h2&gt;
&lt;p&gt;JSON is a must these days, especially if you want to work with APIs. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple read of JSON data pulled down by &lt;code&gt;requests&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/027/warcraft_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = json.loads(r.text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;One of our first articles used a &lt;code&gt;with&lt;/code&gt; statement to load in JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/kindle-json-to-html.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_json(json_file):    
    with open(json_file) as f:        
        return json.loads(f.read())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Our Challenge 07 review used &lt;code&gt;yield&lt;/code&gt; to return the JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge07_review.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Note the &lt;code&gt;.json()&lt;/code&gt; method on &lt;code&gt;requests.get&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/weather_compare/blob/master/weather.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = requests.get(API_URL.format(city, API_KEY)).json()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;dump&lt;/code&gt; to write to a file as per this &lt;a href="http://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file-in-python"&gt;Stack Overflow question&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. SQLite&lt;/h2&gt;
&lt;p&gt;We‚Äôve learned to love SQLite recently and have found ourselves using it all the time. It‚Äôs worth picking up as it‚Äôs such an easy and great way of getting a persistent DB!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent use to convert a CSV of movies to an &lt;code&gt;sqlite&lt;/code&gt; DB:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch06s08.html"&gt;Python Cookbook chapter&lt;/a&gt; details working with Relational Databases (&lt;a href="http://amzn.to/2qMGNaN"&gt;Amazon Link&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We enjoyed this thorough &lt;code&gt;sqlite&lt;/code&gt; &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;Python tutorial&lt;/a&gt; by Sebastian Raschka too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4. XML&lt;/h2&gt;
&lt;p&gt;XML! The data format of choice for RSS feeds. Can be a bit troublesome at times but always worth the effort.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example of using &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; to parse the Safari RSS feed:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/017/safari.py"&gt;Code Link&lt;/a&gt; - Worth checking out the full code but the gist of it is‚Ä¶&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in doc.iterfind(&amp;#39;channel/item&amp;#39;):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Using &lt;code&gt;feedparser&lt;/code&gt; to pull specific XML tags and add to a list:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/045/xml_steam_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        Game = (entry[&amp;#39;title&amp;#39;], entry[&amp;#39;link&amp;#39;])
            games_list.append(Game)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Challenge Solutions&lt;/h2&gt;
&lt;p&gt;We‚Äôve had numerous challenges over the past few months where the solutions involved these data formats. Here are a few of the noteworthy ones:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge04.html"&gt;Code Challenge 04&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/6gvF0b"&gt;Read CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/udmLRm"&gt;Write CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://pybit.es/codechallenge07.html"&gt;Code Challenge 07&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/lsv2MJ"&gt;Dump tweet JSON&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/VjEukO"&gt;Load tweets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge17_review.html"&gt;Code Challenge 17 Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was definitely a great challenge. Check out the multiple community contributions for some examples of using &lt;code&gt;sqlite&lt;/code&gt; and XML in functional scripts written by your fellow Pythonistas.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learn By Doing&lt;/h2&gt;
&lt;p&gt;Now that you have the info, as we said in our &lt;a href="http://pybit.es/learn-by-doing.html"&gt;Learn By Doing article&lt;/a&gt;, open up a vim session and get coding!&lt;/p&gt;
&lt;p&gt;One awesome, shameless plug of a way to do this would be to come up with a solution for &lt;a href="http://pybit.es/codechallenge19.html"&gt;Code Challenge 19&lt;/a&gt;. Playing with an API means you‚Äôll more than likely need to use quite a few of these formats.&lt;/p&gt;
&lt;p&gt;We‚Äôd love to hear if you have any Pythonic tips on using these formats too so leave a comment!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian and Bob&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="csv"></category><category term="sqlite3"></category><category term="json"></category><category term="xml"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API</title><link href="https://pybit.es/codechallenge19.html" rel="alternate"></link><published>2017-05-15T13:31:00+02:00</published><updated>2017-05-15T13:31:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge19.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week part 2 of APIs: post to your favorite API. Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge success&lt;/a&gt;, we have a part 2 this week where we will let you post to your favorite API. &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data. The difference with last time is that you actually have to edit your account by doing one or more POST requests. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post (periodic) updates to your favorite social media platform. We really like the Twitter API (see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;), but you could use Facebook, Linkedin, Pinterest, Instagram, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create playlists of your favorite music with the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you like books, playing with the &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/046"&gt;Goodreads API last week&lt;/a&gt;, pushing books to your shelve(s) is something this API supports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;Google APIs&lt;/a&gt;: send an email, add a calendar invite, add a file to Google drive, to name a few. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push a new article/ post to reddit Python or LearnPython using &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a list of your favorite movies with &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with the &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, etc etc ... be creative, scratch your own itch!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still searching for APIs? Last time we linked to these two resources: &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;fun APIs to play with (reddit thread)&lt;/a&gt; and &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="Twitter"></category><category term="Facebook"></category><category term="TheMovieDB"></category><category term="Spotify"></category><category term="Goodreads"></category><category term="Reddit"></category><category term="Google"></category><category term="POST"></category></entry><entry><title>Code Challenge 18 - Get Recommendations - Review</title><link href="https://pybit.es/codechallenge18_review.html" rel="alternate"></link><published>2017-05-15T11:37:00+02:00</published><updated>2017-05-15T11:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge18_review.html</id><summary type="html">&lt;p&gt;Before moving onto the new challenge let's review &lt;a href="http://pybit.es/codechallenge18.html"&gt;last week's challenge&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week we aimed at &lt;a href="http://pybit.es/codechallenge18.html"&gt;Getting Recommendations From Twitter Influencers&lt;/a&gt;. It required a bit more work and knowledge than anticipated so we leave it pending/working for now. We were also pretty busy last week.&lt;/p&gt;
&lt;p&gt;We did fiddle with the Goodreads API managing to get a user authorized (oauth) and pull their friends' updates. We only need to parse the output and probably filter "books read" with a rating of &amp;gt;= 4 (out of 5). Some code to get you started &lt;a href="https://github.com/pybites/challenges/tree/solutions/18"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another thing we'd like to build at some point is getting Netflix recommendations (digest email) because there is just too much to watch. Netflix does not have an API anymore though :( - Twitter has &lt;a href="https://twitter.com/search?q=netflix%20recommend&amp;amp;src=typd"&gt;a lot of Netflix tweets&lt;/a&gt; but the challenge is the free text (spam) and filtering out the exact show name. &lt;a href="https://parrotread.com/"&gt;Parrotread&lt;/a&gt; managed to do it for books so there must be a way. To be continued ... &lt;/p&gt;
&lt;p&gt;So building a recommendation engine takes more (structured) data and ML skills. We found some good resources to get started: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/grahamjenson/list_of_recommender_systems"&gt;List of Recommender Systems&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ML starter book: &lt;a href="http://www.amazon.com/dp/1449369413/?tag=pyb0f-20"&gt;Introduction to Machine Learning with Python: A Guide for Data Scientists&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the making: Manning's &lt;a href="https://www.manning.com/books/practical-recommender-systems"&gt;Practical Recommender Systems&lt;/a&gt;. You can download a free chapter and &lt;a href="https://github.com/practical-recommender-systems"&gt;source&lt;/a&gt; is already up and seems to use an interesting data set: &lt;a href="https://github.com/sidooms/MovieTweetings"&gt;MovieTweetings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Challenges don't have deadlines so we will refer back to this one when we learned more about recommendation engines. Let us know if you made further progress on this one.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge&lt;/a&gt; success, we have a part 2 this week where we will let you post to your favorite API. Standby as we post the challenge in a bit ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="books"></category><category term="Goodreads"></category><category term="API"></category><category term="oauth"></category><category term="Manning"></category><category term="Machine Learning"></category><category term="Netflix"></category><category term="recommendation engine"></category><category term="Parrotread"></category><category term="recommender system"></category></entry><entry><title>Twitter digest 2017 week 19</title><link href="https://pybit.es/twitter_digest_201719.html" rel="alternate"></link><published>2017-05-14T17:29:00+02:00</published><updated>2017-05-14T17:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-14:/twitter_digest_201719.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;General Tips for Web Scraping with Python &lt;a href="https://t.co/ZUZqE5fhL1" title="https://t.co/ZUZqE5fhL1" target="_blank"&gt;https://t.co/ZUZqE5fhL1&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/863214091141234689" data-datetime="2017-05-13T02:07:31+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; Artificial Intelligence: Reinforcement Learning in Python &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#DeepLearning" target="_blank"&gt;#DeepLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#AI" target="_blank"&gt;#AI&lt;/a&gt; &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/862385339545137154" data-datetime="2017-05-10T19:14:21+00:00"&gt;May 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Creating the Python Logo in Matplotlib &lt;a href="https://t.co/etXFzaI0Pe" title="https://t.co/etXFzaI0Pe" target="_blank"&gt;https://t.co/etXFzaI0Pe&lt;/a&gt; &lt;a href="https://t.co/ATOn4eqbzU" title="https://t.co/ATOn4eqbzU" target="_blank"&gt;https://t.co/ATOn4eqbzU&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/863133608768405504" data-datetime="2017-05-12T20:47:43+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Sometimes tiny programs are just so pleasing: &lt;a href="https://t.co/GNR3wUdmH1" title="https://t.co/GNR3wUdmH1" target="_blank"&gt;https://t.co/GNR3wUdmH1&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/863058471234797569" data-datetime="2017-05-12T15:49:09+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New to &lt;a href="https://twitter.com/search/#python?" target="_blank"&gt;#python?&lt;/a&gt; Here are 6 projects to help you practice: &lt;a href="https://t.co/ncxl0fFBVh" title="https://t.co/ncxl0fFBVh" target="_blank"&gt;https://t.co/ncxl0fFBVh&lt;/a&gt; &lt;a href="https://twitter.com/search/#coding" target="_blank"&gt;#coding&lt;/a&gt; &lt;a href="https://twitter.com/search/#girlswhocode" target="_blank"&gt;#girlswhocode&lt;/a&gt; &lt;a href="https://t.co/9jZgwgW9nb" title="https://t.co/9jZgwgW9nb" target="_blank"&gt;https://t.co/9jZgwgW9nb&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/863026424722202626" data-datetime="2017-05-12T13:41:48+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gvanrossum:" target="_blank"&gt;@gvanrossum:&lt;/a&gt; Great example of beginner-friendly guide to submitting PRs: &lt;a href="https://t.co/c97EW3pVVb" title="https://t.co/c97EW3pVVb" target="_blank"&gt;https://t.co/c97EW3pVVb&lt;/a&gt; (also check the previous sections)&lt;/p&gt;‚Äî matt harrison (@__mharrison__) &lt;a href="https://twitter.com/__mharrison__/status/863009708516327426" data-datetime="2017-05-12T12:35:23+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;locals() and globals() return a dictionary of local / global variables: &amp;gt;&amp;gt;&amp;gt; a = 1 &amp;gt;&amp;gt;&amp;gt; b = 1 &amp;gt;&amp;gt;&amp;gt; locals() {'a': 1, 'b': 1, ...} &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/862578271422042112" data-datetime="2017-05-11T08:01:00+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;GPU Data Frame provides &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Democratization, Acceleration and Production. More from &lt;a href="https://twitter.com/@teoliphant:‚Ä¶" target="_blank"&gt;@teoliphant:‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/G9TaMqDnD3" title="https://t.co/G9TaMqDnD3" target="_blank"&gt;https://t.co/G9TaMqDnD3&lt;/a&gt;&lt;/p&gt;‚Äî Continuum Analytics (@ContinuumIO) &lt;a href="https://twitter.com/ContinuumIO/status/863091436115374084" data-datetime="2017-05-12T18:00:08+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;4 Python libraries for building great command-line user interfaces &lt;a href="https://t.co/ReGxw248Yk" title="https://t.co/ReGxw248Yk" target="_blank"&gt;https://t.co/ReGxw248Yk&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/861989146373607424" data-datetime="2017-05-09T17:00:02+00:00"&gt;May 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to recover lost Python source code if it's still resident in-memory &lt;a href="https://t.co/hwWe0jGaFP" title="https://t.co/hwWe0jGaFP" target="_blank"&gt;https://t.co/hwWe0jGaFP&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/863417413622087685" data-datetime="2017-05-13T15:35:27+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Teach your Pythons to talk with Alexa and PythonAnywhere: &lt;a href="https://t.co/IsLsIW5oo3" title="https://t.co/IsLsIW5oo3" target="_blank"&gt;https://t.co/IsLsIW5oo3&lt;/a&gt;&lt;/p&gt;‚Äî PythonAnywhere (@pythonanywhere) &lt;a href="https://twitter.com/pythonanywhere/status/862627536274165761" data-datetime="2017-05-11T11:16:46+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Lap Around Python in Visual Studio 2017 &lt;a href="https://t.co/pFUvN0yUXl" title="https://t.co/pFUvN0yUXl" target="_blank"&gt;https://t.co/pFUvN0yUXl&lt;/a&gt; &lt;a href="https://t.co/LN9GWDfoLY" title="https://t.co/LN9GWDfoLY" target="_blank"&gt;https://t.co/LN9GWDfoLY&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/863183871386537990" data-datetime="2017-05-13T00:07:26+00:00"&gt;May 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Publish Your Package on PyPI &lt;a href="https://t.co/T0jUGsip5F" title="https://t.co/T0jUGsip5F" target="_blank"&gt;https://t.co/T0jUGsip5F&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/863123374993661952" data-datetime="2017-05-12T20:07:03+00:00"&gt;May 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Another great image recognition post by &lt;a href="https://twitter.com/@PyImageSearch:" target="_blank"&gt;@PyImageSearch:&lt;/a&gt; Drowsiness detection with &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; and OpenCV &lt;a href="https://t.co/YNXIV5ER5J" title="https://t.co/YNXIV5ER5J" target="_blank"&gt;https://t.co/YNXIV5ER5J&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/862637761421090818" data-datetime="2017-05-11T11:57:24+00:00"&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Give that data to your users. &lt;a href="https://twitter.com/@cassidoo" target="_blank"&gt;@cassidoo&lt;/a&gt; shows you how to build a web app w/ Vue.js, complete with a working backend &lt;a href="https://t.co/BIDtGKlS5I" title="https://t.co/BIDtGKlS5I" target="_blank"&gt;https://t.co/BIDtGKlS5I&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/862023116473630720" data-datetime="2017-05-09T19:15:01+00:00"&gt;May 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@cyb3rops:" target="_blank"&gt;@cyb3rops:&lt;/a&gt; Schr√∂dingers Backup &lt;a href="https://twitter.com/search/#Ransomware" target="_blank"&gt;#Ransomware&lt;/a&gt; &lt;a href="https://twitter.com/search/#WannaCry" target="_blank"&gt;#WannaCry&lt;/a&gt; üò∏ &lt;a href="https://t.co/eh0ptYjpw9" title="https://t.co/eh0ptYjpw9" target="_blank"&gt;https://t.co/eh0ptYjpw9&lt;/a&gt;&lt;/p&gt;‚Äî Benjamin Spak (@benjaminspak) &lt;a href="https://twitter.com/benjaminspak/status/863627722664415232" data-datetime="2017-05-14T05:31:09+00:00"&gt;May 14, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="twilio"></category><category term="javascript"></category><category term="beginners"></category><category term="webscraping"></category><category term="PyPI"></category><category term="AI"></category><category term="pandoc"></category><category term="git"></category><category term="Continuum"></category><category term="cli"></category><category term="Alexa"></category><category term="flask"></category><category term="matplotlib"></category><category term="visual studio"></category><category term="OpenCV"></category></entry><entry><title>Code Challenge 18 - Get Recommendations</title><link href="https://pybit.es/codechallenge18.html" rel="alternate"></link><published>2017-05-08T09:30:00+02:00</published><updated>2017-05-08T09:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-08:/codechallenge18.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;
&lt;p&gt;Ah what if you don't have or like Twitter?! Feel free to use any social media site where you can parse updates from people you follow or respect. Or use your favorite service, for example &lt;a href="https://www.goodreads.com/"&gt;Goodreads&lt;/a&gt; in case of books.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app and put the key/secret in a private (not under version control) config file or store them in env variables (os.environ). Again if using another API, follow similar steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install &lt;a href="https://twython.readthedocs.io/en/latest/"&gt;Twython&lt;/a&gt;, &lt;a href="http://www.tweepy.org/"&gt;Tweepy&lt;/a&gt; or your favorite Twitter API module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the updates from your followers. If you don't follow a lot of people you could also work with a set of predefined Twitter handles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Come up with a way to identify recommendations of your choice (books / movies / music / whatever you like).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want recommendations, so check if the updates are positive (check &lt;a href="http://pybit.es/codechallenge07_review.html"&gt;this challenge&lt;/a&gt; where we used TextBlob, however use any tool you want).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Optional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go beyond stdout by notifying the user either by tweet (already using the Twitter API so should be easy) or email (cache the results).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tie this into a simple Flask app / front-end, &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/038"&gt;here&lt;/a&gt; is some code to get Twitter login working in Flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it more intelligent. Ask the user for his/her preferences upfront and use an algorithm (k-means clustering maybe?) to make relevant recommendations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Twitter"></category><category term="books"></category><category term="recommendations"></category><category term="API"></category><category term="TextBlob"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast - Review</title><link href="https://pybit.es/codechallenge17_review.html" rel="alternate"></link><published>2017-05-07T23:59:00+02:00</published><updated>2017-05-07T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-07:/codechallenge17_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge17.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge17.html"&gt;Never Miss a Good Podcast&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Wow, this challenge led to some great learning! We got 3 Pull Requests (PRs) which we just merged into our Community branch. Don't want to miss your favorite podcast anymore? Here are some solutions that get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; built "Podcaster" providing a rich command line interface. Really nice documentation (lot of screenshots) in his README. It uses SQLAlchemy for the back-end and click for the CLI interface (good reminder we need to check this module out!). Another nice feature is that it lets you download episodes. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/clamytoe"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/cverna"&gt;cverna&lt;/a&gt; wrote a script that fetches the feed of podcastinit.com (keep it Python!) - all nicely done in one script using sqlite3 and feedparser. Cron is done at the OS level (/etc/cron.weekly). Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/cverna"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jhervas"&gt;jhervas&lt;/a&gt; wrote "Personal Podcast Assistant": a script that will manage a database with your favorite podcasts, notifying you by email when it finds new podcasts. It uses the schedule module for cron (schedule.every().wednesday.at("10:52").do(main) - nice). The script even tries to install the required packages. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/jhervas"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used feedparser to parse a podcast feed which can be given with the --feed option. We also used SQLAlchemy to keep track of episodes and status (done = emailed out). We also print some stats at the bottom of each mail (e.g. "Podcast consumption stats: 0.9% done [1 of 111]"). We tried to make the code modular (package) and wrote some tests. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/bbelderbos"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best way to learn is to play around with these projects doing a git pull of the Community branch.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again we really enjoyed these nice solutions and we are pumped to deliver more challenges so you can learn by building cool stuff.&lt;/p&gt;
&lt;p&gt;Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category><category term="review"></category></entry><entry><title>Twitter digest 2017 week 18</title><link href="https://pybit.es/twitter_digest_201718.html" rel="alternate"></link><published>2017-05-07T12:37:00+02:00</published><updated>2017-05-07T12:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-07:/twitter_digest_201718.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;100 days of algorithms in Python &lt;a href="https://t.co/IDbKtVNq3G" title="https://t.co/IDbKtVNq3G" target="_blank"&gt;https://t.co/IDbKtVNq3G&lt;/a&gt; by &lt;a href="https://twitter.com/@athena_maker" target="_blank"&gt;@athena_maker&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/860224295812833280" data-datetime="2017-05-04T20:07:08+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Generate word clouds in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; with wordcloud package: &lt;a href="https://t.co/hUKyZnCQ0b" title="https://t.co/hUKyZnCQ0b" target="_blank"&gt;https://t.co/hUKyZnCQ0b&lt;/a&gt; &lt;a href="https://t.co/PUFsXtTPox" title="https://t.co/PUFsXtTPox" target="_blank"&gt;https://t.co/PUFsXtTPox&lt;/a&gt; &lt;a href="https://t.co/PT2zTRshVS" title="https://t.co/PT2zTRshVS" target="_blank"&gt;https://t.co/PT2zTRshVS&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/860403698207305730" data-datetime="2017-05-05T08:00:01+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Here are a few Python coding tips for every beginner coding geek &lt;a href="https://t.co/ft7J4R88mq" title="https://t.co/ft7J4R88mq" target="_blank"&gt;https://t.co/ft7J4R88mq&lt;/a&gt; via &lt;a href="https://twitter.com/@zeovino" target="_blank"&gt;@zeovino&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/860048622733467648" data-datetime="2017-05-04T08:29:05+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;All in one library for Notifications (SMS, PUSH, EMAIL) &lt;a href="https://t.co/gB71FBTkIK" title="https://t.co/gB71FBTkIK" target="_blank"&gt;https://t.co/gB71FBTkIK&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/859392038462255105" data-datetime="2017-05-02T13:00:03+00:00"&gt;May 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; with scikit-learn: tutorial and cheat sheet - &lt;a href="https://t.co/mEUuqRBp7n" title="https://t.co/mEUuqRBp7n" target="_blank"&gt;https://t.co/mEUuqRBp7n&lt;/a&gt; &lt;a href="https://twitter.com/search/#datascience" target="_blank"&gt;#datascience&lt;/a&gt; &lt;a href="https://t.co/IvUY5YuFff" title="https://t.co/IvUY5YuFff" target="_blank"&gt;https://t.co/IvUY5YuFff&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/860585201210204160" data-datetime="2017-05-05T20:01:15+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Using Python unittest in IPython o... &lt;a href="https://t.co/FBLWn4uxbA" title="https://t.co/FBLWn4uxbA" target="_blank"&gt;https://t.co/FBLWn4uxbA&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#ipython" target="_blank"&gt;#ipython&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/860288380529242112" data-datetime="2017-05-05T00:21:47+00:00"&gt;May 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Jupyter &amp;amp; Python in the corporate LAN ‚Äì Olivier Borderies ‚Äì Medium &lt;a href="https://t.co/dpLAA2JWT8" title="https://t.co/dpLAA2JWT8" target="_blank"&gt;https://t.co/dpLAA2JWT8&lt;/a&gt; &lt;a href="https://t.co/VrS0n2ElJb" title="https://t.co/VrS0n2ElJb" target="_blank"&gt;https://t.co/VrS0n2ElJb&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/859698375708594178" data-datetime="2017-05-03T09:17:19+00:00"&gt;May 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to Send SMS Text Messages with AWS Lambda and Python 3.6 &lt;a href="https://t.co/HCQQQHF5Kh" title="https://t.co/HCQQQHF5Kh" target="_blank"&gt;https://t.co/HCQQQHF5Kh&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/860174196466429952" data-datetime="2017-05-04T16:48:04+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;AssistantPi - Bring both Google Assistant and Alexa to yor RPi &lt;a href="https://t.co/EXTCySNACW" title="https://t.co/EXTCySNACW" target="_blank"&gt;https://t.co/EXTCySNACW&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/860917626163388417" data-datetime="2017-05-06T18:02:11+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine Learning In &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; for Trading &lt;a href="https://t.co/uw4LHcDMwi" title="https://t.co/uw4LHcDMwi" target="_blank"&gt;https://t.co/uw4LHcDMwi&lt;/a&gt; &lt;a href="https://t.co/oSiYa7g7qc" title="https://t.co/oSiYa7g7qc" target="_blank"&gt;https://t.co/oSiYa7g7qc&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/860772182426656769" data-datetime="2017-05-06T08:24:15+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Modern languages like Python are effective tools for teaching, learning, exploring, and thinking: &lt;a href="https://t.co/semyLEPxjl" title="https://t.co/semyLEPxjl" target="_blank"&gt;https://t.co/semyLEPxjl&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/860276628068478976" data-datetime="2017-05-04T23:35:05+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ageis:" target="_blank"&gt;@ageis:&lt;/a&gt; TIL in Python 3.5 you can explicitly hint the type of an argument passed to a function, plus type it returns...neat &lt;a href="https://t.co‚Ä¶" title="https://t.co‚Ä¶" target="_blank"&gt;https://t.co‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/860271618387529729" data-datetime="2017-05-04T23:15:11+00:00"&gt;May 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice, looks like &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; has launched Pythonista Cafe, a peer-to-peer learning community for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/BDPZKrW6FQ" title="https://t.co/BDPZKrW6FQ" target="_blank"&gt;https://t.co/BDPZKrW6FQ&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/859438982345740289" data-datetime="2017-05-02T16:06:35+00:00"&gt;May 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wrote a quick article for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; beginners (and me!) on how to pull down an &lt;a href="https://twitter.com/search/#XML" target="_blank"&gt;#XML&lt;/a&gt; file using the requests module. &lt;a href="https://t.co/avuGJOLQ7R" title="https://t.co/avuGJOLQ7R" target="_blank"&gt;https://t.co/avuGJOLQ7R&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/861051452973654016" data-datetime="2017-05-07T02:53:58+00:00"&gt;May 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@frathgeber:" target="_blank"&gt;@frathgeber:&lt;/a&gt; Teams quizzing away at 1st ever &lt;a href="https://twitter.com/@pydatalondon" target="_blank"&gt;@pydatalondon&lt;/a&gt; &lt;a href="https://twitter.com/search/#pub" target="_blank"&gt;#pub&lt;/a&gt; &lt;a href="https://twitter.com/search/#quiz." target="_blank"&gt;#quiz.&lt;/a&gt; We didn't promise easy questions, we didn't say it was fair... &lt;a href="https://twitter.com/search/#P‚Ä¶" target="_blank"&gt;#P‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Marc Garcia (@datapythonista) &lt;a href="https://twitter.com/datapythonista/status/860992943599104000" data-datetime="2017-05-06T23:01:28+00:00"&gt;May 06, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="word cloud"></category><category term="100days"></category><category term="algorithms"></category><category term="beginner"></category><category term="machine learning"></category><category term="tutorial"></category><category term="unittest"></category><category term="jupyter"></category><category term="twilio"></category><category term="aws"></category><category term="raspberry pi"></category><category term="xml"></category><category term="learning"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast</title><link href="https://pybit.es/codechallenge17.html" rel="alternate"></link><published>2017-05-01T11:00:00+02:00</published><updated>2017-05-01T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-01:/codechallenge17.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Of course &lt;a href="https://talkpython.fm/"&gt;Talk Python&lt;/a&gt; is a good use case or &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;another Python Podcast&lt;/a&gt;, but take any podcast you want. &lt;/p&gt;
&lt;p&gt;We want to keep the challenges as open as possible: &lt;a href="http://pybit.es/pages/challenges.html"&gt;last two times&lt;/a&gt; that worked pretty well, and &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;our poll on Twitter&lt;/a&gt; showed the same:&lt;/p&gt;
&lt;p&gt;&lt;img alt="our challenge poll" src="https://pybit.es/images/poll_result.png"&gt;&lt;/p&gt;
&lt;p&gt;However even free form needs some structure to talk the same language. That's why we'd like you to try the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick your favorite podcast and find its feed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can probably use &lt;a href="https://pypi.python.org/pypi/feedparser"&gt;feedparser&lt;/a&gt; to easily parse the feed. Don't re-invent the wheel here, use &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the data into SQLite or some other &lt;a href="https://docs.python.org/3.6/library/persistence.html"&gt;persistence form&lt;/a&gt;. We recommend the &lt;a href="https://docs.python.org/3.6/library/sqlite3.html"&gt;sqlite3&lt;/a&gt; module though: it is stdlib and easy to use. For starters we recommend &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episodes as unplayed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to email from your env. We wrote about this &lt;a href="http://pybit.es/python-smtplib.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/python-MIME.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to use cronjob in your env or do it with Python (see &lt;a href="https://docs.python.org/3.6/library/sched.html"&gt;sched&lt;/a&gt; or &lt;a href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up one or two jobs to: A) send a daily (or weekly) email with podcast link(s) for you to consume, and B) update the DB with new episodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episode(s) as played (done) in the DB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As this is code challenge towards a podcast challenge ("listen all episodes of podcast x"), show some stats in each email, for example: "x % done (y out of z)".&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). Cool PRs will be featured in our end-of-the-week challenge review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API - Review</title><link href="https://pybit.es/codechallenge16_review.html" rel="alternate"></link><published>2017-04-30T23:59:00+02:00</published><updated>2017-04-30T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-30:/codechallenge16_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge16.html"&gt;Query Your Favorite API&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;PyBites&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;As I discussed in my &lt;a href="http://pybit.es/learn-by-doing.html"&gt;post this week&lt;/a&gt; about learning Python, this code challenge was pretty much directed at me.&lt;/p&gt;
&lt;p&gt;Going into this one, I'd never accessed an API in my life!&lt;/p&gt;
&lt;p&gt;I spent the entire week playing around with different APIs but primarily the World of Warcraft and Gmail APIs.&lt;/p&gt;
&lt;p&gt;The work with the Gmail API was great learning but essentially a bust when it came to having a working script. I had an idea in mind as to what I wanted from it but I just wasn't able to get it done.&lt;/p&gt;
&lt;p&gt;I did have a little more success with the &lt;a href="http://wowwiki.wikia.com/wiki/World_of_Warcraft_API"&gt;World of Warcraft API&lt;/a&gt; however. I'm sure it means nothing to most of you reading this but I was able to pull down data about my player character and have it presented in a readable format. (JSON was also new to me!).&lt;/p&gt;
&lt;p&gt;The code for this is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;here&lt;/a&gt;. As it was my first API attempt, it is definitely quite simplistic. The intention is to wrap it all up such that I can recreate my character profile locally.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I used various APIs this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I combined the Twitter and Slack API in my article of this week: &lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;How to Write a Simple Slack Bot to Monitor Your Brand on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For our 100 days challenge I created &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/026"&gt;an interactive script to query the OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the challenge I really wanted to make a start migrating &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; from PHP to Python. As it uses the &lt;a href="https://developers.google.com/books/"&gt;Google Books API&lt;/a&gt; it was a good fit for this challenge. I completed the autocomplete feature using the same JS, but Python/Flask for the back-end:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 1" src="https://pybit.es/images/pcc16_googlebooks1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you select a title it redirects to a page where it pulls more details from the Google Books API (buttons not yet implemented):&lt;/p&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 2" src="https://pybit.es/images/pcc16_googlebooks2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We got 2 cool Pull Requests. We are really stoked you submit code to our repo. Good work folks, keep up the momentum!&lt;/p&gt;
&lt;h3&gt;Clamytoe&lt;/h3&gt;
&lt;p&gt;Martin submitted a cool project called &lt;a href="https://github.com/clamytoe/Github-Profiler"&gt;GitHub-Profiler&lt;/a&gt; where he queries the Github API for a given user, entering 'pybites' it generates this nice page, awesome:&lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 1" src="https://pybit.es/images/pcc16_clamytoe1.png"&gt;&lt;/p&gt;
&lt;p&gt;If bio and repos was not enough, scrolling towards the end it also lists gists: &lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 2" src="https://pybit.es/images/pcc16_clamytoe2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/clamytoe"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Dseptem&lt;/h3&gt;
&lt;p&gt;Another usage of APIs we got from Dante who used the &lt;a href="http://forismatic.com/en/api/"&gt;Forismatic API&lt;/a&gt; to pull random quotes. The author's bio gets crawled from Wikipedia, really nice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 1" src="https://pybit.es/images/pcc16_dseptem1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you hit "Another Quote!" the page refreshes and shows another random quote and its author + bio:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 2" src="https://pybit.es/images/pcc16_dseptem2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="APIs"></category><category term="Github"></category><category term="Google"></category><category term="books"></category><category term="Warcraft"></category><category term="quotes"></category><category term="Wikipedia"></category><category term="Forismatic"></category></entry><entry><title>Twitter digest 2017 week 17</title><link href="https://pybit.es/twitter_digest_201717.html" rel="alternate"></link><published>2017-04-30T20:04:00+02:00</published><updated>2017-04-30T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-30:/twitter_digest_201717.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;colorful - Terminal string styling done right, in Python. &lt;a href="https://t.co/vdfGJkkh4j" title="https://t.co/vdfGJkkh4j" target="_blank"&gt;https://t.co/vdfGJkkh4j&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/857278370341687296" data-datetime="2017-04-26T17:01:05+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Handling Missing Values in Pandas Dataframes ‚Äì &lt;a href="https://t.co/BQxDc0wr4C" title="https://t.co/BQxDc0wr4C" target="_blank"&gt;https://t.co/BQxDc0wr4C&lt;/a&gt; &lt;a href="https://t.co/NW3TMsUzDU" title="https://t.co/NW3TMsUzDU" target="_blank"&gt;https://t.co/NW3TMsUzDU&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/857989319063207937" data-datetime="2017-04-28T16:06:08+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Another shoe drops for legacy Python. &lt;a href="https://twitter.com/@PlayCheckiO" target="_blank"&gt;@PlayCheckiO&lt;/a&gt; just went Python 3 only. &lt;a href="https://t.co/l1MehdEdUw" title="https://t.co/l1MehdEdUw" target="_blank"&gt;https://t.co/l1MehdEdUw&lt;/a&gt; &lt;a href="https://t.co/dmqfiuiDWT" title="https://t.co/dmqfiuiDWT" target="_blank"&gt;https://t.co/dmqfiuiDWT&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/856925972293181445" data-datetime="2017-04-25T17:40:47+00:00"&gt;April 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Boolean logic: why is this true? &lt;a href="https://t.co/42q1xdsfgc" title="https://t.co/42q1xdsfgc" target="_blank"&gt;https://t.co/42q1xdsfgc&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/858005618317242369" data-datetime="2017-04-28T17:10:55+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∫üêç See how list comprehensions work "behind the scenes" &lt;a href="https://t.co/bxYlDLkpRp" title="https://t.co/bxYlDLkpRp" target="_blank"&gt;https://t.co/bxYlDLkpRp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/858512985458966532" data-datetime="2017-04-30T02:47:00+00:00"&gt;April 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I just wrote about my experiences and opinions of Python 3.6's f-strings: &lt;a href="https://t.co/iPefSJxKVv" title="https://t.co/iPefSJxKVv" target="_blank"&gt;https://t.co/iPefSJxKVv&lt;/a&gt;&lt;/p&gt;‚Äî Daniel Roy Greenfeld (@pydanny) &lt;a href="https://twitter.com/pydanny/status/857324660026781696" data-datetime="2017-04-26T20:05:01+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Code laced with if-statements around or after every function call might not be taking full advantage of exceptions.&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/856663816981041152" data-datetime="2017-04-25T00:19:04+00:00"&gt;April 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Try Deep Learning in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; now with a fully pre-configured VM &lt;a href="https://t.co/DLqHzbqr29" title="https://t.co/DLqHzbqr29" target="_blank"&gt;https://t.co/DLqHzbqr29&lt;/a&gt; &lt;a href="https://t.co/x4dZ0Vq7kI" title="https://t.co/x4dZ0Vq7kI" target="_blank"&gt;https://t.co/x4dZ0Vq7kI&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/858325799094468609" data-datetime="2017-04-29T14:23:12+00:00"&gt;April 29, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@nixcraft:" target="_blank"&gt;@nixcraft:&lt;/a&gt; Why Unix has short command names like rm, mv and so on. &lt;a href="https://twitter.com/search/#linux" target="_blank"&gt;#linux&lt;/a&gt; &lt;a href="https://twitter.com/search/#sysadmin" target="_blank"&gt;#sysadmin&lt;/a&gt; &lt;a href="https://twitter.com/search/#macos" target="_blank"&gt;#macos&lt;/a&gt; &lt;a href="https://twitter.com/search/#freebsd" target="_blank"&gt;#freebsd&lt;/a&gt; &lt;a href="https://twitter.com/search/#openbsd" target="_blank"&gt;#openbsd&lt;/a&gt; &lt;a href="https://twitter.com/search/#netbsd" target="_blank"&gt;#netbsd&lt;/a&gt; &lt;a href="https://t.co/unrw‚Ä¶" title="https://t.co/unrw‚Ä¶" target="_blank"&gt;https://t.co/unrw‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/856468191911870464" data-datetime="2017-04-24T11:21:44+00:00"&gt;April 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;DevOops - Python script to monitor services, dispatch SMS on fail, and attempt restart. &lt;a href="https://t.co/bLSzfBgrNX" title="https://t.co/bLSzfBgrNX" target="_blank"&gt;https://t.co/bLSzfBgrNX&lt;/a&gt;&lt;/p&gt;‚Äî Python Trending (@pythontrending) &lt;a href="https://twitter.com/pythontrending/status/858010457235501056" data-datetime="2017-04-28T17:30:08+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Develop your AWS Lambda functions using Python 3.6. Learn more: &lt;a href="https://t.co/UbAkBJqWkG" title="https://t.co/UbAkBJqWkG" target="_blank"&gt;https://t.co/UbAkBJqWkG&lt;/a&gt; &lt;a href="https://t.co/42VkKWlWL5" title="https://t.co/42VkKWlWL5" target="_blank"&gt;https://t.co/42VkKWlWL5&lt;/a&gt;&lt;/p&gt;‚Äî Amazon Web Services (@awscloud) &lt;a href="https://twitter.com/awscloud/status/858509758969466880" data-datetime="2017-04-30T02:34:11+00:00"&gt;April 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;BlockPy ‚Äì Introductory Python Programming Blockly Environment &lt;a href="https://t.co/uiWPWzqtJR" title="https://t.co/uiWPWzqtJR" target="_blank"&gt;https://t.co/uiWPWzqtJR&lt;/a&gt; &lt;a href="https://t.co/UxjiR1jdDD" title="https://t.co/UxjiR1jdDD" target="_blank"&gt;https://t.co/UxjiR1jdDD&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/857593478884229120" data-datetime="2017-04-27T13:53:13+00:00"&gt;April 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Quick Introduction to the Numpy Library &lt;a href="https://t.co/gXlxdMWq1S" title="https://t.co/gXlxdMWq1S" target="_blank"&gt;https://t.co/gXlxdMWq1S&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/857737535191105536" data-datetime="2017-04-27T23:25:39+00:00"&gt;April 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;`is` operator tests if variables point to the same object: &amp;gt;&amp;gt;&amp;gt; a = [1, 2] &amp;gt;&amp;gt;&amp;gt; b = [1, 2] &amp;gt;&amp;gt;&amp;gt; c = a &amp;gt;&amp;gt;&amp;gt; a is b False &amp;gt;&amp;gt;&amp;gt; a is c True &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/857082055837884417" data-datetime="2017-04-26T04:01:00+00:00"&gt;April 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;If faxing ASCII portraits of yourself to your friends is your thing, &lt;a href="https://twitter.com/@devinrader" target="_blank"&gt;@devinrader&lt;/a&gt; has you covered. &lt;a href="https://twitter.com/search/#nodejs‚Ä¶" target="_blank"&gt;#nodejs‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/GVYBiYOX7U" title="https://t.co/GVYBiYOX7U" target="_blank"&gt;https://t.co/GVYBiYOX7U&lt;/a&gt;&lt;/p&gt;‚Äî twilio (@twilio) &lt;a href="https://twitter.com/twilio/status/857993319368011777" data-datetime="2017-04-28T16:22:02+00:00"&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="terminal"></category><category term="ascii"></category><category term="pandas"></category><category term="booleans"></category><category term="strings"></category><category term="deep learning"></category><category term="scripts"></category><category term="aws"></category><category term="lambda"></category><category term="numpy"></category><category term="unix"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API</title><link href="https://pybit.es/codechallenge16.html" rel="alternate"></link><published>2017-04-24T00:01:00+02:00</published><updated>2017-04-24T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-24:/codechallenge16.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things.&lt;/p&gt;
&lt;p&gt;We are eager to see what you come up with. If you want to share your work please do so &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;via our new PR proc&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data.&lt;/p&gt;
&lt;p&gt;Lack inspiration? Here are some ideas to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a Twitter digest or search for recommended books by your followers (we used the &lt;a href="https://dev.twitter.com/rest/public"&gt;Twitter API&lt;/a&gt; before, see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a Slack bot, for example to monitor Twitter (we will post an article this week how!). We have used the Slack API before, see &lt;a href="http://pybit.es/flask-api-part2.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/simple-chatbot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a notification email of series being aired this week, using &lt;a href="http://thetvdb.com"&gt;TheTVDB&lt;/a&gt; and/or movies premieres using &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull a bunch of movie metadata using &lt;a href="http://www.omdbapi.com/"&gt;OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check reddit for useful (Python) threads using the &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull your music playlists / metadata from &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Republish your Instagram photos to your blog &lt;a href="https://www.instagram.com/developer/"&gt;via their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump your friends' birthdays in your own DB using the &lt;a href="https://developers.facebook.com/"&gt;Facebook API&lt;/a&gt;. The FB API is huge, ranging from FB login to leveraging their powerful &lt;a href="https://developers.facebook.com/docs/graph-api"&gt;Graph API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do cool stuff with Google APIs: e.g. calendar, books, drive, Gmail, translate, Youtube, &lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;wow they really have a lot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, you probably have seen &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;this awesome example&lt;/a&gt; some weeks ago? If not, check it out!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query the weather via &lt;a href="https://openweathermap.org/api"&gt;OpenWeatherMap&lt;/a&gt; (example &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Still searching ideas? Check out &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;this thread&lt;/a&gt; or &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using one API is cool, combining two is even more powerful (e.g. Twitter + Slack, Google + FB, or whatever combination). There are so many options here, we probably reserve another challenge to do more of this (if you like it).&lt;/p&gt;
&lt;p&gt;If you are going to call an API repeatedly while developing you might want to consider &lt;a href="http://pybit.es/requests-cache.html"&gt;a library like Requests-cache&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="APIs"></category><category term="movies"></category><category term="music"></category><category term="Slack"></category><category term="Twitter"></category><category term="weather"></category></entry><entry><title>Twitter digest 2017 week 16</title><link href="https://pybit.es/twitter-digest-2017-week-16.html" rel="alternate"></link><published>2017-04-23T20:04:00+02:00</published><updated>2017-04-23T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-23:/twitter-digest-2017-week-16.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;AWS now supports &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6! &lt;a href="https://t.co/7mAsHzZM2e" title="https://t.co/7mAsHzZM2e" target="_blank"&gt;https://t.co/7mAsHzZM2e&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/854445536937684992" data-datetime="2017-04-18T21:24:25+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Image Processing in Python with Pillow &lt;a href="https://t.co/JosVZQaIFf" title="https://t.co/JosVZQaIFf" target="_blank"&gt;https://t.co/JosVZQaIFf&lt;/a&gt; by &lt;a href="https://twitter.com/@joyceechessa" target="_blank"&gt;@joyceechessa&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/855271649851068416" data-datetime="2017-04-21T04:07:06+00:00"&gt;April 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn how to generate passwords using Python &lt;a href="https://t.co/HJwd3mpyrj" title="https://t.co/HJwd3mpyrj" target="_blank"&gt;https://t.co/HJwd3mpyrj&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learntocode" target="_blank"&gt;#learntocode&lt;/a&gt; &lt;a href="https://t.co/sPDXhx5fhA" title="https://t.co/sPDXhx5fhA" target="_blank"&gt;https://t.co/sPDXhx5fhA&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/854367987259912192" data-datetime="2017-04-18T16:16:16+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Python books in 2017 - ReactDOM &lt;a href="https://t.co/PFAaM0ttkZ" title="https://t.co/PFAaM0ttkZ" target="_blank"&gt;https://t.co/PFAaM0ttkZ&lt;/a&gt; via &lt;a href="https://twitter.com/@gp_pulipaka" target="_blank"&gt;@gp_pulipaka&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/855663018834898944" data-datetime="2017-04-22T06:02:15+00:00"&gt;April 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Use folium to generate interactive webmaps from &lt;a href="https://twitter.com/search/#python." target="_blank"&gt;#python.&lt;/a&gt; &lt;a href="https://t.co/J6tVWDq1Uf" title="https://t.co/J6tVWDq1Uf" target="_blank"&gt;https://t.co/J6tVWDq1Uf&lt;/a&gt; &lt;a href="https://t.co/F6pONmTu58" title="https://t.co/F6pONmTu58" target="_blank"&gt;https://t.co/F6pONmTu58&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/854217934297718785" data-datetime="2017-04-18T06:20:00+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python power comes to SQL Server 2017 &lt;a href="https://t.co/GpfbnizXNO" title="https://t.co/GpfbnizXNO" target="_blank"&gt;https://t.co/GpfbnizXNO&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/855979552723619840" data-datetime="2017-04-23T03:00:03+00:00"&gt;April 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just published a new blog article on the CPython compiler- "modifying the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; language in 6 minutes". &lt;a href="https://t.co/q3XeiUvSVd" title="https://t.co/q3XeiUvSVd" target="_blank"&gt;https://t.co/q3XeiUvSVd&lt;/a&gt;&lt;/p&gt;‚Äî Anthony Shaw (@anthonypjshaw) &lt;a href="https://twitter.com/anthonypjshaw/status/854070950723108864" data-datetime="2017-04-17T20:35:57+00:00"&gt;April 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn a Python script for automating the process of publishing podca... &lt;a href="https://t.co/7fLlIiLv5X" title="https://t.co/7fLlIiLv5X" target="_blank"&gt;https://t.co/7fLlIiLv5X&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/855199091394887680" data-datetime="2017-04-20T23:18:46+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; TensorFlow Tutorial - Build a Neural Network &lt;a href="https://t.co/VGD3sSQe7U" title="https://t.co/VGD3sSQe7U" target="_blank"&gt;https://t.co/VGD3sSQe7U&lt;/a&gt; &lt;a href="https://t.co/hYicimCReb" title="https://t.co/hYicimCReb" target="_blank"&gt;https://t.co/hYicimCReb&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/855137575123562496" data-datetime="2017-04-20T19:14:20+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I couldn't find anything like this so I started my own list: The Ultimate List of Python Podcasts üéôüêç&lt;a href="https://t.co/LFYiXMuv2a" title="https://t.co/LFYiXMuv2a" target="_blank"&gt;https://t.co/LFYiXMuv2a&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/854503314444177412" data-datetime="2017-04-19T01:14:00+00:00"&gt;April 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What is python .. ("dot dot") notation syntax? [Score:20] &lt;a href="https://t.co/ffQdyilROo" title="https://t.co/ffQdyilROo" target="_blank"&gt;https://t.co/ffQdyilROo&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/854610723573555200" data-datetime="2017-04-19T08:20:49+00:00"&gt;April 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The Periodic Table of Data Science, using research &amp;amp; survey data from &lt;a href="https://twitter.com/@kdnuggets" target="_blank"&gt;@kdnuggets&lt;/a&gt; &lt;a href="https://twitter.com/@OReillyMedia" target="_blank"&gt;@OReillyMedia&lt;/a&gt; &lt;a href="https://twitter.com/@Gartner_inc‚Ä¶" target="_blank"&gt;@Gartner_inc‚Ä¶&lt;/a&gt; &lt;a href="https://t.co/oHp9kqGKsH" title="https://t.co/oHp9kqGKsH" target="_blank"&gt;https://t.co/oHp9kqGKsH&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/855099476872228867" data-datetime="2017-04-20T16:42:56+00:00"&gt;April 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Announcing episode 22 of &lt;a href="https://twitter.com/@pythonbytes," target="_blank"&gt;@pythonbytes,&lt;/a&gt; PYTHONPATH considered harmful &lt;a href="https://t.co/82zBSRPtcP" title="https://t.co/82zBSRPtcP" target="_blank"&gt;https://t.co/82zBSRPtcP&lt;/a&gt; cc &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt;&lt;/p&gt;‚Äî Python Bytes Podcast (@pythonbytes) &lt;a href="https://twitter.com/pythonbytes/status/854481234424156161" data-datetime="2017-04-18T23:46:16+00:00"&gt;April 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Not surprisingly, I agree: Thinking like a programmer helps you tackle all kinds of problems in life:‚Ä¶ &lt;a href="https://t.co/95hPXoZBsu" title="https://t.co/95hPXoZBsu" target="_blank"&gt;https://t.co/95hPXoZBsu&lt;/a&gt;&lt;/p&gt;‚Äî Bill Gates (@BillGates) &lt;a href="https://twitter.com/BillGates/status/853962277531385862" data-datetime="2017-04-17T13:24:07+00:00"&gt;April 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;"How to explain a layperson why a developer should not be interrupted while neck-deep in coding?" &lt;a href="https://t.co/T7mnQsw6hh" title="https://t.co/T7mnQsw6hh" target="_blank"&gt;https://t.co/T7mnQsw6hh&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/855842389029777408" data-datetime="2017-04-22T17:55:00+00:00"&gt;April 22, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="aws"></category><category term="pillow"></category><category term="passwords"></category><category term="books"></category><category term="folium"></category><category term="sql"></category><category term="automation"></category><category term="machine learning"></category><category term="tensorflow"></category><category term="podcasts"></category><category term="data science"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App - Review</title><link href="https://pybit.es/codechallenge15_review.html" rel="alternate"></link><published>2017-04-22T17:20:00+02:00</published><updated>2017-04-22T17:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-22:/codechallenge15_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge15.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge15.html"&gt;Create a Simple Flask App&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;This was one of the best challenges so far. We have 3 cool apps to show today.&lt;/p&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;This has to have been one of the most satisfying projects of my life. Why? Because, for the first time I successfully coded up an application with a front end, a back end &lt;em&gt;and&lt;/em&gt; persistent storage!&lt;/p&gt;
&lt;p&gt;&lt;img alt="julian's meal tracker" src="https://pybit.es/images/meal-tracker.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first thing you'll notice is that the page looks like it's straight out of the early 90's. (My CSS/Bootstrap game isn't very strong yet so settle down). I figured it was more important to get the app side working first. Styling can and will be improved later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a very simple program that asks you for the last thing you ate and drank and tracks it in a database. You can then print out the "meal history" (ie, dump of the db) on another web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is run within an &lt;em&gt;app.py&lt;/em&gt; file. I can definitely go back and refactor this code to be more Pythonic. For example, I control the connection to the sqlite db using a &lt;em&gt;with&lt;/em&gt; statement. You can see this statement occur three times in the program which is way too much repetition for my liking!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most difficult thing to get right was the passing of the data from the form back to the Python script for storage. The difficulty was more in wrapping my head around how this worked as I wasn't 100% across the whole HTTP GET and POST methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point of learning: In my &lt;em&gt;def index()&lt;/em&gt; function, the first load of the web page causes the return value to be passed to the page straight away. The entire if statement isn't processed &lt;strong&gt;until the POST request is made by submitting the form&lt;/strong&gt;. (Figuring this out was like reaching enlightenment).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent an entire evening this week learning sqlite3 just for this challenge. Totally worth it. If you don't know it already, do it. It's a wonderful way of storing data! It's also super handy being able to view the .db file in the SQLite DB browser to sanity check your app is doing what it's supposed to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I used a &lt;em&gt;lot&lt;/em&gt; of different resources to learn this.(Shameless plug alert!): I used our existing &lt;a href="http://pybit.es/tag/flask.html"&gt;PyBites Articles on Flask&lt;/a&gt; for the most part but also &lt;a href="https://www.youtube.com/watch?v=DIcpEg77gdE"&gt;this great video on Flask&lt;/a&gt; by the Miguel Grinberg.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: I can't wait to continue work on this app. The next step will be refactoring and finishing some UX features (eg: a return button on the second page) and then to get this running on Heroku or AWS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I scratched my own itch building a reading planner using &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; and copied the PureCSS from &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;my previous app&lt;/a&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="bob's reading planner" src="https://pybit.es/images/reading-planner.png"&gt;&lt;/p&gt;
&lt;p&gt;This was a great exercise using SQLAlchemy and made me more confident to rewrite &lt;a href="http://fbreadinglist.com/"&gt;My Reading List&lt;/a&gt; (PHP) using an ORM, be it Flask or Django.&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/reading_planner"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think this was one of the best challenges so far and I am happy to see that our code challenges trigger people to really practice and learn, building awesome stuff. Which brings us on:&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We had a really nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt; who built a "no frills task manager that's really intuitive and simple to use." - under the covers it uses Flask-SQLAlchemy and some very nice styling using Bootstrap. Here is us using his nice app:&lt;/p&gt;
&lt;p&gt;&lt;img alt="martin's task manager" src="https://pybit.es/images/task-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/community/15/clamytoe"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="task manager"></category><category term="reading planner"></category><category term="meal history"></category></entry><entry><title>Behind the Scenes of PyBites - a Blog for Passionate Pythonistas (Post #100 Special)</title><link href="https://pybit.es/special-building-pybites.html" rel="alternate"></link><published>2017-04-18T08:24:00+02:00</published><updated>2017-04-18T08:24:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-18:/special-building-pybites.html</id><summary type="html">&lt;p&gt;Python is hot according to &lt;a href="http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/"&gt;Dice&lt;/a&gt;. It‚Äôs an easy language to learn, has an elegant design and is widely used. In this article we proudly present our now 4 months journey into building PyBites. It‚Äôs a reflection of what we achieved and lessons learned. We hope to inspire fellow developers to start their own venture. It is very rewarding!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is hot according to &lt;a href="http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/"&gt;Dice&lt;/a&gt;. It‚Äôs an easy language to learn, has an elegant design and is widely used. In this article we proudly present our now 4 months journey into building PyBites. It‚Äôs a reflection of what we achieved and lessons learned. We hope to inspire fellow developers to start their own venture. It is very rewarding!&lt;/p&gt;
&lt;h2&gt;__init__.py&lt;/h2&gt;
&lt;p&gt;Julian and Bob met (virtually) 8 years ago both working for Sun Microsystems. As we wrote on our about page: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They quickly realised that their mutual enthusiasm for technology, programming and self development was unrivalled and have thus remained the best of friends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had already been sharing our passion for Python for some time. We had not done any major publicly documented project / effort together though. Hence we needed a platform ‚Ä¶&lt;/p&gt;
&lt;h3&gt;Just get started&lt;/h3&gt;
&lt;p&gt;Around last Christmas break we decided to take action. It is important to take that first step, it‚Äôs also the hardest part. Don‚Äôt expect your first iteration to be perfect. In fact perfectionism might be your biggest enemy.&lt;/p&gt;
&lt;p&gt;Looking back we made a lot of decisions on the fly, you simply can‚Äôt plan for everything in advance. Like writing an article: you have an outline, yet the meat of the story presents itself while writing.&lt;/p&gt;
&lt;h3&gt;Have a success buddy&lt;/h3&gt;
&lt;p&gt;Physical proximity is not required to start a successful project / partnership. Being held accountable is. As Darren Hardy succinctly wrote in &lt;a href="http://www.amazon.com/dp/159315724X/?tag=pyb0f-20"&gt;The Compound Effect&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find a success buddy: there are few things as powerful as two people locked arm and arm marching forward the same goal. To up your chances of success, get a success buddy, someone who‚Äôll keep you accountable as you cement your new habit while you return the favor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;First steps: assert toolset and domain name&lt;/h3&gt;
&lt;p&gt;Based on prior good experience with Jekyll and Github Pages (git + performance), we decided to use a static site generator. To keep it Python we forced ourselves to use and learn &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;. We used an &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;existing Pelican theme&lt;/a&gt;. Terminal (Vim), markdown, Git(hub), we felt right at home.&lt;/p&gt;
&lt;p&gt;We also put some thought into picking a cool domain name &lt;em&gt;pybit.es&lt;/em&gt;: short, startswith(‚Äòpy‚Äô), bite as in learning Python in bite-sized units and .es is from Spain (couldn‚Äôt figure out what to do with .au ...). After a quick hello world post &lt;a href="http://bobbelderbos.com/assets/pybites_home.png"&gt;we were online&lt;/a&gt;, now we had to deliver ...&lt;/p&gt;
&lt;h2&gt;Grinding it out&lt;/h2&gt;
&lt;p&gt;At the start you are just writing, building up a content base. It is hard work and you have to persist. There is no shortcut. You will see a few visitors a day, no comments, no shares, it gets pretty lonely at times, self doubt might kick in. The majority give up at this point but, if you stick with it consistently eventually you will get noticed and traffic starts to flow in. &lt;/p&gt;
&lt;p&gt;We had 2 breakpoints in this regard:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We posted the initial idea to Hacker News (appropriately using ‚ÄòShow HN: ...‚Äô) and got &lt;a href="https://news.ycombinator.com/item?id=13274876"&gt;some positive feedback&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a while we recognized that a lot of developers were stuck in the between-Beginner-and-Intermediate stage, so we wrote a &lt;a href="https://redd.it/5sjt3l"&gt;Python resources post&lt;/a&gt; which got a lot of upvotes on the &lt;a href="https://www.reddit.com/r/learnpython/"&gt;learnpython subreddit&lt;/a&gt; and got featured on the &lt;a href="https://pythonbytes.fm/episodes/show/14/lots-of-python-style-and-python-3000-is-3000-days-old"&gt;Python Bytes podcast&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there the ball started rolling.&lt;/p&gt;
&lt;h2&gt;Expose your learning, be unique&lt;/h2&gt;
&lt;p&gt;What makes an interesting blog? We decided from the start that we had to fully expose our learning to get the most out of it. Obviously this takes some courage, especially with the code challenges. Be it writing or coding, it is the best way to learn: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You force yourself to practice at regular intervals, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You care about submitting the best content/code you possibly can, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you get it wrong, you learn even more. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no shame in that. As &lt;a href="https://en.wikiquote.org/wiki/Timothy_Ferriss"&gt;Tim Ferriss said&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A person's success in life can usually be measured by the number of uncomfortable conversations he or she is willing to have. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anybody performing on stage gets criticized at some point, it goes with the territory. It is hard to please everybody, nor should you want that.&lt;/p&gt;
&lt;p&gt;We wanted our blog to be original which meant not limiting ourselves to just &lt;a href="http://pybit.es/pages/articles.html"&gt;articles&lt;/a&gt;. We cannot exactly recall how the &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt; came about, but we needed a vehicle to learn and it didn‚Äôt seem prevalent elsewhere. &lt;/p&gt;
&lt;p&gt;We inquired HN again and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;people seemed interested&lt;/a&gt;. Our weekly code challenges (&lt;a href="https://github.com/pybites/challenges"&gt;140 forks at this writing&lt;/a&gt;) turned out to be a great way to learn from each other, and it is adding an interesting dynamic to our site and brand.&lt;/p&gt;
&lt;h3&gt;Market yourself&lt;/h3&gt;
&lt;p&gt;Brand? Yes. That is the advantage of starting a blog: to help create your brand. We recommend reading &lt;a href="http://www.amazon.com/dp/1617292397/?tag=pyb0f-20"&gt;Soft Skills&lt;/a&gt; for practical advice how to market yourself. &lt;/p&gt;
&lt;p&gt;In our second month we hired a designer to make an attractive logo and this really gave PyBites its unique flavor. We became more active on social media. We reached out to fellow Pythonistas. We got invaluable feedback from our readers. We gained quite some traction from Reddit‚Äôs &lt;a href="https://www.reddit.com/r/learnpython/"&gt;learnpython&lt;/a&gt; (and grew some thicker skin!). &lt;/p&gt;
&lt;p&gt;We started a &lt;a href="https://www.facebook.com/groups/pybites/"&gt;Facebook group&lt;/a&gt;. We even created two Cheat Sheets to condense part of our learning. It is important to spend some time on marketing your content. You can have top-notch content but if nobody can find you, it might as well just not exist. However ...&lt;/p&gt;
&lt;h3&gt;Content is king&lt;/h3&gt;
&lt;p&gt;The number one focus should be content. We write our articles with great care. We try to come up with interesting and varied code challenges. We want to develop our own style and voice. To keep the momentum we also commit to a certain weekly volume of work: one code challenge, two articles, and a news digest.&lt;/p&gt;
&lt;h3&gt;Automate the boring stuff&lt;/h3&gt;
&lt;p&gt;To allow us to focus on the important, automation is key. Although we manually craft our newsletter we get the article links via a cron script. We parse &lt;a href="http://planetpython.org"&gt;Planet Python&lt;/a&gt;, emailing a daily digest to keep up2date. We &lt;a href="http://pybit.es/100days-autotweet.html"&gt;auto-tweet our daily script&lt;/a&gt; for our &lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode challenge&lt;/a&gt; we are doing these days. &lt;/p&gt;
&lt;p&gt;We use a tool to assist in creating &lt;a href="http://pybit.es/pages/news.html"&gt;our weekly Twitter news digest&lt;/a&gt;. We have automatic featured images on our posts (red = challenge, blue = article, green = news, purple = special occasion). Code challenge participation has &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;a process&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;4 months in PyBites is pretty streamlined and that makes things more consistent and compounds to saved time we can use to focus on what matters: the content.&lt;/p&gt;
&lt;h2&gt;Sharpen the saw&lt;/h2&gt;
&lt;p&gt;PyBites made us push the envelope resulting in significant Python learning in the last 4 months. From mastering important concepts of the language to building useful utilities using Pythonic code. If it was not for the blog we would not have had this kind of drive, inspiration nor tooling. &lt;/p&gt;
&lt;p&gt;&lt;img alt="pybites is everywhere" src="https://pybit.es/images/coffee.png"&gt;&lt;/p&gt;
&lt;h2&gt;Building a community&lt;/h2&gt;
&lt;p&gt;From the start we decided to do a weekly newsletter, growing our following. The number of page views only tells you so much. What you really want is returning visitors and loyal followers that want to read your content every week and can provide you with useful feedback. We want to build a community of passionate Pythonistas that want to learn with us (both directions).&lt;/p&gt;
&lt;h3&gt;And we‚Äôre just getting started&lt;/h3&gt;
&lt;p&gt;With this sort of momentum, we only can go forward. With such positive results we are pretty stoked to continue to learn Python inside-out sharing our progress and to keep growing our community. &lt;/p&gt;
&lt;h3&gt;We challenge you&lt;/h3&gt;
&lt;p&gt;If you like this article we ask you one favor: send this to a friend or co-worker. Identify something that passionates you and partner up with somebody to start creating a blog, open source project, or some other platform to share your learning. There is no better way to hone your skills than daily practice and holding each other accountable. &lt;/p&gt;
&lt;p&gt;We‚Äôre eager to hear from you so leave a comment below to share your story / feedback.&lt;/p&gt;
&lt;p&gt;We hope this article has inspired you to &lt;em&gt;take action&lt;/em&gt;. We hope it convinced you that starting a programming endeavor is not that difficult if you are willing to put in &lt;em&gt;consistent&lt;/em&gt; hard work. &lt;/p&gt;
&lt;p&gt;Besides, helping other people get better is highly rewarding in itself and is an invaluable skill in your developer toolkit. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="special"></category><category term="milestone"></category><category term="softskills"></category><category term="learning"></category><category term="lessons"></category><category term="community"></category><category term="pelican"></category><category term="challenge"></category><category term="python"></category><category term="pybites"></category><category term="automation"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App</title><link href="https://pybit.es/codechallenge15.html" rel="alternate"></link><published>2017-04-17T08:40:00+02:00</published><updated>2017-04-17T08:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-17:/codechallenge15.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we‚Äôre going to get down and dirty with Python Flask. Flask is becoming a hot skill to have up your sleeve. We‚Äôre all in with learning it so figure it‚Äôs about time we had a challenge on it! Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we‚Äôre going to get down and dirty with Python Flask. Flask is becoming a hot skill to have in your arsenal so we figure it‚Äôs about time we had a challenge on it! Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We decided to split the challenge into two parts given how time consuming this may be for some. If you can manage it, go for the bonus too!&lt;/p&gt;
&lt;p&gt;The base requirement: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Flask web app that allows you to enter data via a web form&lt;/li&gt;
&lt;li&gt;Data should then be displayed in some way (on the same page or on another page)&lt;/li&gt;
&lt;li&gt;Data should be persistent. It‚Äôs up to you how you store the data, as long as it‚Äôs persistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow the stored data to be manipulated (deleted, edited).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example use case for this could be a To-Do list app.&lt;/p&gt;
&lt;p&gt;This is an open ended challenge. There are very few requirements and many possibilities! It doesn‚Äôt have to look pretty, as long as the functionality is there. Have fun with it, learning Flask can be incredibly satisfying!&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;As we discussed in our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt; last week, it‚Äôs a web framework to allow you to create Python web applications.&lt;/p&gt;
&lt;p&gt;For this challenge you should definitely have some HTML (and CSS) experience. It‚Äôll definitely make things easier.&lt;/p&gt;
&lt;h2&gt;Helpful Resources&lt;/h2&gt;
&lt;p&gt;To help with your learning, here are some resources that should get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/flask-for-loop.html"&gt;Printing Dicts with Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This great (working!) simple &lt;a href="https://github.com/mikicaivosevic/flask-simple-todo"&gt;Flask to-do list app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bob‚Äôs &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Weather Compare App Code&lt;/a&gt; (post coming soon!)&lt;/li&gt;
&lt;li&gt;The offical &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;Flask documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This &lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;beginner video series&lt;/a&gt; from &lt;em&gt;The New Boston&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If you're serious about learning Flask and Python web development checkout &lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;, they have top-notch material on this subject.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="flask"></category><category term="todo"></category></entry><entry><title>Twitter digest 2017 week 15</title><link href="https://pybit.es/twitter_digest_201715.html" rel="alternate"></link><published>2017-04-16T12:57:00+02:00</published><updated>2017-04-16T12:57:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-16:/twitter_digest_201715.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This O‚ÄôReilly report surveys 30 &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; web frameworks and provides a deeper look into six of the most widely used. &lt;a href="https://t.co/1cbRoXqNoj" title="https://t.co/1cbRoXqNoj" target="_blank"&gt;https://t.co/1cbRoXqNoj&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/852588935859638276" data-datetime="2017-04-13T18:26:57+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Chrome Extension that adds direct links to `import` and `from ... import` statements on GitHub &lt;a href="https://t.co/YZGsWHy6Yj" title="https://t.co/YZGsWHy6Yj" target="_blank"&gt;https://t.co/YZGsWHy6Yj&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/853097341678608385" data-datetime="2017-04-15T04:07:10+00:00"&gt;April 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Common Python Programming Mistakes To Avoid &amp;gt;&amp;gt; &lt;a href="https://t.co/HPug5mpFY1" title="https://t.co/HPug5mpFY1" target="_blank"&gt;https://t.co/HPug5mpFY1&lt;/a&gt; &lt;a href="https://t.co/7E1tkutx6O" title="https://t.co/7E1tkutx6O" target="_blank"&gt;https://t.co/7E1tkutx6O&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/853275822060433409" data-datetime="2017-04-15T15:56:23+00:00"&gt;April 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best feature of iTerm2 (&lt;a href="https://t.co/OYKD7OV5Gi):" title="https://t.co/OYKD7OV5Gi):" target="_blank"&gt;https://t.co/OYKD7OV5Gi):&lt;/a&gt; Show Timestamps ‚Äî labels every line with when it appeared *after the fact*. Perfect.&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/851493125394747392" data-datetime="2017-04-10T17:52:35+00:00"&gt;April 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How does the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Super Function work? &lt;a href="https://t.co/KU3UsSGw9C" title="https://t.co/KU3UsSGw9C" target="_blank"&gt;https://t.co/KU3UsSGw9C&lt;/a&gt; &lt;a href="https://twitter.com/search/#learntocode" target="_blank"&gt;#learntocode&lt;/a&gt; &lt;a href="https://twitter.com/search/#coding" target="_blank"&gt;#coding&lt;/a&gt; &lt;a href="https://t.co/Pbl1dcVwn8" title="https://t.co/Pbl1dcVwn8" target="_blank"&gt;https://t.co/Pbl1dcVwn8&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/852160277969866752" data-datetime="2017-04-12T14:03:37+00:00"&gt;April 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding &lt;a href="https://t.co/4Q0PIH4F6x" title="https://t.co/4Q0PIH4F6x" target="_blank"&gt;https://t.co/4Q0PIH4F6x&lt;/a&gt; by &lt;a href="https://twitter.com/@SeekTom" target="_blank"&gt;@SeekTom&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/851859173646024705" data-datetime="2017-04-11T18:07:08+00:00"&gt;April 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Python Books for Beginners 2017 | FreelancingGig Blog - Freelancer Job Tips and Hiring ... &lt;a href="https://t.co/eUJ7ptRZ7y" title="https://t.co/eUJ7ptRZ7y" target="_blank"&gt;https://t.co/eUJ7ptRZ7y&lt;/a&gt; via &lt;a href="https://twitter.com/@_Data_Science_" target="_blank"&gt;@_Data_Science_&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/852980450654134272" data-datetime="2017-04-14T20:22:41+00:00"&gt;April 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Merge two dictionaries: x = {'a':1, 'b':2} y = {'c':3, 'd':4} z = {**x, **y} output: z = {'a': 1, 'b': 2, 'c': 3, 'd': 4} &lt;a href="https://twitter.com/search/#python3" target="_blank"&gt;#python3&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/852828279019057152" data-datetime="2017-04-14T10:18:01+00:00"&gt;April 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Advanced web scraping in Python &lt;a href="https://t.co/ePI9y1xgIh" title="https://t.co/ePI9y1xgIh" target="_blank"&gt;https://t.co/ePI9y1xgIh&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/852416072666009600" data-datetime="2017-04-13T07:00:03+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#DataViz" target="_blank"&gt;#DataViz&lt;/a&gt; in &lt;a href="https://twitter.com/search/#Python:" target="_blank"&gt;#Python:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Bokeh" target="_blank"&gt;#Bokeh&lt;/a&gt; cheat sheet - &lt;a href="https://t.co/6AAXvyGM1q" title="https://t.co/6AAXvyGM1q" target="_blank"&gt;https://t.co/6AAXvyGM1q&lt;/a&gt; &lt;a href="https://t.co/MKNbgbRwyF" title="https://t.co/MKNbgbRwyF" target="_blank"&gt;https://t.co/MKNbgbRwyF&lt;/a&gt;&lt;/p&gt;‚Äî DataCamp (@DataCamp) &lt;a href="https://twitter.com/DataCamp/status/853518411044982785" data-datetime="2017-04-16T08:00:21+00:00"&gt;April 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;üì∞üêç My step-by-step intro to &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Decorators &lt;a href="https://t.co/ATChYGqsIo" title="https://t.co/ATChYGqsIo" target="_blank"&gt;https://t.co/ATChYGqsIo&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/851990002510778368" data-datetime="2017-04-12T02:47:00+00:00"&gt;April 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Calculate the number of days between two dates: &amp;gt;from datetime import datetime as dt &amp;gt;(&lt;a href="https://t.co/0O6FbyJick()" title="https://t.co/0O6FbyJick()" target="_blank"&gt;https://t.co/0O6FbyJick()&lt;/a&gt; - dt(2016,12,31)).days 101&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/851781899387379713" data-datetime="2017-04-11T13:00:04+00:00"&gt;April 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Are you looking for a LINQ equivalent in &lt;a href="https://twitter.com/search/#Python?" target="_blank"&gt;#Python?&lt;/a&gt; Check out &lt;a href="https://twitter.com/@robsmallshire's" target="_blank"&gt;@robsmallshire's&lt;/a&gt; ASQ: &lt;a href="https://t.co/UTUQVXns7x" title="https://t.co/UTUQVXns7x" target="_blank"&gt;https://t.co/UTUQVXns7x&lt;/a&gt; a LINQ-inspired API for Python&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/852535204686176256" data-datetime="2017-04-13T14:53:26+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;EzPyGame - An easier way to use pygame &lt;a href="https://t.co/4qumKQZJVv" title="https://t.co/4qumKQZJVv" target="_blank"&gt;https://t.co/4qumKQZJVv&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pygame" target="_blank"&gt;#pygame&lt;/a&gt;&lt;/p&gt;‚Äî Python Weekly (@PythonWeekly) &lt;a href="https://twitter.com/PythonWeekly/status/852552328251047941" data-datetime="2017-04-13T16:01:29+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;[on my death bed, struggling to speak] me: if..your..unit..test..makes..a..network..call..it's..not..a..unit..test.. [dies]&lt;/p&gt;‚Äî Rebecca Slatkin (@RebeccaSlatkin) &lt;a href="https://twitter.com/RebeccaSlatkin/status/852627030092939274" data-datetime="2017-04-13T20:58:19+00:00"&gt;April 13, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="frameworks"></category><category term="chrome"></category><category term="iterm2"></category><category term="twilio"></category><category term="books"></category><category term="learning"></category><category term="beginners"></category><category term="dictionaries"></category><category term="web scraping"></category><category term="cheat sheet"></category><category term="bokeh"></category><category term="data science"></category><category term="decorators"></category><category term="APIs"></category><category term="pygamels"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators - Review</title><link href="https://pybit.es/codechallenge14_review.html" rel="alternate"></link><published>2017-04-15T01:00:00+02:00</published><updated>2017-04-15T01:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-15:/codechallenge14_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge14.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge14.html"&gt;Write DRY Code With Decorators&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;Getting our hands on decorators we enriched our Python toolkit!  This one was also a lot of fun. See our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/14/decorator-pb.py"&gt;here&lt;/a&gt;. We did a simple timeit one and a more complex mute_exception one. For the latter we needed this week's article: &lt;a href="http://pybit.es/decorator-optional-argument.html"&gt;How to Write a Decorator with an Optional Argument?&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Some other things we learned: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Know the stdlib. Part of what makes these decorators useful is knowing about time, random, the @wraps decorator, partial, the awesome logging module, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we sensed using optional arguments made the mute_exception more versatile. You can run it in various ways: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@mute_exception                                    # works: no args provided = takes defaults (no reraise, returns None)
@mute_exception(reraise=True)                      # works: raises the ZeroDivisionError = crash
@mute_exception(reraise=False, default_return=0)   # works: does not reraise ZeroDivisionError and returns 0 in that case
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used f-strings! We are on Python 3.6 now so we just could no longer resist the temptation :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our &lt;a href="http://pybit.es/vim-tricks.html"&gt;Flake 8 Check Vim shortcut&lt;/a&gt; pays off: the code is more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep reading other blogs and books. We based these decorators on &lt;a href="https://www.blog.pythonlibrary.org/2016/06/09/python-how-to-create-an-exception-logging-decorator/"&gt;How to Create an Exception Logging Decorator&lt;/a&gt; and the almighty &lt;a href="https://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python Cookbook, Third edition&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Output 2 stacked decorators&lt;/h2&gt;
&lt;p&gt;When you run our solution it will print (fake) timings and mute/log the ZeroDivisionError exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python decorator-pb.py

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.755037784576416
div &lt;span class="m"&gt;1&lt;/span&gt;/4 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.25

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.763498067855835
div &lt;span class="m"&gt;2&lt;/span&gt;/5 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.4

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.09057903289794922
div &lt;span class="m"&gt;3&lt;/span&gt;/0 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program did not crash by the divide by 0, logging the exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail decorators.log
...
...
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         ERROR    div raised exception ZeroDivisionError &lt;span class="k"&gt;for&lt;/span&gt; args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;But there is more ... we got a &lt;a href="https://github.com/pybites/challenges/blob/community/14/decorator-clamytoe.py"&gt;nice PR&lt;/a&gt; with two other cool decorators: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boxit - a decorator to draw a box around text&lt;/li&gt;
&lt;li&gt;hashit - a decorator to securely hash passwords (using passlib)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Up&lt;/h2&gt;
&lt;p&gt;As you might have noticed (&lt;a href="http://pybit.es/beginning-flask.html"&gt;here&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/851896144594583552"&gt;here&lt;/a&gt;) we are learning Flask so we thought it would be a great topic for our next challenge coming Monday. Stay tuned ...&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators</title><link href="https://pybit.es/codechallenge14.html" rel="alternate"></link><published>2017-04-10T09:00:00+02:00</published><updated>2017-04-10T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-10:/codechallenge14.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;
&lt;h2&gt;What is a decorator?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated. (&lt;a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator"&gt;wiki&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's basically a wrapper and it is a &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;common design pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are new to this concept we recommend Dan's nice walk-through he published last week: &lt;a href="https://dbader.org/blog/python-decorators"&gt;Python Decorators: A Step-By-Step Introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another great article is RealPython's &lt;a href="https://realpython.com/blog/python/primer-on-python-decorators/"&gt;Primer on Python Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Roll your own!&lt;/h2&gt;
&lt;p&gt;In this week's challenge we invite you to come up with useful decorators for yourself or the greater community. We have included &lt;a href="https://github.com/pybites/challenges/tree/master/14/"&gt;a bit of material&lt;/a&gt; in our repo to get started. &lt;/p&gt;
&lt;p&gt;Tomorrow we will post an article on how to write decorators that take optional arguments. This caused us some pain, but we got it working. It might be useful to write more flexible decorators. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Twitter digest 2017 week 14</title><link href="https://pybit.es/twitter_digest_201714.html" rel="alternate"></link><published>2017-04-09T09:55:00+02:00</published><updated>2017-04-09T09:55:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-09:/twitter_digest_201714.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Started watching Modern &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; LiveLessons by &lt;a href="https://twitter.com/@raymondh," target="_blank"&gt;@raymondh,&lt;/a&gt; just released on &lt;a href="https://twitter.com/@safari," target="_blank"&gt;@safari,&lt;/a&gt; awesome, learning a lot! Thanks &lt;a href="https://t.co/5WoHQJnwkU" title="https://t.co/5WoHQJnwkU" target="_blank"&gt;https://t.co/5WoHQJnwkU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/850810133378736128" data-datetime="2017-04-08T20:38:37+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cheat Sheet: Python Loops &lt;a href="https://t.co/0E3fCwN9ia" title="https://t.co/0E3fCwN9ia" target="_blank"&gt;https://t.co/0E3fCwN9ia&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/jLy8hMeAHY" title="https://t.co/jLy8hMeAHY" target="_blank"&gt;https://t.co/jLy8hMeAHY&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/850393604115881984" data-datetime="2017-04-07T17:03:29+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PYTHON TIPS: How to Run Python and Ruby on Heroku with Multiple Buildpacks &amp;gt;&amp;gt; &lt;a href="https://t.co/ulskG9SHJY" title="https://t.co/ulskG9SHJY" target="_blank"&gt;https://t.co/ulskG9SHJY&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Ruby" target="_blank"&gt;#Ruby&lt;/a&gt; &lt;a href="https://t.co/w5OBjjQ3iK" title="https://t.co/w5OBjjQ3iK" target="_blank"&gt;https://t.co/w5OBjjQ3iK&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/849688734849282053" data-datetime="2017-04-05T18:22:35+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; Useful guide about preparing "AWS Certified Solutions Architect Associate" certification &lt;a href="https://twitter.com/search/#AWS" target="_blank"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/search/#Certification" target="_blank"&gt;#Certification&lt;/a&gt; &lt;a href="https://t.co/d‚Ä¶" title="https://t.co/d‚Ä¶" target="_blank"&gt;https://t.co/d‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/849744862463307776" data-datetime="2017-04-05T22:05:37+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;7 Best python libraries of 2017 - ( New &amp;amp; Innovative) &lt;a href="https://t.co/JuiVt1Ce3o" title="https://t.co/JuiVt1Ce3o" target="_blank"&gt;https://t.co/JuiVt1Ce3o&lt;/a&gt; via &lt;a href="https://twitter.com/@dunebook" target="_blank"&gt;@dunebook&lt;/a&gt; &lt;a href="https://t.co/NwpwqQYkrN" title="https://t.co/NwpwqQYkrN" target="_blank"&gt;https://t.co/NwpwqQYkrN&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/850775904196456448" data-datetime="2017-04-08T18:22:36+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django 1.11 released &lt;a href="https://t.co/Eq7ASnJFpx" title="https://t.co/Eq7ASnJFpx" target="_blank"&gt;https://t.co/Eq7ASnJFpx&lt;/a&gt;&lt;/p&gt;‚Äî Django (@djangoproject) &lt;a href="https://twitter.com/djangoproject/status/849300384627773441" data-datetime="2017-04-04T16:39:25+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Make a dictionary of 2 lists &amp;gt;&amp;gt;&amp;gt; name = ('bob','tim') &amp;gt;&amp;gt;&amp;gt; age = (35,27) &amp;gt;&amp;gt;&amp;gt; d = dict(zip(name,age)) &amp;gt;&amp;gt;&amp;gt; d {'bob': 35, 'tim': 27} by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/849834299985625092" data-datetime="2017-04-06T04:01:00+00:00"&gt;April 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;New PyBites Article: How to Build a Simple &lt;a href="https://twitter.com/search/#Slack" target="_blank"&gt;#Slack&lt;/a&gt; Bot - &lt;a href="https://t.co/aycTca3jEZ" title="https://t.co/aycTca3jEZ" target="_blank"&gt;https://t.co/aycTca3jEZ&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/849381297936007170" data-datetime="2017-04-04T22:00:56+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;python-alexa: A Python framework for Alexa Development &lt;a href="https://t.co/nVJN4x0jdu" title="https://t.co/nVJN4x0jdu" target="_blank"&gt;https://t.co/nVJN4x0jdu&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/850271943865454592" data-datetime="2017-04-07T09:00:03+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; for &lt;a href="https://twitter.com/search/#Finance," target="_blank"&gt;#Finance,&lt;/a&gt; Part I: Yahoo Finance... &lt;a href="https://t.co/VeFNZkMsEf" title="https://t.co/VeFNZkMsEf" target="_blank"&gt;https://t.co/VeFNZkMsEf&lt;/a&gt;&lt;/p&gt;‚Äî LearnDataSci (@LearnDataSci) &lt;a href="https://twitter.com/LearnDataSci/status/849702792545652736" data-datetime="2017-04-05T19:18:27+00:00"&gt;April 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Humble Bundle's New Book Collection Helps You Start... &lt;a href="https://t.co/On91MZrTZd" title="https://t.co/On91MZrTZd" target="_blank"&gt;https://t.co/On91MZrTZd&lt;/a&gt; via &lt;a href="https://twitter.com/@TheSloppyGaming" target="_blank"&gt;@TheSloppyGaming&lt;/a&gt; &lt;a href="https://t.co/DNRpmvZU59" title="https://t.co/DNRpmvZU59" target="_blank"&gt;https://t.co/DNRpmvZU59&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/850003212224614406" data-datetime="2017-04-06T15:12:12+00:00"&gt;April 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Apply a method to a list of objects in parallel using multi-processing [Score:8] &lt;a href="https://t.co/nIje0lrueY" title="https://t.co/nIje0lrueY" target="_blank"&gt;https://t.co/nIje0lrueY&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/850667795767595008" data-datetime="2017-04-08T11:13:01+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;This might come in handy some time: "Managing Cron Jobs Using Python" &lt;a href="https://t.co/KmhLOBOVYp" title="https://t.co/KmhLOBOVYp" target="_blank"&gt;https://t.co/KmhLOBOVYp&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/850768957422403585" data-datetime="2017-04-08T17:55:00+00:00"&gt;April 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Machine Learning: The New Proving Ground for Competitive Advantage - via &lt;a href="https://twitter.com/@techreview" target="_blank"&gt;@techreview&lt;/a&gt; &lt;a href="https://t.co/f4lAiAg72J" title="https://t.co/f4lAiAg72J" target="_blank"&gt;https://t.co/f4lAiAg72J&lt;/a&gt;&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/849309377622310913" data-datetime="2017-04-04T17:15:09+00:00"&gt;April 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I must say this is one of my favorite git commit messages. ;) (suppressing the .idea folder) &lt;a href="https://t.co/2ZUNbkvOan" title="https://t.co/2ZUNbkvOan" target="_blank"&gt;https://t.co/2ZUNbkvOan&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/850449332914368512" data-datetime="2017-04-07T20:44:56+00:00"&gt;April 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="python"></category><category term="safari books"></category><category term="cheatsheet"></category><category term="ruby"></category><category term="heroku"></category><category term="aws"></category><category term="Django"></category><category term="slack"></category><category term="alexa"></category><category term="data science"></category><category term="ebook"></category><category term="cron"></category><category term="machine learning"></category><category term="git"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors - Review</title><link href="https://pybit.es/codechallenge13_review.html" rel="alternate"></link><published>2017-04-08T23:59:00+02:00</published><updated>2017-04-08T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-08:/codechallenge13_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge13.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge13.html"&gt;Highest Rated Movie Directors&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/13/directors.py"&gt;here&lt;/a&gt;. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In get_movies_by_director() we use csv.DictReader to parse the csv file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(MOVIE_DATA) as f:
    for line in csv.DictReader(f):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict(list) for our initial parsing of movies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m = Movie(title=movie, year=year, score=score)
directors[director].append(m)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_average_scores() returns a directors dict via a dict comprehension (note the &lt;a href="https://github.com/pybites/challenges/commit/959acf258a99730b732eb0915aa2088adf11e143"&gt;subtle refactoring&lt;/a&gt;, glad we had our tests), where keys are (director, mean score) and values their movies. We only take directors with at least MIN_MOVIES.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although Python3 has statistics.mean we rolled our own (_calc_mean) because we first extract the score from the Movie namedtupe and added rounding (although that should maybe go in the print_results function). &lt;/p&gt;
&lt;p&gt;Next time we would use statistics.mean, because the more you leverage the stdlib the better. These considerations happen when coding, reviewing your and others code, good learning. &lt;/p&gt;
&lt;p&gt;Although movies should not be 0 we are defensive by never allowing the denominator to be 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / max(1, len(ratings))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could also write: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / len(ratings) if ratings else 0
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print_results() then prints the desired output. The enumerate is handy to get the sequence numbers for the top NUM_TOP_DIRECTORS directors. You can give it a start with a 2nd argument, 1 in this case. &lt;/p&gt;
&lt;p&gt;We used zfill before to print 01 / 02 etc., but found out that &lt;a href="https://github.com/pybites/challenges/commit/72b4642e24058758530ea463cbd3c0fbe2dfce1d"&gt;you can tackle this in the format syntax&lt;/a&gt;. We might refactor all these formats to use F-string, it would make this a lot cleaner :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again it was nice to work on this code having tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_directors.py
tests pass
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODOs&lt;/h2&gt;
&lt;p&gt;We realized during the challenge that you could also solve this with SQL or Pandas. We will update the solutions branch when we get around this. It would be nice to give it a try. Of course if you took these (or other) approaches feel free to share your solution &lt;a href="https://github.com/pybites/challenges/compare"&gt;opening a PR against our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here is &lt;a href="https://github.com/pybites/challenges/blob/community/13/directors-atakume.py"&gt;another solution by atakume&lt;/a&gt; we merged in our community branch. What we like about this solution is the use of itertools.groupby, doing the sorting outside the print_results function, and the second namedtuple which adds readability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Filmography = namedtuple(&amp;#39;Filmography&amp;#39;, &amp;#39;director movies avg_score&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week we will let you play with decorators, a great feature for writing DRY, reusable code. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="imdb"></category><category term="sort"></category><category term="namedtuples"></category><category term="defaultdict"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors</title><link href="https://pybit.es/codechallenge13.html" rel="alternate"></link><published>2017-04-03T00:25:00+02:00</published><updated>2017-04-03T00:25:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-03:/codechallenge13.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's (&lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;), we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's &lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;, we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;There is this great ML article &lt;a href="https://blog.nycdatascience.com/student-works/machine-learning/movie-rating-prediction/"&gt;Predict Movie Rating&lt;/a&gt;. In this week's code challenge we use its data set to get the 20 highest rated directors based on their average movie IMDB ratings.&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As mentioned in the article the dataset is &lt;a href="https://raw.githubusercontent.com/sundeepblue/movie_rating_prediction/master/movie_metadata.csv"&gt;here&lt;/a&gt;, but we provided a copy in the repo's 13/ subfolder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the movie_metadata.csv, using csv.DictReader you get a bunch of OrderedDicts from which you only need the following k,v pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OrderedDict([...
            (&amp;#39;director_name&amp;#39;, &amp;#39;Lawrence Kasdan&amp;#39;),   
            ...
            (&amp;#39;movie_title&amp;#39;, &amp;#39;Mumford\xa0&amp;#39;),
            ...
            (&amp;#39;title_year&amp;#39;, &amp;#39;1999&amp;#39;),
            ...
            (&amp;#39;imdb_score&amp;#39;, &amp;#39;6.9&amp;#39;),
            ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only consider directors with a minimum of 4 movies, otherwise you get misrepresentative data. However going to min 5 movies we miss Sergio Leone :(&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take movies of year &amp;gt;= 1960.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the top 20 highest rated directors with their movies ordered desc on rating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look something like this (indeed some awesome movies here!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python directors.py

&lt;span class="m"&gt;01&lt;/span&gt;. Sergio Leone                                         &lt;span class="m"&gt;8&lt;/span&gt;.5
------------------------------------------------------------
&lt;span class="m"&gt;1966&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Good, the Bad and the Ugly¬†                    &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;1968&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in the West¬†                      &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1984&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in America¬†                       &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;1964&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; A Fistful of Dollars¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.0

&lt;span class="m"&gt;02&lt;/span&gt;. Christopher Nolan                                    &lt;span class="m"&gt;8&lt;/span&gt;.4
------------------------------------------------------------
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight¬†                                   &lt;span class="m"&gt;9&lt;/span&gt;.0
&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inception¬†                                         &lt;span class="m"&gt;8&lt;/span&gt;.8
&lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Interstellar¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight Rises¬†                             &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2006&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Prestige¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Memento¬†                                           &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Batman Begins¬†                                     &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Insomnia¬†                                          &lt;span class="m"&gt;7&lt;/span&gt;.2

&lt;span class="m"&gt;03&lt;/span&gt;. Hayao Miyazaki                                       &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;2001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Spirited Away¬†                                     &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Princess Mononoke¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Howl&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Moving Castle¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.2
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Ponyo¬†                                             &lt;span class="m"&gt;7&lt;/span&gt;.7

&lt;span class="m"&gt;04&lt;/span&gt;. Quentin Tarantino                                    &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;1994&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Pulp Fiction¬†                                      &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Django Unchained¬†                                  &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;1992&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Reservoir Dogs¬†                                    &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2009&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inglourious Basterds¬†                              &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;1&lt;/span&gt;¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.1
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;2&lt;/span&gt;¬†                                 &lt;span class="m"&gt;8&lt;/span&gt;.0
&lt;span class="m"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Hateful Eight¬†                                 &lt;span class="m"&gt;7&lt;/span&gt;.9
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Jackie Brown¬†                                      &lt;span class="m"&gt;7&lt;/span&gt;.5

...
&lt;span class="m"&gt;16&lt;/span&gt; more
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We included &lt;a href="https://github.com/pybites/challenges/tree/master/13/directors-template.py"&gt;a template&lt;/a&gt; but maybe you want to code this up from scratch and/or use your favorite power tools (Pandas, SQL, etc.)&lt;/p&gt;
&lt;p&gt;We also included &lt;a href="https://github.com/pybites/challenges/blob/master/13/test_directors.py"&gt;some tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="rating"></category></entry><entry><title>Twitter digest 2017 week 13</title><link href="https://pybit.es/twitter_digest_201713.html" rel="alternate"></link><published>2017-04-02T12:29:00+02:00</published><updated>2017-04-02T12:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-02:/twitter_digest_201713.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Hone your &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; skills by joining us in our &lt;a href="https://twitter.com/search/#100DaysOfCode" target="_blank"&gt;#100DaysOfCode&lt;/a&gt; challenge - &lt;a href="https://t.co/xfQpzdmmEU" title="https://t.co/xfQpzdmmEU" target="_blank"&gt;https://t.co/xfQpzdmmEU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/848083721483898880" data-datetime="2017-04-01T08:04:50+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to write a web service using Python Flask &lt;a href="https://t.co/co7Kq0Gz94" title="https://t.co/co7Kq0Gz94" target="_blank"&gt;https://t.co/co7Kq0Gz94&lt;/a&gt; by &lt;a href="https://twitter.com/@tmclaughbos" target="_blank"&gt;@tmclaughbos&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/847933285040668672" data-datetime="2017-03-31T22:07:03+00:00"&gt;March 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@marcel_dmg:" target="_blank"&gt;@marcel_dmg:&lt;/a&gt; There Are Three Different Kinds Of Companies Working On Machine Learning Today &lt;a href="https://twitter.com/search/#DataScience" target="_blank"&gt;#DataScience&lt;/a&gt; &lt;a href="https://twitter.com/search/#MachineLearning" target="_blank"&gt;#MachineLearning&lt;/a&gt; &lt;a href="https://t.co/e‚Ä¶" title="https://t.co/e‚Ä¶" target="_blank"&gt;https://t.co/e‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Rob. PY (@py_coding) &lt;a href="https://twitter.com/py_coding/status/847571671779115009" data-datetime="2017-03-30T22:10:08+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Mechanize Cheat Sheet &lt;a href="https://t.co/B8GiTUG44j" title="https://t.co/B8GiTUG44j" target="_blank"&gt;https://t.co/B8GiTUG44j&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#modules" target="_blank"&gt;#modules&lt;/a&gt; &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://t.co/8ZRh9PZz2f" title="https://t.co/8ZRh9PZz2f" target="_blank"&gt;https://t.co/8ZRh9PZz2f&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/846717943555743746" data-datetime="2017-03-28T13:37:43+00:00"&gt;March 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An introduction to Python on Android - Android Autho... &lt;a href="https://t.co/9atyyJP1RN" title="https://t.co/9atyyJP1RN" target="_blank"&gt;https://t.co/9atyyJP1RN&lt;/a&gt; via &lt;a href="https://twitter.com/@sharewithshyam" target="_blank"&gt;@sharewithshyam&lt;/a&gt; &lt;a href="https://t.co/OYktNpGs26" title="https://t.co/OYktNpGs26" target="_blank"&gt;https://t.co/OYktNpGs26&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/848095978104213504" data-datetime="2017-04-01T08:53:32+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Understanding Class and Instance Va... &lt;a href="https://t.co/RWwBy080kt" title="https://t.co/RWwBy080kt" target="_blank"&gt;https://t.co/RWwBy080kt&lt;/a&gt;&lt;/p&gt;‚Äî import python üêç (@importpython) &lt;a href="https://twitter.com/importpython/status/847560816052195329" data-datetime="2017-03-30T21:27:00+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Short Guide to Navigating the Jupyter Ecosystem &lt;a href="https://t.co/5IutN1sbVH" title="https://t.co/5IutN1sbVH" target="_blank"&gt;https://t.co/5IutN1sbVH&lt;/a&gt; &lt;a href="https://t.co/rRQnpZp62l" title="https://t.co/rRQnpZp62l" target="_blank"&gt;https://t.co/rRQnpZp62l&lt;/a&gt;&lt;/p&gt;‚Äî Python (@PythonRR) &lt;a href="https://twitter.com/PythonRR/status/847964764429053953" data-datetime="2017-04-01T00:12:08+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python's" target="_blank"&gt;#Python's&lt;/a&gt; Instance, Class, and Static Methods Demystified. Awesome new blog post from the &lt;a href="https://twitter.com/@RealPython" target="_blank"&gt;@RealPython&lt;/a&gt; folks &lt;a href="https://t.co/GWSBxtXBKR" title="https://t.co/GWSBxtXBKR" target="_blank"&gt;https://t.co/GWSBxtXBKR&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/847553284516786177" data-datetime="2017-03-30T20:57:04+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Simple Guide for &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Packaging &lt;a href="https://t.co/XGOO999B52" title="https://t.co/XGOO999B52" target="_blank"&gt;https://t.co/XGOO999B52&lt;/a&gt; &lt;a href="https://t.co/dQBMG3pgvx" title="https://t.co/dQBMG3pgvx" target="_blank"&gt;https://t.co/dQBMG3pgvx&lt;/a&gt;&lt;/p&gt;‚Äî Python Eggs (@PythonEggs) &lt;a href="https://twitter.com/PythonEggs/status/848364700219850752" data-datetime="2017-04-02T02:41:21+00:00"&gt;April 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How to extract all the emojis from text? [Score:14] &lt;a href="https://t.co/sxTf3CcxIJ" title="https://t.co/sxTf3CcxIJ" target="_blank"&gt;https://t.co/sxTf3CcxIJ&lt;/a&gt;&lt;/p&gt;‚Äî Python StackOverflow (@PythonStack) &lt;a href="https://twitter.com/PythonStack/status/848288621455175680" data-datetime="2017-04-01T21:39:02+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Error Handling Cheat Sheet &amp;gt;&amp;gt; &lt;a href="https://t.co/Z5XSiMspv1" title="https://t.co/Z5XSiMspv1" target="_blank"&gt;https://t.co/Z5XSiMspv1&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî RealPython.com (@RealPython) &lt;a href="https://twitter.com/RealPython/status/848384423691255813" data-datetime="2017-04-02T03:59:43+00:00"&gt;April 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Replace substrings: &amp;gt;&amp;gt;&amp;gt; s = 'old old old' &amp;gt;&amp;gt;&amp;gt; r = s.replace('old', 'new') &amp;gt;&amp;gt;&amp;gt; r 'new new new' &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/LRs0oR9Y0f" title="https://t.co/LRs0oR9Y0f" target="_blank"&gt;https://t.co/LRs0oR9Y0f&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/847297709660819458" data-datetime="2017-03-30T04:01:30+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Learn Scrapy - video series &lt;a href="https://t.co/kmsi6O0F4v" title="https://t.co/kmsi6O0F4v" target="_blank"&gt;https://t.co/kmsi6O0F4v&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/847523835343724545" data-datetime="2017-03-30T19:00:03+00:00"&gt;March 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Just found out about a new twitter-like social network, &lt;a href="https://twitter.com/@djangoproject" target="_blank"&gt;@djangoproject&lt;/a&gt; powered: &lt;a href="https://t.co/UwMbNvLYpg" title="https://t.co/UwMbNvLYpg" target="_blank"&gt;https://t.co/UwMbNvLYpg&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/847977643261571073" data-datetime="2017-04-01T01:03:19+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Happy &lt;a href="https://twitter.com/search/#AprilFoolsDay!" target="_blank"&gt;#AprilFoolsDay!&lt;/a&gt; &lt;a href="https://t.co/EwdXsFktZx" title="https://t.co/EwdXsFktZx" target="_blank"&gt;https://t.co/EwdXsFktZx&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/848022361983025153" data-datetime="2017-04-01T04:01:01+00:00"&gt;April 01, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="tips"></category><category term="beginners"></category><category term="Django"></category><category term="machine learning"></category><category term="mechanize"></category><category term="classes"></category><category term="Jupiter"></category><category term="cheat sheet"></category><category term="scrapy"></category><category term="data science"></category><category term="flask"></category><category term="tutorials"></category><category term="python"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game - Review</title><link href="https://pybit.es/codechallenge12_review.html" rel="alternate"></link><published>2017-04-01T17:00:00+02:00</published><updated>2017-04-01T17:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-01:/codechallenge12_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge12.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge12.html"&gt;Build a Tic-tac-toe Game&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. This was great learning! Here are some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We went for the AI opponent to play against. Not sure if it is unbeatable, but it has some 'intelligence' because it knows when to win, block you or take the next best moves (more on this later). We need to know a score for each position which we calculate by counting the number of times each position is in a winning combination:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WINNING_COMBINATIONS = (
    (7, 8, 9), (4, 5, 6), (1, 2, 3),
    (7, 4, 1), (8, 5, 2), (9, 6, 3),
    (1, 5, 9), (7, 5, 3),
)

POSITION_VALUES = Counter(
    itertools.chain(*WINNING_COMBINATIONS)
)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like Hangman, you have to keep state, so a class worked best for us and it is important to use a suitable data structure: a list of key numbers in the order of a typical key pad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;Simple tictactoe game, board positions are like keyboard&lt;/span&gt;
&lt;span class="s1"&gt;                7 8 9&lt;/span&gt;
&lt;span class="s1"&gt;                4 5 6&lt;/span&gt;
&lt;span class="s1"&gt;                1 2 3&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kd"&gt;@clear_screen&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;:&lt;span class="kt"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;:&lt;span class="kt"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator is probably overkill but we use print(game) in two places so we did not want to duplicate code nor did we feel it was pure to clear the screen as part of __str__ (OK maybe we exaggerated, but the &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator&lt;/a&gt; is a useful feature you probably end up using!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probably the most important method is to determine if there is a win state. is_win() loops over all winning combinations and if there is not a DEFAULT (_) in the 3 positions and they are of the same ('O' or 'X') we have a win:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_win(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = set([self.board[a], self.board[b], self.board[c]])
        if DEFAULT not in combo_vals and len(combo_vals) == 1:
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under main we drive the interface. It is one of the few times we choose a "for / else" construct, which some advice against. However here we liked it because there is a clear use case: if we break out of the for loop we have a win, else we ended performing all max 9 turns/moves, so we enter the for's else = game ends in 'draw'. The advantage of this approach is that we did not have to calculate the 'draw' scenario. We separated computer vs manual into 2 methods: ai_move() and manual_move():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while True:
    game = TicTacToe()

    turns = itertools.cycle([first, second])
    print(game)
    for _ in VALID_POSITIONS:
        player = next(turns)
        if player == COMPUTER:
            game.ai_move()
        else:
            game.manual_move()
        print(game)
        if game.is_win():
            print(&amp;#39;Player {} wins&amp;#39;.format(player))
            break
    else:  # for / else is frowned upon, I do like it here though!
        print(&amp;#39;Draw&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The AI bit was the most interesting part. We went not as far as the full 8 steps in &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;tictactoe's strategy&lt;/a&gt;, yet this will give you a bit of challenge. The computer checks first if it can win (end) the game, then if the player can win, if so prevent (block) that. If none of these two situations, it takes the best next move based on the before mentioned POSITION_VALUES which is a counter so its most_common() method returns most valuable positions first. Splitting this in multiple methods makes it easier maintainable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ai_move(self):
    self._win_or_block() or self._take_best_next_free_pos()

def _win_or_block(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = [self.board[a], self.board[b], self.board[c]]
        # can only use unitiated positions
        if DEFAULT not in combo_vals:
            continue
        if combo_vals.count(COMPUTER) == 2:
            return self._update_board(combo, combo_vals)
        if combo_vals.count(PLAYER) == 2:
            return self._update_board(combo, combo_vals)
    return False

def _take_best_next_free_pos(self):
    for pos, _ in POSITION_VALUES.most_common():
        if self.board[pos] == DEFAULT:
            self.board[pos] = COMPUTER
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again our full solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. Let us know if you have any questions or if you spot anything we could have done better.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here are some other ways to do it: from our &lt;a href="https://github.com/pybites/challenges/blob/community/12/tictactoe-atakume.py"&gt;community branch&lt;/a&gt; (remember you can submit code by PR!) and &lt;a href="https://redd.it/61o56j"&gt;via reddit comment&lt;/a&gt;). Reading other solutions to the same problem (as well as coding styles) is a great way to learn.&lt;/p&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week you will train your data analysis skills by parsing a movie data set. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>100 Days of PyBites, 100 Days of Code</title><link href="https://pybit.es/special-100days.html" rel="alternate"></link><published>2017-03-29T20:04:00+02:00</published><updated>2017-03-29T20:04:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-29:/special-100days.html</id><summary type="html">&lt;p&gt;In celebration of PyBites being around for 100 days we‚Äôre taking on the 100 Days of Code Challenge!&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyBites is 100 days old! It feels like just yesterday we submitted our &lt;a href="http://pybit.es/hello-world.html"&gt;first post&lt;/a&gt; for the world to see (pretty bland amirite?!). Good times!&lt;/p&gt;
&lt;h2&gt;Let‚Äôs Celebrate with some Code!&lt;/h2&gt;
&lt;p&gt;To celebrate, we‚Äôre going to take on the &lt;a href="https://medium.freecodecamp.com/join-the-100daysofcode-556ddb4579e4"&gt;100 Days of Code Challenge&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;We‚Äôre pretty sure we already do the bare minimum for this challenge though. Coding and learning daily right? (That‚Äôs what PyBites is all about!)&lt;/p&gt;
&lt;p&gt;As such, we‚Äôre going to put a PyBites spin on the challenge. Not only are we going to code daily but we‚Äôre going to actually write a small &lt;em&gt;script&lt;/em&gt; daily!&lt;/p&gt;
&lt;h2&gt;A Big Ask!&lt;/h2&gt;
&lt;p&gt;This is a pretty big ask given we have day jobs, families and the PyBites update schedule. That‚Äôs why the task will be split between the two of us.&lt;/p&gt;
&lt;p&gt;We‚Äôve created a &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;Github Repo&lt;/a&gt; to track our 100 days of code. Feel free to check it out starting tomorrow.&lt;/p&gt;
&lt;h2&gt;What kind of scripts?&lt;/h2&gt;
&lt;p&gt;The scripts will be wide ranging but will fall into the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scripts that scratch our own itch&lt;/li&gt;
&lt;li&gt;Automating the boring stuff (Inspired to do so by the &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;book&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;System Administration&lt;/li&gt;
&lt;li&gt;Web Scraping / APIs&lt;/li&gt;
&lt;li&gt;New Modules&lt;/li&gt;
&lt;li&gt;File Manipulation&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/issues/new"&gt;Your ideas&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complexity wise, it‚Äôs all about the solution. Some will be as simple as a Fibonacci sequence generator or a simple recursion function to search a file tree.&lt;/p&gt;
&lt;p&gt;The point is to get coding to hone our Python skills. We already cover the learning side of things with PyBites in general!&lt;/p&gt;
&lt;h2&gt;Join Us!&lt;/h2&gt;
&lt;p&gt;If you‚Äôve been thinking of doing the 100 Days of Code Challenge then why not start with us?&lt;/p&gt;
&lt;p&gt;You can follow along by forking &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;our repo&lt;/a&gt;. We‚Äôll also be &lt;a href="https://twitter.com/pybites"&gt;tweeting&lt;/a&gt; our updates daily.&lt;/p&gt;
&lt;p&gt;If getting commit credit on your GitHub account matters then you can use our &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/init.py"&gt;init script&lt;/a&gt; to create your own repo.&lt;/p&gt;
&lt;p&gt;Either way, &lt;strong&gt;THANK YOU&lt;/strong&gt; for being with us over the past 100 days! We love what we‚Äôve accomplished so far and we look forward to the next 100 days as there‚Äôs always something new to learn.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python (for 100 days)!&lt;/p&gt;
&lt;p&gt;‚Äî Julian and Bob&lt;/p&gt;
&lt;p&gt;PS: Notice the purple side bar? Just a simple Pelican theme hack ;) It's our way of celebrating special occasions!&lt;/p&gt;</content><category term="news"></category><category term="special"></category><category term="challenge"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game</title><link href="https://pybit.es/codechallenge12.html" rel="alternate"></link><published>2017-03-27T00:01:00+02:00</published><updated>2017-03-27T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-27:/codechallenge12.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;Build a command line app where you can play against a friend or the computer. We recommend the latter to do some AI: to intelligently respond to player's moves (see &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;Strategy&lt;/a&gt;). Maybe you can add game levels to avoid the machine to be 'too smart' (see &lt;a href="https://www.google.es/search?q=tictactoe&amp;amp;oq=tictactoe"&gt;Google widget&lt;/a&gt; for example). &lt;/p&gt;
&lt;p&gt;For the best UX it's probably easiest to number the board like the keyboard's number pad: 7-8-9, 4-5-6, 1-2-3. We provided &lt;a href="https://github.com/pybites/challenges/blob/master/12/tictactoe-template.py"&gt;a template&lt;/a&gt; with some guidance, but maybe you want to start from scratch (let us know what works best for you ...)&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt;. We will feature creative solutions and learning in our review post.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>Twitter digest 2017 week 12</title><link href="https://pybit.es/twitter_digest_201712.html" rel="alternate"></link><published>2017-03-26T12:29:00+02:00</published><updated>2017-03-26T12:29:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-26:/twitter_digest_201712.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;5-8 character words: &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; s = 'Fox jumps over RegExp.' &amp;gt;&amp;gt;&amp;gt; re.findall(r'\b(\w{5,8})\b', s) ['jumps', 'RegExp'] &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/844413330747908097" data-datetime="2017-03-22T05:00:01+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Best Practices for Compatible &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 2 and 3 Code &lt;a href="https://t.co/GDORtGOmQP" title="https://t.co/GDORtGOmQP" target="_blank"&gt;https://t.co/GDORtGOmQP&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/844515912321568775" data-datetime="2017-03-22T11:47:38+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;My new sounds: &lt;a href="https://twitter.com/search/#18:" target="_blank"&gt;#18:&lt;/a&gt; Python 3 has some amazing types and you can now constructively insult your shell! &lt;a href="https://t.co/Z9NcO0QacW" title="https://t.co/Z9NcO0QacW" target="_blank"&gt;https://t.co/Z9NcO0QacW&lt;/a&gt; on &lt;a href="https://twitter.com/search/#SoundCloud" target="_blank"&gt;#SoundCloud&lt;/a&gt;&lt;/p&gt;‚Äî Talk Python Podcast (@TalkPython) &lt;a href="https://twitter.com/TalkPython/status/844225705571500033" data-datetime="2017-03-21T16:34:27+00:00"&gt;March 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;And PyCon 2017 is now sold out! We look forward to seeing you in Portland ‚Äî and for those who can't make it, we'll record everything we can!&lt;/p&gt;‚Äî PyCon (@pycon) &lt;a href="https://twitter.com/pycon/status/844615993171292160" data-datetime="2017-03-22T18:25:19+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;pdir() vs dir() in Python. I think I'm in love. Thanks &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt; for the heads up: &lt;a href="https://t.co/RMOInOvPAf" title="https://t.co/RMOInOvPAf" target="_blank"&gt;https://t.co/RMOInOvPAf&lt;/a&gt; Covere‚Ä¶ &lt;a href="https://t.co/M3W7k0qTBW" title="https://t.co/M3W7k0qTBW" target="_blank"&gt;https://t.co/M3W7k0qTBW&lt;/a&gt;&lt;/p&gt;‚Äî Michael Kennedy (@mkennedy) &lt;a href="https://twitter.com/mkennedy/status/843875714181054466" data-datetime="2017-03-20T17:23:43+00:00"&gt;March 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;An simple tutorial on how to effectively use the python debugger (pdb) &lt;a href="https://t.co/fJjeTvNnrh" title="https://t.co/fJjeTvNnrh" target="_blank"&gt;https://t.co/fJjeTvNnrh&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/845426787588853760" data-datetime="2017-03-25T00:07:08+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Do you like &lt;a href="https://twitter.com/search/#python‚Äôs" target="_blank"&gt;#python‚Äôs&lt;/a&gt; itertools but wish there was more? more-itertools has tons of interesting functions: &lt;a href="https://t.co/HgTZyQAP34" title="https://t.co/HgTZyQAP34" target="_blank"&gt;https://t.co/HgTZyQAP34&lt;/a&gt;&lt;/p&gt;‚Äî Ned Batchelder (@nedbat) &lt;a href="https://twitter.com/nedbat/status/845661633724796929" data-datetime="2017-03-25T15:40:19+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;PyCharm 2017.1 has been released &lt;a href="https://t.co/7TAXVeh3LA" title="https://t.co/7TAXVeh3LA" target="_blank"&gt;https://t.co/7TAXVeh3LA&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/845364603743809537" data-datetime="2017-03-24T20:00:02+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;from &lt;a href="https://twitter.com/@pybites:" target="_blank"&gt;@pybites:&lt;/a&gt; Reverse a string with negative stride &amp;gt;&amp;gt;&amp;gt; s = 'hello world' &amp;gt;&amp;gt;&amp;gt; ''.join(reversed(s)) 'dlrow olleh' &amp;gt;&amp;gt;&amp;gt; s[::-1] 'dlrow olleh'&lt;/p&gt;‚Äî Daily Python Tip (@python_tip) &lt;a href="https://twitter.com/python_tip/status/845153205738651648" data-datetime="2017-03-24T06:00:01+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Cheat Sheet: File Handling in Python &lt;a href="https://t.co/ebxYGh2mTp" title="https://t.co/ebxYGh2mTp" target="_blank"&gt;https://t.co/ebxYGh2mTp&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#developer" target="_blank"&gt;#developer&lt;/a&gt; &lt;a href="https://t.co/cftTGr604v" title="https://t.co/cftTGr604v" target="_blank"&gt;https://t.co/cftTGr604v&lt;/a&gt;&lt;/p&gt;‚Äî pythonforbeginners (@pythonbeginners) &lt;a href="https://twitter.com/pythonbeginners/status/845245214583373824" data-datetime="2017-03-24T12:05:37+00:00"&gt;March 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Django 1.11 release candidate 1 released &lt;a href="https://t.co/XYaKLsv11i" title="https://t.co/XYaKLsv11i" target="_blank"&gt;https://t.co/XYaKLsv11i&lt;/a&gt;&lt;/p&gt;‚Äî Django (@djangoproject) &lt;a href="https://twitter.com/djangoproject/status/844350212772712448" data-datetime="2017-03-22T00:49:12+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;3 Areas Where Python Has Really Caught Fire | Python Development &lt;a href="https://t.co/yezbhAcpQy" title="https://t.co/yezbhAcpQy" target="_blank"&gt;https://t.co/yezbhAcpQy&lt;/a&gt; via &lt;a href="https://twitter.com/@forgeaheadio" target="_blank"&gt;@forgeaheadio&lt;/a&gt;&lt;/p&gt;‚Äî Python Top News (@PythonTopNews) &lt;a href="https://twitter.com/PythonTopNews/status/844719331577606144" data-datetime="2017-03-23T01:15:57+00:00"&gt;March 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;REST framework comparisons in 2017 &lt;a href="https://t.co/ed0tSo37A9" title="https://t.co/ed0tSo37A9" target="_blank"&gt;https://t.co/ed0tSo37A9&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/845470300301086720" data-datetime="2017-03-25T03:00:02+00:00"&gt;March 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What Top Firms Ask: 100 Data Science Interview Questions &lt;a href="https://t.co/khPyqcaBWk" title="https://t.co/khPyqcaBWk" target="_blank"&gt;https://t.co/khPyqcaBWk&lt;/a&gt;&lt;/p&gt;‚Äî LearnDataSci (@LearnDataSci) &lt;a href="https://twitter.com/LearnDataSci/status/844615922316972032" data-datetime="2017-03-22T18:25:02+00:00"&gt;March 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Very cool article example of building Python web apps with Flask! &lt;a href="https://t.co/jG84KF7zxC" title="https://t.co/jG84KF7zxC" target="_blank"&gt;https://t.co/jG84KF7zxC&lt;/a&gt; via &lt;a href="https://twitter.com/@twilio" target="_blank"&gt;@twilio&lt;/a&gt;&lt;/p&gt;‚Äî Julian Sequeira (@techmoneykids) &lt;a href="https://twitter.com/techmoneykids/status/845897719596040192" data-datetime="2017-03-26T07:18:27+00:00"&gt;March 26, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="pycon"></category><category term="tips"></category><category term="debugging"></category><category term="itertools"></category><category term="pycharm"></category><category term="beginners"></category><category term="Django"></category><category term="rest"></category><category term="data science"></category><category term="flask"></category><category term="tutorials"></category><category term="python"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit - Review</title><link href="https://pybit.es/codechallenge11_review.html" rel="alternate"></link><published>2017-03-25T09:10:00+01:00</published><updated>2017-03-25T09:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-25:/codechallenge11_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge11.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge11.html"&gt;Generators for Fun and Profit&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution + learning&lt;/h2&gt;
&lt;p&gt;This was a pretty easy one, yet showing a powerful way to start thinking about generators as pipelines that can be plugged into each other.&lt;/p&gt;
&lt;p&gt;Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/11/generators.py"&gt;here&lt;/a&gt;. A couple of notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here you see the 'plugged into each other' part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../*/*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iglob returns an iterator which yields the paths matching a pathname pattern, glob returns a list, also fine because we are not dealing with a lot of directories. You can also use os.walk but when you have a clear pattern (i)glob is less code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use yield from (&amp;gt;= 3.3) which saves a for loop (shorter).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;seen before&lt;/a&gt; use collections.Counter, it's hard to beat short- and conciseness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def gen_count(modules):
    yield from Counter(modules).most_common()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use grouping to capture the match as discussed in &lt;a href="http://pybit.es/mastering-regex.html"&gt;our regex article&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# retrieves what&amp;#39;s matched in parenthesis&lt;/span&gt;

&lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Community branch&lt;/h2&gt;
&lt;p&gt;We got our first solution PR which we merged onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;community branch&lt;/a&gt;. This is a nice way to get credit and help our community learn more. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/blob/community/11/generators-atakume.py"&gt;The solution&lt;/a&gt; was pretty similar to ours. One nice addition was to sort manually on both values and keys, most_common only sorts by values. Also the regex part was slightly different stripping off import with re.sub. It is nice to see different solutions to the same problem, you learn more.&lt;/p&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;Next week we do another game, so we expect some more complexity and variety in solutions. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Do you like these challenges?&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying this. If we can do anything better or you have ideas please &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="yield"></category><category term="Counter"></category><category term="glob"></category><category term="regex"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit</title><link href="https://pybit.es/codechallenge11.html" rel="alternate"></link><published>2017-03-20T09:00:00+01:00</published><updated>2017-03-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-20:/codechallenge11.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them in our new challenge. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them.&lt;/p&gt;
&lt;p&gt;Inspired by David Beazley's &lt;a href="http://www.dabeaz.com/generators/"&gt;Generator Tricks for Systems Programmers&lt;/a&gt; we ask you to turn the following unix pipeline into Python code using generators. To get a bunch of .py files you can use our challenges repo you cloned. Or use a project of your own. &lt;/p&gt;
&lt;p&gt;Note that in our experience one subprocess is not necessarily one generator, for example 'sort|uniq|sort' can be easily combined into one, as well as 'grep|sed'. See &lt;a href="https://github.com/pybites/challenges/blob/master/11/generators-template.py"&gt;our template&lt;/a&gt; if you need guidance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assuming you pulled our challenges master and are in our 11/ subdirectory &lt;/span&gt;
&lt;span class="c1"&gt;# code this unix pipeline into Python using generators &lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;../*/*&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/import //g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not familiar yet with Unix pipeline? It's pretty well explained &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges (UPDATES)&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; which should contain everything you need to get up and running (any issue, please open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;).&lt;/p&gt;
&lt;h4&gt;Update I) Forking&lt;/h4&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR (Pull Request)). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h4&gt;Update II) Submit your Solution&lt;/h4&gt;
&lt;p&gt;We made &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;a new 'community' branch&lt;/a&gt;. Another way to get credit is to submit your code via &lt;a href="https://github.com/pybites/challenges/compare"&gt;a new PR&lt;/a&gt;. We do not merge anything on our master or solutions branches, but if you ping us this way we add your solution to our new community branch (as filename 'topic-GHuser.py') and feature it in &lt;a href="http://pybit.es/pages/challenges.html"&gt;our review&lt;/a&gt; if it taught us something cool.&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt;, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And last but not least: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="generators"></category><category term="unix"></category><category term="newquote"></category></entry><entry><title>Twitter digest 2017 week 11</title><link href="https://pybit.es/twitter_digest_201711.html" rel="alternate"></link><published>2017-03-19T15:42:00+01:00</published><updated>2017-03-19T15:42:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-19:/twitter_digest_201711.html</id><summary type="html">&lt;p&gt;Every weekend we share a curated list of 15 cool things (mostly Python) that we found / tweeted throughout the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;DataCamp: &lt;a href="https://twitter.com/search/#Pandas" target="_blank"&gt;#Pandas&lt;/a&gt; Cheat Sheet: Data Wrangling in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/zCdACatBq8" title="https://t.co/zCdACatBq8" target="_blank"&gt;https://t.co/zCdACatBq8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/843042724689432576" data-datetime="2017-03-18T10:13:43+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Logging Tutorial &lt;a href="https://t.co/lc8gejSiWd" title="https://t.co/lc8gejSiWd" target="_blank"&gt;https://t.co/lc8gejSiWd&lt;/a&gt; - good reminder, setting up logging might save you hours of debugging later&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/843042970257555456" data-datetime="2017-03-18T10:14:41+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;What's the pythonic way to use getters and setters? &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#getter-setter" target="_blank"&gt;#getter-setter&lt;/a&gt; &lt;a href="https://t.co/gn8tz9eHVK" title="https://t.co/gn8tz9eHVK" target="_blank"&gt;https://t.co/gn8tz9eHVK&lt;/a&gt;&lt;/p&gt;‚Äî PythonQnA (@PythonQnA) &lt;a href="https://twitter.com/PythonQnA/status/843226507996790784" data-datetime="2017-03-18T22:24:00+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Improve your &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; code with &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; 10 Pythonic Tips. Get your own copy here! &lt;a href="https://t.co/3UIxFAIKGr" title="https://t.co/3UIxFAIKGr" target="_blank"&gt;https://t.co/3UIxFAIKGr&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/842844930716393472" data-datetime="2017-03-17T21:07:45+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Super easy to use facial recognition api for Python (or the command line) &lt;a href="https://t.co/TXEvDtfIIX" title="https://t.co/TXEvDtfIIX" target="_blank"&gt;https://t.co/TXEvDtfIIX&lt;/a&gt;&lt;/p&gt;‚Äî /r/Python Popular (@RedditPython) &lt;a href="https://twitter.com/RedditPython/status/841514230100697088" data-datetime="2017-03-14T05:00:01+00:00"&gt;March 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;How does the &lt;a href="https://twitter.com/search/#Django" target="_blank"&gt;#Django&lt;/a&gt; cross site request forgery protection (CSRF) work? &lt;a href="https://t.co/pSU0X6DuP5" title="https://t.co/pSU0X6DuP5" target="_blank"&gt;https://t.co/pSU0X6DuP5&lt;/a&gt;&lt;/p&gt;‚Äî Full Stack Python (@fullstackpython) &lt;a href="https://twitter.com/fullstackpython/status/842778034772107264" data-datetime="2017-03-17T16:41:56+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;2017 is an off-year for &lt;a href="https://twitter.com/@pydatacarolinas" target="_blank"&gt;@pydatacarolinas&lt;/a&gt; but you can view all of last year's talks on Youtube!‚Ä¶ &lt;a href="https://t.co/S7O2JwHoL7" title="https://t.co/S7O2JwHoL7" target="_blank"&gt;https://t.co/S7O2JwHoL7&lt;/a&gt;&lt;/p&gt;‚Äî PyData (@PyData) &lt;a href="https://twitter.com/PyData/status/842782676197281794" data-datetime="2017-03-17T17:00:22+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;flango - A Django template for using Flask for the frontend, Django for the backend. &lt;a href="https://t.co/oDDjEZPKOs" title="https://t.co/oDDjEZPKOs" target="_blank"&gt;https://t.co/oDDjEZPKOs&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/842784227393507328" data-datetime="2017-03-17T17:06:32+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Set separators=(',', ':') to dump JSON more compactly. &amp;gt;&amp;gt;&amp;gt; json.dumps({'a':1, 'b':2}, separators=(',',':')) '{"a":1,"b":2}'&lt;/p&gt;‚Äî Raymond Hettinger (@raymondh) &lt;a href="https://twitter.com/raymondh/status/842777864193769472" data-datetime="2017-03-17T16:41:15+00:00"&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome intro to PyGame on &lt;a href="https://twitter.com/@realpython:" target="_blank"&gt;@realpython:&lt;/a&gt; &lt;a href="https://t.co/tdT8ZUVIpg" title="https://t.co/tdT8ZUVIpg" target="_blank"&gt;https://t.co/tdT8ZUVIpg&lt;/a&gt;&lt;/p&gt;‚Äî Dan Bader (@dbader_org) &lt;a href="https://twitter.com/dbader_org/status/843292694290071552" data-datetime="2017-03-19T02:47:00+00:00"&gt;March 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;A Simple Guide for Python Packaging ‚Äì &lt;a href="https://t.co/yupMiDHgO1" title="https://t.co/yupMiDHgO1" target="_blank"&gt;https://t.co/yupMiDHgO1&lt;/a&gt;&lt;/p&gt;‚Äî Pycoders Weekly (@pycoders) &lt;a href="https://twitter.com/pycoders/status/843168636667936768" data-datetime="2017-03-18T18:34:02+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Brute force passwords with Python [Simple Tutorial] &lt;a href="https://t.co/6jtBy0q41i" title="https://t.co/6jtBy0q41i" target="_blank"&gt;https://t.co/6jtBy0q41i&lt;/a&gt;&lt;/p&gt;‚Äî Python Hub (@PythonHub) &lt;a href="https://twitter.com/PythonHub/status/843206995251511296" data-datetime="2017-03-18T21:06:28+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Projects in Python: Get started with Python game development ‚òû &lt;a href="https://t.co/db95aHVb7I" title="https://t.co/db95aHVb7I" target="_blank"&gt;https://t.co/db95aHVb7I&lt;/a&gt;&lt;/p&gt;‚Äî Python Programmers (@python_devv) &lt;a href="https://twitter.com/python_devv/status/842939433414549504" data-datetime="2017-03-18T03:23:16+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I made a Raspberry Pi powered Left 4 Dead 2 stat tracker that uses several neat Python libraries to &lt;a href="https://t.co/9lQ6qUsjkl" title="https://t.co/9lQ6qUsjkl" target="_blank"&gt;https://t.co/9lQ6qUsjkl&lt;/a&gt; by &lt;a href="https://twitter.com/@hackaday" target="_blank"&gt;@hackaday&lt;/a&gt;&lt;/p&gt;‚Äî Python LibHunt (@PythonLibHunt) &lt;a href="https://twitter.com/PythonLibHunt/status/842890124677464064" data-datetime="2017-03-18T00:07:20+00:00"&gt;March 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;because we are python programmers üòÇüòÇ &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#programmer" target="_blank"&gt;#programmer&lt;/a&gt; &lt;a href="https://t.co/eyo9crPmgA" title="https://t.co/eyo9crPmgA" target="_blank"&gt;https://t.co/eyo9crPmgA&lt;/a&gt;&lt;/p&gt;‚Äî The Crazy Programmer (@thecrazyprogrmr) &lt;a href="https://twitter.com/thecrazyprogrmr/status/841308482020155394" data-datetime="2017-03-13T15:22:27+00:00"&gt;March 13, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="pypi"></category><category term="Django"></category><category term="Flask"></category><category term="Pandas"></category><category term="cheat sheet"></category><category term="stdlib"></category><category term="APIs"></category><category term="tips"></category><category term="raspberry pi"></category><category term="json"></category><category term="pygame"></category><category term="tutorials"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game - Review</title><link href="https://pybit.es/codechallenge10_review.html" rel="alternate"></link><published>2017-03-18T18:00:00+01:00</published><updated>2017-03-18T18:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-18:/codechallenge10_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution and learning&lt;/h2&gt;
&lt;p&gt;First of all it is great to see &lt;a href="https://github.com/pybites/challenges/network"&gt;more people working on our challenges&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Games are challenging, we learned quite a bit from this one. We also saw better ways of doing things. Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/10/hangman-pb.py"&gt;here&lt;/a&gt;. A summary what we learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We used a class to keep state. We used two lists for secret and guessed_word. Looking at it now self.secret_word should probably be a tuple (inmutable). Handling non-ASCII in the constructor made the rest easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.secret_word = list(word.lower())
self.guessed_word = [PLACEHOLDER if c in ASCII else c
                    for c in self.secret_word]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We could probably save the extra self.num_wrong_guesses variable by just popping states of the HANG_GRAPHICS list (or use the hang_graphics() generator directly). It's a real eye opener how you pick up these kind of improvements from reading each other's code. If you pick up one habit from our challenges let it be to &lt;em&gt;start reading source&lt;/em&gt;. As somebody remarked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I like seeing the other solutions. There are definitely small things that I could have done better/more pythonically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was also fascinating to see that there are various ways to accomplish this task: to check for a win, you can compare guess with secret. We took another approach by checking for absense of PLACEHOLDER (_) in the self.guessed_word list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small details. For example we had a debug flag while developing, and we used the __str__ dunder to build up a string representation of the object. What was new though was that you can use it with 'self' as well, as in '.format(self)'. Small tricks you only pick up by actually practicing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI: we saw other solutions clearing the screen after each guess, and showing the ASCII constant (alphabet) with guesses stripped out, bit more GUI like. Nice. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We saw an try/except block wrapped around 'input = raw_input' to support Python 2 and 3. We will study 2vs3 in more detail next week ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Process update around Forking&lt;/h2&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="forks"></category><category term="dunder"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game</title><link href="https://pybit.es/codechallenge10.html" rel="alternate"></link><published>2017-03-13T00:32:00+01:00</published><updated>2017-03-13T00:32:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-13:/codechallenge10.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! This week we will build a Hangman game. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;This week we are going to code the well-known &lt;a href="http://www.wikihow.com/Play-Hangman"&gt;Hangman game&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We think this is a nice challenge because you have to think about design, iteration, working with various data structures, keep state (class?), etc. &lt;/p&gt;
&lt;p&gt;We provide you with some graphs and the topic will be movies: you get a top 100 of movies in a text file and code to load them into your program. &lt;/p&gt;
&lt;p&gt;For the rest we kept the template pretty empty to not force you too much into one direction.&lt;/p&gt;
&lt;p&gt;Of course if you have questions use the comments below. End of this week we discuss our solution and we hope we all learn a lot from each other.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use persistence to keep track of scores (invent your own system) and report when the user breaks a new record.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We focus on the logic so command line is the required interface, however if you like to wrap this into a GUI, feel free ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;To keep it 'DRY' we abstracted the instructions out into an INSTALL.md page in our repo, see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. New or returning visitor, you should have all you need to get up and running.&lt;/p&gt;
&lt;p&gt;And remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="movies"></category><category term="github"></category></entry><entry><title>Twitter digest 2017 week 10</title><link href="https://pybit.es/twitter_digest_201710.html" rel="alternate"></link><published>2017-03-12T00:01:00+01:00</published><updated>2017-03-12T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-12:/twitter_digest_201710.html</id><summary type="html">&lt;p&gt;During the weekend we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; Notes from chat with &lt;a href="https://twitter.com/@treyhunner" target="_blank"&gt;@treyhunner&lt;/a&gt; and &lt;a href="https://twitter.com/@etmoore" target="_blank"&gt;@etmoore&lt;/a&gt; "Habits for effective Python" learning &amp;gt;&amp;gt; &lt;a href="https://t.co/E74JwSL55I" title="https://t.co/E74JwSL55I" target="_blank"&gt;https://t.co/E74JwSL55I&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#le‚Ä¶" target="_blank"&gt;#le‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840661901692547077" data-datetime="2017-03-11T20:33:10+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;CPython internals: A ten-hour codewalk through the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; interpreter source code &lt;a href="https://t.co/VY1vJMs2I4" title="https://t.co/VY1vJMs2I4" target="_blank"&gt;https://t.co/VY1vJMs2I4&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840495935645978624" data-datetime="2017-03-11T09:33:41+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interesting example / stack (cc &lt;a href="https://twitter.com/@mschilling" target="_blank"&gt;@mschilling&lt;/a&gt; swagger) &lt;a href="https://t.co/dwD6n48mlx" title="https://t.co/dwD6n48mlx" target="_blank"&gt;https://t.co/dwD6n48mlx&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840492917940736000" data-datetime="2017-03-11T09:21:41+00:00"&gt;March 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Interesting, how to make cleaner code reducing for loops &lt;a href="https://t.co/Ny2JefgBKd" title="https://t.co/Ny2JefgBKd" target="_blank"&gt;https://t.co/Ny2JefgBKd&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840341142705188864" data-datetime="2017-03-10T23:18:35+00:00"&gt;March 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Introducing Python Fire, a library for automatically g... &lt;a href="https://t.co/myR00Mt6V0" title="https://t.co/myR00Mt6V0" target="_blank"&gt;https://t.co/myR00Mt6V0&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#pypi" target="_blank"&gt;#pypi&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/840332684220104704" data-datetime="2017-03-10T22:44:59+00:00"&gt;March 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tips to Become a Better &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Developer cheat sheet. Get your own &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/G8zezP8BI2" title="https://t.co/G8zezP8BI2" target="_blank"&gt;https://t.co/G8zezP8BI2&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839978023571058688" data-datetime="2017-03-09T23:15:41+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@restframework:" target="_blank"&gt;@restframework:&lt;/a&gt; ‚ú®Django REST framework 3.6 has now been released!‚ú®

* Interactive API docs.
* JavaScript client library.

&lt;a href="https://t.co/f‚Ä¶" title="https://t.co/f‚Ä¶" target="_blank"&gt;https://t.co/f‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839918488428941312" data-datetime="2017-03-09T19:19:07+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; A conversation about effective code reviews with &lt;a href="https://twitter.com/@d0ugal," target="_blank"&gt;@d0ugal,&lt;/a&gt; it's &lt;a href="https://twitter.com/search/#102" target="_blank"&gt;#102&lt;/a&gt; at &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt;  &lt;a href="https://t.co/DROVpNmTiY" title="https://t.co/DROVpNmTiY" target="_blank"&gt;https://t.co/DROVpNmTiY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839735176171294720" data-datetime="2017-03-09T07:10:42+00:00"&gt;March 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pythonbytes:" target="_blank"&gt;@pythonbytes:&lt;/a&gt; Here's &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/search/#16:" target="_blank"&gt;#16:&lt;/a&gt; Postmodern Python and Open-source Financial Awards &lt;a href="https://t.co/CTl8yNfkSk" title="https://t.co/CTl8yNfkSk" target="_blank"&gt;https://t.co/CTl8yNfkSk&lt;/a&gt; cc &lt;a href="https://twitter.com/@brianokken" target="_blank"&gt;@brianokken&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839145999834759168" data-datetime="2017-03-07T16:09:31+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyDataMad:" target="_blank"&gt;@PyDataMad:&lt;/a&gt; The next &lt;a href="https://twitter.com/@PyData" target="_blank"&gt;@PyData&lt;/a&gt; in Spain will be held in Barcelona. May 19th-21st at &lt;a href="https://twitter.com/@ESADE" target="_blank"&gt;@ESADE&lt;/a&gt;  &lt;a href="https://t.co/KePE7QsIo6" title="https://t.co/KePE7QsIo6" target="_blank"&gt;https://t.co/KePE7QsIo6&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839145487739531265" data-datetime="2017-03-07T16:07:29+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice trick, similarly we use shell shortcut $_ - it all saves time! &lt;a href="https://t.co/uhUUOs2Baq" title="https://t.co/uhUUOs2Baq" target="_blank"&gt;https://t.co/uhUUOs2Baq&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839066216744513536" data-datetime="2017-03-07T10:52:29+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ContinuumIO:" target="_blank"&gt;@ContinuumIO:&lt;/a&gt; Most &lt;a href="https://twitter.com/search/#AnacondaCON" target="_blank"&gt;#AnacondaCON&lt;/a&gt; 2017 videos are now on YouTube! Check out the playlist: &lt;a href="https://t.co/R13Mq3c0x4" title="https://t.co/R13Mq3c0x4" target="_blank"&gt;https://t.co/R13Mq3c0x4&lt;/a&gt; &lt;a href="https://t.co/LFQvIJYEbG" title="https://t.co/LFQvIJYEbG" target="_blank"&gt;https://t.co/LFQvIJYEbG&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839065750576975874" data-datetime="2017-03-07T10:50:38+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Time is scarce, save cycles: 5 nice &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Development Setup Tips and &lt;a href="https://twitter.com/search/#tools" target="_blank"&gt;#tools&lt;/a&gt; to Boost Your &lt;a href="https://twitter.com/search/#Productivity" target="_blank"&gt;#Productivity&lt;/a&gt; &lt;a href="https://t.co/zPNLCKYNnA" title="https://t.co/zPNLCKYNnA" target="_blank"&gt;https://t.co/zPNLCKYNnA&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/839045900769054720" data-datetime="2017-03-07T09:31:46+00:00"&gt;March 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; Flatten a list of lists with sum

&amp;gt;&amp;gt;&amp;gt; sum([[1, 2], [3], [4, 5], [6, 7, 8]], [])
[1, 2, 3, 4, 5, 6, 7, 8]

tip by &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://twitter.com/search/#‚Ä¶" target="_blank"&gt;#‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838733068462616577" data-datetime="2017-03-06T12:48:41+00:00"&gt;March 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official! PyPI has hit 100,000 packages! Woohoo!! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#milestone" target="_blank"&gt;#milestone&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/jqDoWsjfyR" title="https://t.co/jqDoWsjfyR" target="_blank"&gt;https://t.co/jqDoWsjfyR&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838178449999081472" data-datetime="2017-03-05T00:04:49+00:00"&gt;March 05, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="pypi"></category><category term="productivity"></category><category term="Django"></category><category term="Fire"></category><category term="Anaconda"></category><category term="cheat sheet"></category><category term="stdlib"></category><category term="CPython"></category><category term="microservices"></category><category term="APIs"></category><category term="tips"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers - Review</title><link href="https://pybit.es/codechallenge09_review.html" rel="alternate"></link><published>2017-03-11T09:00:00+01:00</published><updated>2017-03-11T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-11:/codechallenge09_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;Admittedly, when Bob and I discussed this challenge, I was a little intimidated. I'd never actually dealt with any of these concepts before! That said, I'm so glad we put this one out there!&lt;/p&gt;
&lt;p&gt;If it wasn't for the challenge, I wouldn't have learned nearly as much as I did.&lt;/p&gt;
&lt;p&gt;Given my current job role, I decided that it'd be fun to try and wrap a context manager around SSH functionality. This was a perfect choice given you need to specifically call .close() to close off the SSH session. If not, it just stays open indefinitely (or until timeout).&lt;/p&gt;
&lt;p&gt;All up, I had to solidify my understanding of generators, context managers and ssh within Python.
In a venv, I installed the &lt;a href="http://www.paramiko.org/"&gt;paramiko SSH package&lt;/a&gt; and went from there.&lt;/p&gt;
&lt;p&gt;After figuring out how to get the SSH connection going, I then spent the time bundling it all up within the context manager. &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan Bader's post&lt;/a&gt;; the &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;pep-0343 doc&lt;/a&gt; and a few Googled questions on Stack Overflow helped sort me out.&lt;/p&gt;
&lt;p&gt;See the full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_ssh.py"&gt;here&lt;/a&gt;. Not only does it work, but I'm also now using at home with my NAS!&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;This was a nice challenge. I got inspired by the DB rollback example of &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I wanted to see if I could use some existing code so I re-used the &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;test code&lt;/a&gt; of my &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple Flask API article&lt;/a&gt;. Just as an exercise, in real life I actually like the setUp/tearDown sandwich unittest already provides. &lt;/p&gt;
&lt;p&gt;What I really liked was that I got to think about different ways to implement this: &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb_class.py"&gt;class&lt;/a&gt; vs &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb.py"&gt;contextmanager&lt;/a&gt;. All this experimentation led to some good learning.&lt;/p&gt;
&lt;p&gt;And I got to use pytest which I really want to explore further :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) [bbelderb@macbook 09 (solutions)]$ pytest with_tes*
=== test session starts ===
...

with_testdb.py ..
with_testdb_class.py ..

=== 4 passed in 0.01 seconds ===
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="with"></category><category term="contextmanagers"></category><category term="Paramiko"></category><category term="pytest"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers</title><link href="https://pybit.es/codechallenge09.html" rel="alternate"></link><published>2017-03-06T09:50:00+01:00</published><updated>2017-03-06T09:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-06:/codechallenge09.html</id><summary type="html">&lt;p&gt;A new week, more coding! This week we have a free form exercise. This week you will implement your own Context Manager (= support with on your object).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! &lt;/p&gt;
&lt;p&gt;This week we have a free form exercise. After reading &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan's great article on the with statement&lt;/a&gt; we thought it would be cool to ask our PyBites community to come up with creative uses of the with statement. This week you get to implement your own Context Manager.&lt;/p&gt;
&lt;p&gt;You can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class implementing the __enter__ and __exit__ methods. Dan shows an Indenter class as example in his article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the nice &lt;a href="https://docs.python.org/3.6/library/contextlib.html#contextlib.contextmanager"&gt;@contextmanager decorator&lt;/a&gt; shortcut. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;h3&gt;Other resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/reference/compound_stmts.html#with"&gt;with statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343 -- The "with" Statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/contextlib.html"&gt;contextlib ‚Äî Utilities for with-statement contexts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/"&gt;Python with Context Managers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If beginner you might need to read up on some more advanced concepts: &lt;a href="https://wiki.python.org/moin/Generators"&gt;Generators&lt;/a&gt; and &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;Decorators&lt;/a&gt;, also covered in chapters 3 and 7 of the &lt;a href="http://book.pythontips.com/en/latest/index.html"&gt;Python tips book&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 09
# open withlove.py (just a blank file for this challenge)
#¬†code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="with"></category><category term="contextlib"></category><category term="contextmanagers"></category><category term="decorators"></category><category term="generators"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker - Review</title><link href="https://pybit.es/codechallenge08_review.html" rel="alternate"></link><published>2017-03-05T09:00:00+01:00</published><updated>2017-03-05T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-05:/codechallenge08_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;The simplicity of this challenge is what made it fun for me. The challenge was in deciding how to store and manage the data in the most effective (and hopefully Pythonic!) way.&lt;/p&gt;
&lt;p&gt;I decided to go with multiple dicts: dicts for each room and then one main dict for the list of rooms.&lt;/p&gt;
&lt;p&gt;Code wise, the challenge was to then properly list out the required keys and values of each dict when required. I did this using nested for loops in the &lt;em&gt;print_contents()&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;I also added in a quick function to get the value of each room in total. It was satisfying seeing the result of sum(v.values()) appear! See output below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_julian.py

Study
computer: &lt;span class="nv"&gt;$1200&lt;/span&gt;
lg flatron monitor: &lt;span class="nv"&gt;$300&lt;/span&gt;
samsung monitor: &lt;span class="nv"&gt;$500&lt;/span&gt;
desk: &lt;span class="nv"&gt;$400&lt;/span&gt;
guitar: &lt;span class="nv"&gt;$500&lt;/span&gt;

Living Room
couch: &lt;span class="nv"&gt;$1000&lt;/span&gt;
tv: &lt;span class="nv"&gt;$3000&lt;/span&gt;
playstation: &lt;span class="nv"&gt;$500&lt;/span&gt;
speakers: &lt;span class="nv"&gt;$600&lt;/span&gt;
beanbag: &lt;span class="nv"&gt;$30&lt;/span&gt;

Master Bedroom
bed: &lt;span class="nv"&gt;$400&lt;/span&gt;
mattress: &lt;span class="nv"&gt;$1000&lt;/span&gt;
chair: &lt;span class="nv"&gt;$180&lt;/span&gt;
drawers: &lt;span class="nv"&gt;$250&lt;/span&gt;
lamp: &lt;span class="nv"&gt;$20&lt;/span&gt;

Totals:
Study: &lt;span class="nv"&gt;$2900&lt;/span&gt;
Living Room: &lt;span class="nv"&gt;$5130&lt;/span&gt;
Master Bedroom: &lt;span class="nv"&gt;$1850&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_julian.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I had fun making an interactive version for this. This forced me to think about user input validation: name of item is required, value requires an int.
There might be a bit repetition in resulting &lt;em&gt;get_name&lt;/em&gt; and &lt;em&gt;get_value&lt;/em&gt;, they both ask for user input, yet do different validations. 
Maybe something to wrap in a validation class ...&lt;/p&gt;
&lt;p&gt;Nice constructs I could use: defaultdict, namedtuple and format printing.&lt;/p&gt;
&lt;p&gt;Before I would have mixed calculation and printing, now I isolating the summing in &lt;em&gt;calc_totals&lt;/em&gt; function which makes it a bit cleaner. 
See output below - I changed the NUM_ITEMS constant to 2 for shorter output (could make it a command line arg ...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_bob.py

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room study:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: monitor
- Enter the value of the item: &lt;span class="m"&gt;200&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: laptop
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room living_room:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: sofa
- Enter the value of the item: &lt;span class="m"&gt;600&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: tv
- Enter the value of the item: &lt;span class="m"&gt;500&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room master_bedroom:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: bed
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: couch
- Enter the value of the item: &lt;span class="m"&gt;400&lt;/span&gt;

* Room: study
monitor        :   &lt;span class="m"&gt;200&lt;/span&gt;
laptop         :  &lt;span class="m"&gt;1000&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1200&lt;/span&gt;

* Room: living_room
sofa           :   &lt;span class="m"&gt;600&lt;/span&gt;
tv             :   &lt;span class="m"&gt;500&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1100&lt;/span&gt;

* Room: master_bedroom
bed            :  &lt;span class="m"&gt;1000&lt;/span&gt;
couch          :   &lt;span class="m"&gt;400&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1400&lt;/span&gt;

----
Total          :  &lt;span class="m"&gt;3700&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_bob.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus: simple API&lt;/h3&gt;
&lt;p&gt;This was also a good occasion to make a simple API with Flask, which we practiced &lt;a href="http://pybit.es/simple-flask-api.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="inventory"></category><category term="Flask"></category><category term="APIs"></category><category term="data structures"></category></entry><entry><title>Twitter digest 2017 week 09</title><link href="https://pybit.es/twitter_digest_201709.html" rel="alternate"></link><published>2017-03-04T08:30:00+01:00</published><updated>2017-03-04T08:30:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-04:/twitter_digest_201709.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice article, saved for future reference:

A Simple Guide for Python Packaging‚Äù by &lt;a href="https://twitter.com/@flyfengjie" target="_blank"&gt;@flyfengjie&lt;/a&gt; &lt;a href="https://t.co/iRHEuIGwnS" title="https://t.co/iRHEuIGwnS" target="_blank"&gt;https://t.co/iRHEuIGwnS&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837926382701277184" data-datetime="2017-03-04T07:23:12+00:00"&gt;March 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Postmodern Error Handling in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; 3.6 &lt;a href="https://t.co/IInRMDGP29" title="https://t.co/IInRMDGP29" target="_blank"&gt;https://t.co/IInRMDGP29&lt;/a&gt; - nice article highlighting enums, typed NamedTuples, type annotations&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837923650745602049" data-datetime="2017-03-04T07:12:20+00:00"&gt;March 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonTopNews:" target="_blank"&gt;@PythonTopNews:&lt;/a&gt; What one thing took your Python to the next level : Python &lt;a href="https://t.co/1KTMYo35Nq" title="https://t.co/1KTMYo35Nq" target="_blank"&gt;https://t.co/1KTMYo35Nq&lt;/a&gt; via &lt;a href="https://twitter.com/@pycoders" target="_blank"&gt;@pycoders&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837789521827737601" data-datetime="2017-03-03T22:19:22+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; data analytics victory. &lt;a href="https://twitter.com/@TreyPruitt" target="_blank"&gt;@TreyPruitt&lt;/a&gt; best estimated when &lt;a href="https://twitter.com/search/#pypi" target="_blank"&gt;#pypi&lt;/a&gt; would roll over 100,000 packages next week: &lt;a href="https://t.c‚Ä¶" title="https://t.c‚Ä¶" target="_blank"&gt;https://t.c‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837785994095181825" data-datetime="2017-03-03T22:05:20+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; My new sounds: &lt;a href="https://twitter.com/search/#101:" target="_blank"&gt;#101:&lt;/a&gt; Adding a full featured Python environment to Visual Studio Code &lt;a href="https://t.co/5zGSLNtZ7j" title="https://t.co/5zGSLNtZ7j" target="_blank"&gt;https://t.co/5zGSLNtZ7j&lt;/a&gt; on &lt;a href="https://twitter.com/search/#SoundCloud" target="_blank"&gt;#SoundCloud&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837783077363527681" data-datetime="2017-03-03T21:53:45+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; In &lt;a href="https://twitter.com/search/#python3" target="_blank"&gt;#python3&lt;/a&gt; a, *b, c = [1, 2, 3, 4, 5] unpacks as follows
&amp;gt;&amp;gt;&amp;gt; a
1
&amp;gt;&amp;gt;&amp;gt; b
[2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; c
5&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837782731035672576" data-datetime="2017-03-03T21:52:22+00:00"&gt;March 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Programming Language LiveLessons - excellent beyond basics &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; course, thanks &lt;a href="https://twitter.com/@dabeaz," target="_blank"&gt;@dabeaz,&lt;/a&gt; learning a lot - &lt;a href="https://t.co/tjsWJbzmFk" title="https://t.co/tjsWJbzmFk" target="_blank"&gt;https://t.co/tjsWJbzmFk&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837371748412719104" data-datetime="2017-03-02T18:39:17+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@NumFOCUS:" target="_blank"&gt;@NumFOCUS:&lt;/a&gt; Level up your knowledge‚ÄîWe have over 700 great &lt;a href="https://twitter.com/search/#pydata" target="_blank"&gt;#pydata&lt;/a&gt; talks hosted on the &lt;a href="https://twitter.com/@PyData" target="_blank"&gt;@PyData&lt;/a&gt; youtube channel! Subscribe: &lt;a href="https://t.co/w‚Ä¶" title="https://t.co/w‚Ä¶" target="_blank"&gt;https://t.co/w‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837356203617447937" data-datetime="2017-03-02T17:37:30+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 284 
&lt;a href="https://t.co/nmX7viqISj" title="https://t.co/nmX7viqISj" target="_blank"&gt;https://t.co/nmX7viqISj&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#pandas" target="_blank"&gt;#pandas&lt;/a&gt; &lt;a href="https://twitter.com/search/#neuralnetwork" target="_blank"&gt;#neuralnetwork&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#p‚Ä¶" target="_blank"&gt;#p‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837356110000586753" data-datetime="2017-03-02T17:37:08+00:00"&gt;March 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@brianokken:" target="_blank"&gt;@brianokken:&lt;/a&gt; Packaging, distribution, async, pandas, pytest, getting news &amp;amp; Guido on &lt;a href="https://t.co/oTEUALvqpV" title="https://t.co/oTEUALvqpV" target="_blank"&gt;https://t.co/oTEUALvqpV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/837032333245046784" data-datetime="2017-03-01T20:10:34+00:00"&gt;March 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Had fun writing this article on the &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; fun that's trending on Twitter! &lt;a href="https://t.co/PvME6U5fup" title="https://t.co/PvME6U5fup" target="_blank"&gt;https://t.co/PvME6U5fup&lt;/a&gt; Stay humble Pythonistas!&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836890100399210496" data-datetime="2017-03-01T10:45:23+00:00"&gt;March 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@William_Holroyd:" target="_blank"&gt;@William_Holroyd:&lt;/a&gt; The Hitchhiker's Guide to Python from &lt;a href="https://twitter.com/@OReillyMedia" target="_blank"&gt;@OReillyMedia&lt;/a&gt; &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; &lt;a href="https://twitter.com/@tanyaschlusser" target="_blank"&gt;@tanyaschlusser&lt;/a&gt; is the best beginners language ecosy‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836496286136299521" data-datetime="2017-02-28T08:40:30+00:00"&gt;February 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice new article by &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt;  - Context Managers and the ‚Äúwith‚Äù Statement in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/q2b21rAFXa" title="https://t.co/q2b21rAFXa" target="_blank"&gt;https://t.co/q2b21rAFXa&lt;/a&gt; (including exercises)&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/836469979214143488" data-datetime="2017-02-28T06:55:58+00:00"&gt;February 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@testpodcast:" target="_blank"&gt;@testpodcast:&lt;/a&gt; 27: Mahmoud Hashemi : unit, integration, and system&amp;nbsp;testing &lt;a href="https://t.co/pIfPd4xAoU" title="https://t.co/pIfPd4xAoU" target="_blank"&gt;https://t.co/pIfPd4xAoU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835915761478733825" data-datetime="2017-02-26T18:13:42+00:00"&gt;February 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Haha, this is awesome üëè "The Zen of Python" illustrated as a web comic &lt;a href="https://t.co/2zkI7CzpK8" title="https://t.co/2zkI7CzpK8" target="_blank"&gt;https://t.co/2zkI7CzpK8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835574841860218880" data-datetime="2017-02-25T19:39:01+00:00"&gt;February 25, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="contextmanagers"></category><category term="3.6"></category><category term="pypi"></category><category term="training"></category><category term="tuples"></category><category term="pydata"></category><category term="testing"></category><category term="zen"></category><category term="pyfun"></category></entry><entry><title>I have been coding in Python for years and I still ...</title><link href="https://pybit.es/python-lookup.html" rel="alternate"></link><published>2017-03-01T09:00:00+01:00</published><updated>2017-03-01T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-01:/python-lookup.html</id><summary type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;
&lt;p&gt;It seems to have started here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is Tim. I'm a lead at Google with over 30 years coding experience and I need to look up how to get length of a python string. &lt;a href="https://twitter.com/tdierks/status/835912924329836545"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or maybe even here: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don't do riddles. &lt;a href="https://twitter.com/dhh/status/834146806594433025"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; to the rescue, as Pythonista Luciano Ramalho tweets: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Luciano, I've been coding for almost 40 years now, and I believe StackOverflow is the best thing since array bounds checking. &lt;a href="https://twitter.com/ramalhoorg/status/836319368216739842"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Pythonistas&lt;/h3&gt;
&lt;p&gt;Some fun examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20python&amp;amp;src=typd"&gt;here&lt;/a&gt; (Python bloggers, take note ...). &lt;/p&gt;
&lt;p&gt;We definitely have been here:&lt;/p&gt;
&lt;p&gt;CSV files cannot be written without Google:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still google to read/write csv files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging (setup) is hard!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still copy paste from the logging cookbook. #python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What was the difference again between json dump and load? And when to add the extra -s?!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been using Python for more than 4 years and still forget the difference between json dump(s) and load(s) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Negative slicing, maybe not so clear to the next maintainer of your code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been doing Python for a few years now. I have to check the docs when I need list slicing with negative indexes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily we have the REPL, just type python + enter, and play:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... using Python since 2001. I still keep many tabs of stdlib docs open, and check often in a REPL as a normal worflow. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True, writing a book or blog you still have to look up stuff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I wrote a widely read book about Intermediate Python and I still have to use Stackoverflow and Google while coding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep, we looked this one up too last week: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always confuse .sort() with sorted().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can't remember map parameter order either, list comprehensions do fit in our memory (and are more elegant) :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... still can't remember if its map(fn, iterable) or map(iterable, fn) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tedioust Python code to write indeed, we always need to copy it from somewhere ;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always copy if __name__ == "__main__" from another Python script because I cannot count the underscores &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regex stuff (re module) is hard to do from memory (specially group() vs groups() on a matched object!):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I need to check docs on pretty much everything in the 're' lib before using it &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We share the feeling, we too have to lookup datetime docs everytime we work with dates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't use date and timezone properly without google &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of these things you open a quick REPL session for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still have to use the REPL to figure out how slices work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh and don't forget the whitespace, luckily it's simple to set (and forget) in Vim:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't write python without something to manage my whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whitespace, ouch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... contributor to many scientific python projects, and I just spent 40 min debugging because I had an extra space on one line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;*nix fun&lt;/h3&gt;
&lt;p&gt;This happens all the time to us too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always forget about the crontab's entry time order and need to lookup at the man page. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...  I'm using bash since 15 years but still have to Google the syntax of 'find -exec' every time I use it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To have a laugh you can read more generic programming examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20years%20still&amp;amp;src=typd"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PyBites favorite:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been coding in Python for 4 years now and I still haven't learned any better languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;And you?&lt;/h3&gt;
&lt;p&gt;You can share your experience with us &lt;a href="http://twitter.com/home?status=@pybites I have been coding in %23Python for n years and I still ... " target="_blank"&gt;via Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="learning"></category><category term="twitter"></category><category term="pyfun"></category><category term="stackoverflow"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker</title><link href="https://pybit.es/codechallenge08.html" rel="alternate"></link><published>2017-02-27T00:01:00+01:00</published><updated>2017-02-27T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-27:/codechallenge08.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will create an app to keep track of a house inventory.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! Here's the idea - we're keeping it simple.&lt;/p&gt;
&lt;p&gt;Having home and contents insurance requires you to accurately indicate the value of the items in your house. The idea came to me when doing this for myself. &lt;/p&gt;
&lt;p&gt;What if I could write a simple program that allowed me to create a list of rooms in my house and for each room a list of items along with their dollar values? &lt;/p&gt;
&lt;h3&gt;House Inventory Tracker Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a list of rooms (doesn't have to use the list type).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each room in your rooms list needs to contain at least 5 items (ie, TV, couch, table, etc) and the relative dollar value of each item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write will print out each room along with the individual items and values. This needs to be properly formatted, eg: no printing a dict as is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;These are bonus features. Not required but cool to try if you're interested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create some sort of program shell with a menu system around this. ie, "Which room would you like to list out?"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're really game, allow users to create rooms and update information. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even make an API with Flask or your preferred framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the total dollar value of each room and the entire house.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have persistent storage of the data. sqlite3 = stdlib and light-weight, but feel free to use your preferred DB / module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 08
# open inventory.py (just a blank file for this challenge)
#¬†code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="app"></category><category term="inventory"></category><category term="APIs"></category><category term="Flask"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis - Review</title><link href="https://pybit.es/codechallenge07_review.html" rel="alternate"></link><published>2017-02-26T00:50:00+01:00</published><updated>2017-02-26T00:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-26:/codechallenge07_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution / learning&lt;/h2&gt;
&lt;h3&gt;Getting the data&lt;/h3&gt;
&lt;p&gt;First we let the &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/getting_data.py"&gt;data gathering script we provided&lt;/a&gt; run for 5 days and 10 hours. As promised we would do the analysis on &lt;a href="http://www.imdb.com/title/tt4465564/"&gt;50 shades of darker&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup python getting_data.py &lt;span class="m"&gt;50&lt;/span&gt; shades darker &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It ran Mon Feb 20 09:13 - Sat Feb 25 19:25 and collected &amp;gt; 10K tweets, storing them in data_1487581986.json&lt;/p&gt;
&lt;p&gt;We kept it simple, question to be answered: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there overly positive or negative talk about 50 shades of darker on Twitter?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Enter TextBlob&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It makes sentiment analysis very easy. &lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Our script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/sentiment.py"&gt;here&lt;/a&gt;. What we did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import required libraries: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to follow along, create a virtual env and do a pip install -r requirements.txt (from subdirectory 07, after having cloned the challenges repo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each retrieved tweet (and its meta data) was stored as json by the data collector script. This generator retrieves them from the input file (further down):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://textblob.readthedocs.io/en/dev/quickstart.html"&gt;TextBlob Quickstart&lt;/a&gt; offers an easy API for sentiment analysis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sentiment property returns a namedtuple of the form Sentiment(polarity, subjectivity). The polarity score is a float within the range [-1.0, 1.0].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we defined:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_sentiment(polarity):
    if polarity &amp;lt; 0:
        return &amp;quot;negative&amp;quot;
    elif polarity == 0:
        return &amp;quot;neutral&amp;quot;
    else:
        return &amp;quot;positive&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We pass the script the data_1487581986.json file we collected on our server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    if len(sys.argv) &amp;lt; 2:
        print(&amp;#39;please provide json data file&amp;#39;)
        sys.exit(1)

    input_file = sys.argv[1]

    tweets = get_tweets(input_file)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict to store the sentiments. We use a collections.defaultdict + set here (over the simpler collections.Counter) for two reasons: 1. ignore duplicate tweets, 2. store the texts for further inspection (see further down).&lt;/p&gt;
&lt;p&gt;This really shows the magic of external libraries and a nice API: few lines of code, hiding complexity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    sentiments = defaultdict(set)

    for tw in tweets:
        text = dict(tw)[&amp;#39;text&amp;#39;].lower()
        blob = TextBlob(text)
        sent = get_sentiment(blob.sentiment.polarity)
        sentiments[sent].add(text)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate percentages and print the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    total = sum(len(i) for i in sentiments.values())

    perc_pos = len(sentiments[&amp;quot;positive&amp;quot;]) / total * 100
    perc_neg = len(sentiments[&amp;quot;negative&amp;quot;]) / total * 100
    perc_neu = len(sentiments[&amp;quot;neutral&amp;quot;]) / total * 100

    print(&amp;quot;Analyzed {} tweets&amp;quot;.format(total))
    print(&amp;quot;Positive: {:.2f}%&amp;quot;.format(perc_pos))
    print(&amp;quot;Negative: {:.2f}%&amp;quot;.format(perc_neg))
    print(&amp;quot;Neutral: {:.2f}%&amp;quot;.format(perc_neu))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The verdict&lt;/h3&gt;
&lt;p&gt;People talk mostly positive about the movie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python sentiment.py data_1487581986.json
Analyzed &lt;span class="m"&gt;10053&lt;/span&gt; tweets
Positive: &lt;span class="m"&gt;33&lt;/span&gt;.85%
Negative: &lt;span class="m"&gt;13&lt;/span&gt;.86%
Neutral: &lt;span class="m"&gt;52&lt;/span&gt;.29%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Would be nice to break this down further, maybe by region. We wanted to look at gender, but this data was not provided by the Twitter API. &lt;/p&gt;
&lt;h3&gt;Some anonymous examples&lt;/h3&gt;
&lt;p&gt;We peaked at some tweets for validation. As you see it's not 100% correct (doubts marked with '?'), but it does give you a good indication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;neutral
-- 50 shades darker though.. oouuu. üôÜüèΩ
-- ‚ù§ü§¥üèº‚ù§ ‚Äî watching 50 shades darker...
-- still don&amp;#39;t know what to think of 50 shades darkerü§îü§î
---

positive
-- can&amp;#39;t get over how amazing 50 shades darker is üòç
-- i enjoyed 50 shades darker very much
?-- that 50 shades darker was kind of sorry
---

negative
?-- still haven&amp;#39;t seen 50 shades darker :(  
-- 50 shades darker might be the worst movie i&amp;#39;ve ever seen ...
-- 50 shades darker was terrible god i wish i could get those 2 hours back
---
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://realpython.com/blog/python/twitter-sentiment-python-docker-elasticsearch-kibana/"&gt;This great article by Real Python&lt;/a&gt; shows another Twitter Sentiment Analysis example adding Docker, Elasticsearch, Kibana to the mix. &lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="Twitter"></category><category term="sentiment"></category><category term="TextBlob"></category></entry><entry><title>Twitter digest 2017 week 08</title><link href="https://pybit.es/twitter_digest_201708.html" rel="alternate"></link><published>2017-02-25T01:20:00+01:00</published><updated>2017-02-25T01:20:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-25:/twitter_digest_201708.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; "New in &lt;a href="https://twitter.com/search/#python3.6" target="_blank"&gt;#python3.6&lt;/a&gt; - formatted string literals:
&amp;gt;&amp;gt;&amp;gt; name = Fred
&amp;gt;&amp;gt;&amp;gt; f'His name is {name}'
His name is Fred

More: &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835100947844055040" data-datetime="2017-02-24T12:15:56+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; Use _ in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; console to retrieve the result of the last statement
&amp;gt;&amp;gt;&amp;gt; 3 + 4
7
&amp;gt;&amp;gt;&amp;gt; _ * 3
21
For other uses, see: &lt;a href="https:/‚Ä¶" title="https:/‚Ä¶" target="_blank"&gt;https:/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835100903350894592" data-datetime="2017-02-24T12:15:45+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonLibHunt:" target="_blank"&gt;@PythonLibHunt:&lt;/a&gt; Awesome &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Weekly &lt;a href="https://twitter.com/search/#41" target="_blank"&gt;#41&lt;/a&gt; is out &lt;a href="https://t.co/QeDNiVLRzI" title="https://t.co/QeDNiVLRzI" target="_blank"&gt;https://t.co/QeDNiVLRzI&lt;/a&gt;
Featuring &lt;a href="https://twitter.com/@djangoproject" target="_blank"&gt;@djangoproject&lt;/a&gt; &lt;a href="https://twitter.com/@djangostars" target="_blank"&gt;@djangostars&lt;/a&gt; &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/835027676930920448" data-datetime="2017-02-24T07:24:46+00:00"&gt;February 24, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt;  thanks a lot guys for mentioning our python resources article and PyBites blog, really appreciated&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834892403265925121" data-datetime="2017-02-23T22:27:15+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Special &lt;a href="https://twitter.com/@talkpython:" target="_blank"&gt;@talkpython:&lt;/a&gt; &lt;a href="https://twitter.com/search/#100:" target="_blank"&gt;#100:&lt;/a&gt; Python past, present, and future with &lt;a href="https://twitter.com/@gvanrossum" target="_blank"&gt;@gvanrossum&lt;/a&gt; &lt;a href="https://t.co/pAfyMrLnOM" title="https://t.co/pAfyMrLnOM" target="_blank"&gt;https://t.co/pAfyMrLnOM&lt;/a&gt; Thank you everyone for‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834606872715997184" data-datetime="2017-02-23T03:32:39+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Just blogged: New Talk Python course: Consuming HTTP services in Python &lt;a href="https://t.co/Y4DKuFWqZJ" title="https://t.co/Y4DKuFWqZJ" target="_blank"&gt;https://t.co/Y4DKuFWqZJ&lt;/a&gt; &lt;a href="https://t.co/VvvjtcMdEe" title="https://t.co/VvvjtcMdEe" target="_blank"&gt;https://t.co/VvvjtcMdEe&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834606825001611264" data-datetime="2017-02-23T03:32:27+00:00"&gt;February 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; üì∫üêç Python Tricks &lt;a href="https://twitter.com/search/#6:" target="_blank"&gt;#6:&lt;/a&gt; Understanding &lt;a href="https://twitter.com/@classmethod," target="_blank"&gt;@classmethod,&lt;/a&gt; &lt;a href="https://twitter.com/@staticmethod," target="_blank"&gt;@staticmethod,&lt;/a&gt; and Regular Methods &lt;a href="https://t.co/dzAdfzofZC" title="https://t.co/dzAdfzofZC" target="_blank"&gt;https://t.co/dzAdfzofZC&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/834327854833889281" data-datetime="2017-02-22T09:03:56+00:00"&gt;February 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; great article, nice related history lesson: &lt;a href="https://t.co/82bJPsnphM" title="https://t.co/82bJPsnphM" target="_blank"&gt;https://t.co/82bJPsnphM&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833903382989512705" data-datetime="2017-02-21T04:57:14+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@djdanzilio:" target="_blank"&gt;@djdanzilio:&lt;/a&gt; OH: Python is so easy. You just write pseudocode and indent until it runs.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833892102752915456" data-datetime="2017-02-21T04:12:24+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip ‚òùÔ∏è
Like namedtuple? You'll love NamedTuple! üòÑ
class Name(NamedTuple):
first: str
last: str
&lt;a href="https://t.co‚Ä¶" title="https://t.co‚Ä¶" target="_blank"&gt;https://t.co‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833891246947127297" data-datetime="2017-02-21T04:09:00+00:00"&gt;February 21, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; sum can take a generator:
sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
Tip by &lt;a href="https://twitter.com/@pybites." target="_blank"&gt;@pybites.&lt;/a&gt; Thanks! &lt;a href="https://t.co/Cn‚Ä¶" title="https://t.co/Cn‚Ä¶" target="_blank"&gt;https://t.co/Cn‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833640394630033408" data-datetime="2017-02-20T11:32:13+00:00"&gt;February 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Code readability &lt;a href="https://t.co/GiRyjevWly" title="https://t.co/GiRyjevWly" target="_blank"&gt;https://t.co/GiRyjevWly&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833402718924451840" data-datetime="2017-02-19T19:47:46+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TalkPython:" target="_blank"&gt;@TalkPython:&lt;/a&gt; Python 3, created via PEP 3000, is exactly 3,000 days old today. Take a moment to celebrate! Thanks for the heads up &lt;a href="https://twitter.com/@cclau‚Ä¶" target="_blank"&gt;@cclau‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833400185925550080" data-datetime="2017-02-19T19:37:42+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Scientists make huge dataset of nearby stars available to public &lt;a href="https://t.co/4Gg72kcTHV" title="https://t.co/4Gg72kcTHV" target="_blank"&gt;https://t.co/4Gg72kcTHV&lt;/a&gt; &lt;a href="https://twitter.com/@Pybonacci" target="_blank"&gt;@Pybonacci&lt;/a&gt; &lt;a href="https://twitter.com/@astrojuanlu" target="_blank"&gt;@astrojuanlu&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833264349137477634" data-datetime="2017-02-19T10:37:56+00:00"&gt;February 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; The Python 3 Standard Library by Example, Second Edition &lt;a href="https://twitter.com/search/#AddisonWesleyProfessional" target="_blank"&gt;#AddisonWesleyProfessional&lt;/a&gt; &lt;a href="https://t.co/FVvNBvfCSr" title="https://t.co/FVvNBvfCSr" target="_blank"&gt;https://t.co/FVvNBvfCSr&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/833070218457001984" data-datetime="2017-02-18T21:46:32+00:00"&gt;February 18, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="Guido"></category><category term="namedtuples"></category><category term="tips"></category><category term="books"></category><category term="stdlib"></category><category term="data"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis</title><link href="https://pybit.es/codechallenge07.html" rel="alternate"></link><published>2017-02-20T00:01:00+01:00</published><updated>2017-02-20T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-20:/codechallenge07.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will do a sentiment analysis of a recently released movie, is it well received or not?&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Perform a sentiment analysis on a popular topic on Twitter&lt;/h3&gt;
&lt;p&gt;A new week, more coding! You are free to pick a topic. This can be a trend, news or movie. We will take latter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do Tweeters react on &lt;a href="http://www.imdb.com/title/tt4465564/?ref_=nv_sr_1"&gt;Fifty Shades Darker&lt;/a&gt;, positive or negative?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app if not done already to get keys, put those in config.py (copying the config-template.py)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install Twython (to follow along with our approach just do pip install -r requirements.txt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have provided a getting_data.py script (from &lt;a href="https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/getting_data.py"&gt;Joel Grus&lt;/a&gt;) that uses the Twitter &lt;a href="https://dev.twitter.com/streaming/overview"&gt;Streaming APIs&lt;/a&gt; to collect tweets, run it as follows. It takes 1000 tweets, adjust as necessary (this is also an experiment for us!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python getting_data.py Fifty Shades Darker
&lt;span class="c1"&gt;# replacing with your topic of interest&lt;/span&gt;
&lt;span class="c1"&gt;#¬†generates data_unix_timestamp.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you prefer Tweepy, you can use this &lt;a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/"&gt;article/ script&lt;/a&gt; (and pip install that library ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write is sentiment.py, it contains some code to read the stored json back in memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python sentiment.py data_1487544849.json
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean up the data, we did some of this in &lt;a href="http://pybit.es/codechallenge05_review.html"&gt;part 2&lt;/a&gt; of this challenge series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sentiment analysis ... is the audience positive or negative? We will try &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; for this, use any (Python) tools you prefer ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 07
$ cp sentiment-template.py sentiment.py
# if you want to follow along with our recommended libraries (assuming py &amp;gt;= 3.3)
$ python -m venv venv 
$ source venv/bin/activate&amp;#39;
$ pip install -r requirements.txt
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Twitter digest 2017 week 07</title><link href="https://pybit.es/twitter_digest_201707.html" rel="alternate"></link><published>2017-02-18T09:17:00+01:00</published><updated>2017-02-18T09:17:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-18:/twitter_digest_201707.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Tiny Python 3.6 notebook - &lt;a href="https://t.co/DhkDN4wz1E" title="https://t.co/DhkDN4wz1E" target="_blank"&gt;https://t.co/DhkDN4wz1E&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832851596052688896" data-datetime="2017-02-18T07:17:48+00:00"&gt;February 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Using functional programming in Python like a boss: Generators, Iterators and Decorators  &lt;a href="https://t.co/nGKjeKaI1V" title="https://t.co/nGKjeKaI1V" target="_blank"&gt;https://t.co/nGKjeKaI1V&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832659700776787969" data-datetime="2017-02-17T18:35:17+00:00"&gt;February 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dabeaz:" target="_blank"&gt;@dabeaz:&lt;/a&gt; Well, work has recently started...    &lt;a href="https://t.co/fu5mGsv0hN" title="https://t.co/fu5mGsv0hN" target="_blank"&gt;https://t.co/fu5mGsv0hN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832659410543529984" data-datetime="2017-02-17T18:34:08+00:00"&gt;February 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 282 &lt;a href="https://t.co/2xkYbTXDW7" title="https://t.co/2xkYbTXDW7" target="_blank"&gt;https://t.co/2xkYbTXDW7&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#keras" target="_blank"&gt;#keras&lt;/a&gt; &lt;a href="https://twitter.com/search/#opencv" target="_blank"&gt;#opencv&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyflame" target="_blank"&gt;#pyflame&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#spark" target="_blank"&gt;#spark&lt;/a&gt; &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; &lt;a href="https://twitter.com/search/#ip‚Ä¶" target="_blank"&gt;#ip‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832332113307385857" data-datetime="2017-02-16T20:53:34+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; ‚ÄúOh no! This package is Python 2 only‚Äù by &lt;a href="https://twitter.com/@anthonypjshaw" target="_blank"&gt;@anthonypjshaw&lt;/a&gt; &lt;a href="https://t.co/DQrRi5mVfH" title="https://t.co/DQrRi5mVfH" target="_blank"&gt;https://t.co/DQrRi5mVfH&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832331244490911744" data-datetime="2017-02-16T20:50:07+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The definitive guide on how to use static, class or abstract methods in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://t.co/n8imiKdlqv" title="https://t.co/n8imiKdlqv" target="_blank"&gt;https://t.co/n8imiKdlqv&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832323736409882625" data-datetime="2017-02-16T20:20:17+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Guido's King's Day Speech - wonderful talk: &lt;a href="https://t.co/Zrp7Uo79BP" title="https://t.co/Zrp7Uo79BP" target="_blank"&gt;https://t.co/Zrp7Uo79BP&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832158536712986624" data-datetime="2017-02-16T09:23:50+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#99" target="_blank"&gt;#99&lt;/a&gt; Morepath: Super Powered Python Web Framework &lt;a href="https://t.co/3xPnSAjqBB" title="https://t.co/3xPnSAjqBB" target="_blank"&gt;https://t.co/3xPnSAjqBB&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832152565630406657" data-datetime="2017-02-16T09:00:06+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;nice one, had not used print like this before &lt;a href="https://t.co/b3mbLZT7DY" title="https://t.co/b3mbLZT7DY" target="_blank"&gt;https://t.co/b3mbLZT7DY&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832148331103133698" data-datetime="2017-02-16T08:43:17+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@python_tip:" target="_blank"&gt;@python_tip:&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt; d = collections.deque(range(10))
&amp;gt;&amp;gt;&amp;gt; d.rotate(2)
&amp;gt;&amp;gt;&amp;gt; print(d)
‚Äã
deque([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])
&lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/832148063028387840" data-datetime="2017-02-16T08:42:13+00:00"&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@ramalhoorg:" target="_blank"&gt;@ramalhoorg:&lt;/a&gt; Legit is a complementary command-line interface for Git, optimized for workflow simplicity. By &lt;a href="https://twitter.com/@kennethreitz." target="_blank"&gt;@kennethreitz.&lt;/a&gt; &lt;a href="https://t.co/‚Ä¶" title="https://t.co/‚Ä¶" target="_blank"&gt;https://t.co/‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831947828679278593" data-datetime="2017-02-15T19:26:33+00:00"&gt;February 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#13" target="_blank"&gt;#13&lt;/a&gt; Python making the move to GitHub and Dropbox is stepping back from Pyston &lt;a href="https://t.co/Z4iGIQjbZv" title="https://t.co/Z4iGIQjbZv" target="_blank"&gt;https://t.co/Z4iGIQjbZv&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831790197562019843" data-datetime="2017-02-15T09:00:11+00:00"&gt;February 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Writing Clean Python With Namedtuples &lt;a href="https://t.co/OUx89PN8mL" title="https://t.co/OUx89PN8mL" target="_blank"&gt;https://t.co/OUx89PN8mL&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831427802045968385" data-datetime="2017-02-14T09:00:09+00:00"&gt;February 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; "Problem Solving with Algorithms and Data Structures using Python" &lt;a href="https://t.co/7RIyNZKQre" title="https://t.co/7RIyNZKQre" target="_blank"&gt;https://t.co/7RIyNZKQre&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/831231247242362882" data-datetime="2017-02-13T19:59:07+00:00"&gt;February 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Brett Slatkin - Refactoring Python: Why and how to restructure your code... &lt;a href="https://t.co/wd6yUQipf0" title="https://t.co/wd6yUQipf0" target="_blank"&gt;https://t.co/wd6yUQipf0&lt;/a&gt; - great talk&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830535920654884865" data-datetime="2017-02-11T21:56:08+00:00"&gt;February 11, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="3.6"></category><category term="functional programming"></category><category term="2vs3"></category><category term="git"></category><category term="github"></category><category term="guido"></category><category term="oop"></category><category term="namedtuples"></category><category term="algorithms"></category><category term="refactoring"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction - Review</title><link href="https://pybit.es/codechallenge06_review.html" rel="alternate"></link><published>2017-02-17T16:00:00+01:00</published><updated>2017-02-17T16:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-17:/codechallenge06_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solutions / learning&lt;/h2&gt;
&lt;h3&gt;1. Moving average using PyPI's RSS&lt;/h3&gt;
&lt;p&gt;My first approach was to take the &lt;a href="https://pypi.python.org/pypi?%3Aaction=packages_rss"&gt;PyPI New RSS feed&lt;/a&gt; and take the average of time between adding packages. The script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi100k.py"&gt;here&lt;/a&gt;. The problem though is that the RSS feed has only 40 items, not much data. However when I put it in a cronjob and left it running for a week I got pretty similar results: it will happen somewhere at the beginning of March:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep Result pypi.log |sed &amp;#39;s/,.* \[Main.*: /   /g&amp;#39;
2017-02-09 16:09:13   2017-02-25 13:52:23.701848
2017-02-10 15:57:03   2017-02-26 03:50:38.528795
2017-02-11 15:57:03   2017-03-09 23:10:14.631885
2017-02-12 15:57:03   2017-03-05 22:31:50.575452
2017-02-13 15:57:03   2017-02-27 07:02:47.599206
2017-02-14 15:57:03   2017-02-21 20:41:34.775090
2017-02-15 15:57:03   2017-02-25 00:01:30.304754
2017-02-16 15:57:03   2017-03-01 12:52:38.659931
2017-02-17 08:00:33   2017-03-01 09:38:01.360349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another source to use if you go this route is &lt;a href="https://wiki.python.org/moin/PyPIXmlRpc"&gt;PyPI's XML-RPC methods&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Using scipy.interpolate on Webarchive data&lt;/h3&gt;
&lt;p&gt;I was pointed to the &lt;a href="http://web.archive.org/web/20131025235716/https://pypi.python.org/pypi"&gt;Web Archive&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/learnpython/comments/5trx9z/challenge_when_does_pypi_reach_100k_packages/"&gt;Reddit&lt;/a&gt;. This is how you get snapshots of the PyPI page over time == a set of date points and how many packages there were at each time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m venv venv &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; source venv/bin/activate
$ pip install waybackpack
# take 4 years of data (half a GB, delete when done)
$ waybackpack https://pypi.python.org/pypi -d pypi-snapshots --from-date 20130214 --to-date 20170214
# few days went by, adjusted end date to 20170217 today
#
# prep the data
$ cd pypi-snapshots
# sometimes unix is all you need ;)
$ find . -name &amp;#39;pypi&amp;#39;|xargs grep &amp;quot;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;[0-9][0-9]*&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&amp;quot;| perl -pe &amp;#39;s/.*?(\d+)\/.*&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;(\d+)&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\/strong&amp;gt;/\1:\2/g&amp;#39; &amp;gt; ../data.txt
$ head -2 data.txt
20130214002304:28061
20130216031420:28108
$ tail -2 data.txt
20170215124232:98825
20170216124236:98907
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This data (and all scripts) are on our &lt;a href="https://github.com/pybites/challenges/tree/solutions/06"&gt;solutions branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi_pred_webarchive.ipynb"&gt;this notebook&lt;/a&gt; with the analysis. I used &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline"&gt;scipy.interpolate - UnivariateSpline&lt;/a&gt; to do the extrapolation, I found this &lt;a href="http://stackoverflow.com/questions/2745329/how-to-make-scipy-interpolate-give-an-extrapolated-result-beyond-the-input-range"&gt;here&lt;/a&gt; (Joma's answer).&lt;/p&gt;
&lt;h2&gt;My prediction&lt;/h2&gt;
&lt;p&gt;As you can see from the notebook I am getting: 1st of March 8:37 PM. First of the month, nice date. And consistent with the first method.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the result" src="https://pybit.es/images/pypi100k.png"&gt;&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we return to the Twitter API to do a sentiment analysis! Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Update 9th of March 2016&lt;/h2&gt;
&lt;p&gt;OK so turns out the 1st of March was a bit optimistic, predicting is hard :)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://twitter.com/raymondh/status/836826095026647042"&gt;best / winning solution&lt;/a&gt; with nice Bokeh visuals can be found &lt;a href="https://pypi-package-count.herokuapp.com/"&gt;here&lt;/a&gt;. Although it displays the current date now, it had the right predicted date of the 4th of March before 100K was reached. &lt;/p&gt;
&lt;p&gt;PyBites celebrated closely after hitting this important milestone:&lt;/p&gt;
&lt;script src='//platform.twitter.com/widgets.js'&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official! PyPI has hit 100,000 packages! Woohoo!! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#milestone" target="_blank"&gt;#milestone&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/jqDoWsjfyR" title="https://t.co/jqDoWsjfyR" target="_blank"&gt;https://t.co/jqDoWsjfyR&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838178449999081472" data-datetime="2017-03-05T00:04:49+00:00"&gt;March 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt="printscreen of milestone" src="https://pbs.twimg.com/media/C6HQjnMUwAEjBhK.png"&gt;&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category><category term="scipy"></category><category term="numpy"></category><category term="matplotlib"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction</title><link href="https://pybit.es/codechallenge06.html" rel="alternate"></link><published>2017-02-13T08:40:00+01:00</published><updated>2017-02-13T08:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-13:/codechallenge06.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will make a prediction when PyPI will reach the 100.000 packages milestone.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A milestone right around the corner&lt;/h3&gt;
&lt;p&gt;A new week, more coding! &lt;/p&gt;
&lt;p&gt;We are grabbing this challenge from &lt;a href="https://twitter.com/raymondh/status/829474817082433536"&gt;Raymond Hettinger's tweet&lt;/a&gt; (EAFP):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python data extrapolation contest: Tweet your prediction of the exact date and time(UTC) that http://pypi.python.org  hits 100,000 packages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted answers (tweet replies) were very different which made us curious. As it's a prediction there won't be one right answer of course. We challenge you to find a data set to make your prediction. We are curious what you will come up with ...&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# cp pypi100k-template.py pypi100k.py
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Twitter digest 2017 week 06</title><link href="https://pybit.es/twitter_digest_201706.html" rel="alternate"></link><published>2017-02-11T09:27:00+01:00</published><updated>2017-02-11T09:27:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-11:/twitter_digest_201706.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Build Your First Python and Django Application &lt;a href="https://t.co/3N8FgBn6mZ" title="https://t.co/3N8FgBn6mZ" target="_blank"&gt;https://t.co/3N8FgBn6mZ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830181106326654976" data-datetime="2017-02-10T22:26:14+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Color quantization using k-means  &lt;a href="https://twitter.com/search/#Data" target="_blank"&gt;#Data&lt;/a&gt; Mining &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830180688146157570" data-datetime="2017-02-10T22:24:34+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Excel Tutorial: The Definitive Guide &lt;a href="https://t.co/z7fOQjCABG" title="https://t.co/z7fOQjCABG" target="_blank"&gt;https://t.co/z7fOQjCABG&lt;/a&gt; via &lt;a href="https://twitter.com/@DataCamp" target="_blank"&gt;@DataCamp&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/830180426228625410" data-datetime="2017-02-10T22:23:32+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonWeekly:" target="_blank"&gt;@PythonWeekly:&lt;/a&gt; Python Weekly - Issue 281 &lt;a href="https://t.co/8o10gQwue8" title="https://t.co/8o10gQwue8" target="_blank"&gt;https://t.co/8o10gQwue8&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://twitter.com/search/#flask" target="_blank"&gt;#flask&lt;/a&gt; &lt;a href="https://twitter.com/search/#machinelearning" target="_blank"&gt;#machinelearning&lt;/a&gt; &lt;a href="https://twitter.com/search/#slack" target="_blank"&gt;#slack&lt;/a&gt; &lt;a href="https://twitter.com/search/#tensorflow" target="_blank"&gt;#tensorflow&lt;/a&gt; &lt;a href="https://twitter.com/search/#scipy" target="_blank"&gt;#scipy&lt;/a&gt; &lt;a href="https://twitter.com/search/#matp‚Ä¶" target="_blank"&gt;#matp‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829925695937581056" data-datetime="2017-02-10T05:31:19+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; A Simple Trending Products Recommendation Engi... &lt;a href="https://t.co/kYuz1278Fd" title="https://t.co/kYuz1278Fd" target="_blank"&gt;https://t.co/kYuz1278Fd&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829924850516889600" data-datetime="2017-02-10T05:27:58+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; Google's (comprehensive) code style guide for Python &lt;a href="https://t.co/raPEwHJ0NL" title="https://t.co/raPEwHJ0NL" target="_blank"&gt;https://t.co/raPEwHJ0NL&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829924706903994370" data-datetime="2017-02-10T05:27:24+00:00"&gt;February 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/pw64b7E6m2" title="https://t.co/pw64b7E6m2" target="_blank"&gt;https://t.co/pw64b7E6m2&lt;/a&gt; think python 2nd ed (py3)&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829819539122688002" data-datetime="2017-02-09T22:29:30+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip:  ASCII table
pprint(list(zip(range(32, 127), map(chr, range(32, 127)))))&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829622429647503360" data-datetime="2017-02-09T09:26:15+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Wow! Awesome video. &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; &lt;a href="https://twitter.com/@techmoneykids" target="_blank"&gt;@techmoneykids&lt;/a&gt; check this out &lt;a href="https://t.co/y6xBeoaXoH" title="https://t.co/y6xBeoaXoH" target="_blank"&gt;https://t.co/y6xBeoaXoH&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829622138911019009" data-datetime="2017-02-09T09:25:06+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#98" target="_blank"&gt;#98&lt;/a&gt; Adding concurrency to Django with Django Channels &lt;a href="https://t.co/NHBYmxAS4F" title="https://t.co/NHBYmxAS4F" target="_blank"&gt;https://t.co/NHBYmxAS4F&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829615853989568512" data-datetime="2017-02-09T09:00:07+00:00"&gt;February 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Working with iterables: itertools &amp;amp; more &lt;a href="https://t.co/yPoCfaOItK" title="https://t.co/yPoCfaOItK" target="_blank"&gt;https://t.co/yPoCfaOItK&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829253522822668288" data-datetime="2017-02-08T09:00:21+00:00"&gt;February 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#12" target="_blank"&gt;#12&lt;/a&gt; Expanding your Python mental model and serving millions of requests per second with Python &lt;a href="https://t.co/gssoadNjIG" title="https://t.co/gssoadNjIG" target="_blank"&gt;https://t.co/gssoadNjIG&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829253486713962497" data-datetime="2017-02-08T09:00:12+00:00"&gt;February 08, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Nice article &lt;a href="https://twitter.com/@SuConant" target="_blank"&gt;@SuConant&lt;/a&gt; - bookmarked a couple of courses &lt;a href="https://t.co/gRx0wzCe3P" title="https://t.co/gRx0wzCe3P" target="_blank"&gt;https://t.co/gRx0wzCe3P&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829072065512734720" data-datetime="2017-02-07T20:59:18+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Tricks &lt;a href="https://twitter.com/search/#5:" target="_blank"&gt;#5:&lt;/a&gt; String Conversion in Python (__str__ vs __repr__) &lt;a href="https://t.co/1XoX1Hh75R" title="https://t.co/1XoX1Hh75R" target="_blank"&gt;https://t.co/1XoX1Hh75R&lt;/a&gt; - well explained!&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/829013385547227137" data-datetime="2017-02-07T17:06:08+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Lambda Functions in Python: What Are They Good For? &lt;a href="https://t.co/D9PqD4wxhn" title="https://t.co/D9PqD4wxhn" target="_blank"&gt;https://t.co/D9PqD4wxhn&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/828891098332356613" data-datetime="2017-02-07T09:00:12+00:00"&gt;February 07, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="podcasts"></category><category term="Excel"></category><category term="Django"></category><category term="k-means"></category><category term="iterators"></category><category term="magicmethods"></category><category term="lambda"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters - Review</title><link href="https://pybit.es/codechallenge05_review.html" rel="alternate"></link><published>2017-02-10T23:00:00+01:00</published><updated>2017-02-10T23:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-10:/codechallenge05_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;This week's challenge was really hard. We looked at &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt; to calculate similarity between Twitter users.&lt;/p&gt;
&lt;p&gt;Below what we got. Any feedback welcome. Code is &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we tweaked usertweets.py from last week to download 200 tweets of 15 users and store them as csv files in the data/ subdirectory. Users are mostly Pythonistas, but also some unrelated. We changed the solution a bit: instead of comparing only two users, we rank similarity of one user of the set against all others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We load all tweets per user in with get_user_tokens() and tokenize them with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tokenize_text(words):
    words = [word for word in words if len(word) &amp;gt; 4 and word not in STOPWORDS]
    words = [word for word in words if _is_ascii(word)]
    words = [word for word in words if not IS_LINK_OBJ.search(word)]
    return words
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where IS_LINK_OBJ discards links and mentions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IS_LINK_OBJ = re.compile(r&amp;#39;^(?:@|https?://)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get stopwords from nltk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="n"&gt;STOPWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The underscore methods are helpers. We assigned lambdas to variables, but flake8 complained, so better methods :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we use Gensim to compare a user against the set. This took quite some effort, hopefully our method is correct, the results (see further down) look promosing. We partially used &lt;a href="http://stackoverflow.com/questions/22433884/python-gensim-how-to-calculate-document-similarity-using-the-lda-model"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gensim&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# globbing csv files in data/ or provided with sys.argv[1:]&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LdaModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;id2word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatrixSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_bow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_bow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_lda&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interestingly this model worked kind of ok, but got different results upon running and not much polarity. It turned out that the sample Twitter set (200 tweets per user) was too small, so we created a data/new directory and used &lt;a href="https://gist.github.com/yanofsky/5436496"&gt;yanofsky's awesome tweet_dumper&lt;/a&gt; to get 3200 tweets per user. &lt;/p&gt;
&lt;p&gt;Data set before vs after:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -l *&lt;span class="p"&gt;|&lt;/span&gt;grep total
    &lt;span class="m"&gt;3618&lt;/span&gt; total
$ wc -l new/*&lt;span class="p"&gt;|&lt;/span&gt;grep total
   &lt;span class="m"&gt;45573&lt;/span&gt; total
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This did not make sense due to small data set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py Pybonacci
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.999743 -&amp;gt; nothing to &lt;span class="k"&gt;do&lt;/span&gt; yet almost &lt;span class="m"&gt;1&lt;/span&gt;.0 ?!
github &lt;span class="m"&gt;0&lt;/span&gt;.999743
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.455312
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new data set, although the script takes longer to run, now the results are much better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# not much Python: 
$ python similar_tweeters.py paugasol
jsonmez 0.739746
Schwarzenegger 0.739746
tferriss 0.739746
cine_tv_es 0.631373
gvanrossum 0.631373
treyhunner 0.631373
bbelderbos 0.206394
dbader_org 0.206394
newsafaribooks 0.206394
techmoneykids 0.113994
github 0.0983753
lifehacker 0.0983753
pybites 0.056072
importpython 0.0432182
PythonEggs 0.0432182
raymondh 0.0432182

# more Py
$ python similar_tweeters.py pybites
dbader_org 0.936956
importpython 0.936956
PythonEggs 0.936956
tferriss 0.936956 -&amp;gt; not sure about this one
bbelderbos 0.367078
techmoneykids 0.340996
github 0.320053
newsafaribooks 0.320053
gvanrossum 0.138829
jsonmez 0.138829
lifehacker 0.138829
Schwarzenegger 0.138829
treyhunner 0.138829
raymondh 0.0201458
cine_tv_es 0.0
paugasol 0.0

# results change upon second run - comment if you know why / how to fix or improve?
$ python similar_tweeters.py pybites
importpython 0.890289
newsafaribooks 0.890289
PythonEggs 0.890289
bbelderbos 0.506814
techmoneykids 0.443702
jsonmez 0.426503
paugasol 0.426503
Schwarzenegger 0.426503
tferriss 0.426503
github 0.138233
gvanrossum 0.138233
treyhunner 0.138233
dbader_org 0.100782 -&amp;gt; was high last run ?!
lifehacker 0.0658598
raymondh 0.0658598
cine_tv_es 0.0451122
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running one more, my personal Twitter. Also a lot of Python at the top, jsonmez/ tferriss/ pybites I have mentioned/retweeted more than once. This looks pretty good ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py bbelderbos
dbader_org &lt;span class="m"&gt;0&lt;/span&gt;.985021
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.985021
importpython &lt;span class="m"&gt;0&lt;/span&gt;.985021
jsonmez &lt;span class="m"&gt;0&lt;/span&gt;.985021
pybites &lt;span class="m"&gt;0&lt;/span&gt;.985021
PythonEggs &lt;span class="m"&gt;0&lt;/span&gt;.985021
tferriss &lt;span class="m"&gt;0&lt;/span&gt;.985021
treyhunner &lt;span class="m"&gt;0&lt;/span&gt;.985021
techmoneykids &lt;span class="m"&gt;0&lt;/span&gt;.275167
newsafaribooks &lt;span class="m"&gt;0&lt;/span&gt;.149423
paugasol &lt;span class="m"&gt;0&lt;/span&gt;.149423
Schwarzenegger &lt;span class="m"&gt;0&lt;/span&gt;.149423
raymondh &lt;span class="m"&gt;0&lt;/span&gt;.142598
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.064402
github &lt;span class="m"&gt;0&lt;/span&gt;.064402
lifehacker &lt;span class="m"&gt;0&lt;/span&gt;.0570781
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was not an easy challenge! However we learned a lot: our first NLP exploration, playing with a relatively complex library and discovering the data science part of it: the quality of your input data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we pause a bit from Twitter doing something new and original on Monday, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="nlp"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="gensim"></category><category term="nltk"></category></entry><entry><title>From beginner to pro: Python books, videos and resources</title><link href="https://pybit.es/python-resources.html" rel="alternate"></link><published>2017-02-07T06:00:00+01:00</published><updated>2017-02-07T06:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-07:/python-resources.html</id><summary type="html">&lt;p&gt;A list of useful Python resources to boost up your skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article a list of useful Python resources to boost up your skills. It goes without saying that the best way to get better in Python is to read and write a lot of code. However these resources can definitely help fill in the knowledge gaps.&lt;/p&gt;
&lt;h2&gt;To get started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/"&gt;The Python Tutorial&lt;/a&gt;: official, quick-start tour to the language, introduces the standard library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lVnTJP"&gt;Head first Python, 2nd ed&lt;/a&gt;: detailed explanation of the language, lot of practical examples and as head first provides a lot of visual aid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jessica McKellar's &lt;a href="http://shop.oreilly.com/product/110000448.do"&gt;Introduction to Python&lt;/a&gt; and &lt;a href="http://shop.oreilly.com/product/0636920049852.do"&gt;Intermediate Python Programming&lt;/a&gt; are awesome. I recommended these videos to a new Pythonista at work and he already thanked me: clear, concise, fun and practical examples, for him the concepts really started to make sense watching these videos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Kennedy has &lt;a href="https://training.talkpython.fm/"&gt;a growing set of awesome trainings&lt;/a&gt;: &lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt; teaches you a lot of Python features and more importantly how to write Pythonic code. See &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;our review&lt;/a&gt;, for us it's kind of the manual we wish we'd had when we started! To learn by building cool projects, check out his &lt;a href="https://training.talkpython.fm/courses/explore_python_jumpstart/python-language-jumpstart-building-10-apps"&gt;Python Jumpstart by Building 10 Apps&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.diveintopython3.net/"&gt;Dive into Python&lt;/a&gt;: this is another excellent introduction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn by practical projects, take a look at &lt;a href="http://amzn.to/2lxrPiK"&gt;Automate the boring stuff&lt;/a&gt; which we reviewed &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;, the author also has &lt;a href="https://inventwithpython.com/"&gt;a free tutorial on games&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lV8rgL"&gt;Learn Python the Hard Way&lt;/a&gt; takes another approach by having your hands at the keyboard, working through progressively more difficult code examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fundamentals done, get better&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/"&gt;The Hitchhiker's guide to Python&lt;/a&gt;: this is a great work, it teaches Python best practices, comunnity tools, and is quite unique in that it teaches by looking at the source code of top-notch open source projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsmBg"&gt;Fluent Python&lt;/a&gt;: on to become a classic. This is one of the best Python books out there. This gem has so much knowledge, best practices, and deep understanding of Python embedded. I read it last summer (somebody at PyData recommended it to me) and it is THE book that got me to the next level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxsIba"&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;: I like the effective series for its recipe format. Very knowledgeable author, this book teaches you how to write Pythonic code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://amzn.to/2lxxiq1"&gt;Core Python Applications Programming&lt;/a&gt;: teaches concepts through real-world applications. Lot of code, covers a lot: Google App Engine, APIs, Database / web programming, even MS office programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thehackerguidetopython.com/"&gt;The hacker's guide to Python&lt;/a&gt;: I bought this ebook last week after being impressed reading the free functional programming chapter, not done yet, but already found some great insights, not easily found in other resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://powerfulpython.com/"&gt;Powerful Python&lt;/a&gt;: good tutorial on advanced concepts like decorators, OOP design patterns, automated testing. The accompanying video shows you how to make a RESTful API using TDD, very interesting / useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two Packt books that I read parts of and explain more advanced topics very well: &lt;a href="http://amzn.to/2lVphMx"&gt;Mastering Python&lt;/a&gt; and &lt;a href="http://amzn.to/2lxLQ91"&gt;Expert Python Programming, 2nd ed&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For reference works check out &lt;a href="http://amzn.to/2lxIB18"&gt;Python cookbook&lt;/a&gt; and &lt;a href="http://amzn.to/2mcgKHs"&gt;Python in a nutshell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you learn better by video checkout &lt;a href="http://pyvideo.org/"&gt;PyVideo&lt;/a&gt;, I also found it very useful to watch PyCon talks, see &lt;a href="https://www.youtube.com/channel/UCwTD5zJbsQGJN75MwbykYNw"&gt;this PyCon 2016 playlist&lt;/a&gt; for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://dbader.org/"&gt;Dan Bader's blog&lt;/a&gt;, his new book: &lt;a href="https://dbader.org/products/python-tricks-book/"&gt;Python tricks&lt;/a&gt; reviewed &lt;a href="http://pybit.es/pytricks-review.html"&gt;here&lt;/a&gt;. He also made a useful &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;list of Python podcasts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the subject of podcasts, Michael Kennedy's &lt;a href="https://talkpython.fm"&gt;Talk Python To Me&lt;/a&gt; is a must-listen for any Python developer. For headlines tune into &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes&lt;/a&gt;, a nice weekly digest of Python news.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing is important, and Python has great coverage: unittest, pytest, nose, doctest ... get started &lt;a href="http://pythontesting.net/start-here/"&gt;here&lt;/a&gt; or listen to Brian Okken's &lt;a href="http://testandcode.com"&gt;Test and Code podcast&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For an understanding of algorithms I recommend &lt;a href="http://amzn.to/2lxGLNP"&gt;Grokking algorithms&lt;/a&gt; we detailed &lt;a href="http://pybit.es/grokking_algorithms.html"&gt;here&lt;/a&gt;. Another resource is &lt;a href="http://interactivepython.org/runestone/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to learn Flask and Django, and Python web development and database programming in general, check out &lt;a href="https://realpython.com"&gt;Real Python's great courses&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://awesome-python.com/"&gt;Awesome Python&lt;/a&gt; - a curated list of awesome Python frameworks, libraries, software and resources (discussed &lt;a href="http://pybit.es/awesome_python_resources.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru"&gt;Python progression path - From apprentice to guru SO thread&lt;/a&gt; contains some useful advice as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guido's &lt;a href="http://neopythonic.blogspot.com.es/2016/04/kings-day-speech.html"&gt;King's Day Speech&lt;/a&gt; as well as &lt;a href="https://www.python.org/doc/essays/"&gt;his essays&lt;/a&gt; (I read &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;one about optimization&lt;/a&gt; today, awesome!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lists from other Pythonistas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The mentioned Hitchhiker's guide has &lt;a href="http://docs.python-guide.org/en/latest/intro/learning/"&gt;a good resources list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full Stack Python's &lt;a href="https://www.fullstackpython.com/best-python-resources.html"&gt;Best Python Resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pixelmonkey's article: &lt;a href="http://www.pixelmonkey.org/2015/06/06/pybooks"&gt;The 3 Best Python Books for Your Team&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pff ...&lt;/h2&gt;
&lt;p&gt;I know what you are saying, and I had the same feeling writing this article: there are just too many resources. Again, writing code is the best way to get better so the best advice I can give you is to pick up one of the resources, read some, start coding. Read some more, try new things you learn in your code. Repeat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;code some more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this list is useful. Feel free to use the comments below to share other resources that made you a better Python programmer.&lt;/p&gt;
&lt;h2&gt;Update: additions after Reddit&lt;/h2&gt;
&lt;p&gt;Wow amazed at the amount of upvotes / comments &lt;a href="https://redd.it/5sjt3l"&gt;on Reddit&lt;/a&gt;, thanks for your support. I am adding some suggestions made in the commens: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Youtube channel: &lt;a href="https://www.youtube.com/user/sentdex"&gt;sentdex&lt;/a&gt;, lot of good Python learning, Django was specially mentioned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Data Science I heard good things about &lt;a href="http://amzn.to/2lVnp6j"&gt;Python Data Science Handbook&lt;/a&gt; which shares all Jupyter notebooks freely &lt;a href="https://github.com/jakevdp/PythonDataScienceHandbook"&gt;here&lt;/a&gt;. See also &lt;a href="https://redd.it/5som5b"&gt;this new thread&lt;/a&gt; with cheat sheets for Python for data science.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I replied another question about web scraping &lt;a href="https://www.reddit.com/r/learnpython/comments/5sjt3l/from_beginner_to_pro_python_books_videos_and/ddh6ski/"&gt;with some resources&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9"&gt;MIT intro computer science&lt;/a&gt; was labeled as very tough for a beginner. I read some of &lt;a href="http://greenteapress.com/wp/"&gt;Allen Downey's work&lt;/a&gt; sometime ago which I liked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="python"></category><category term="resources"></category><category term="books"></category><category term="videos"></category><category term="reference"></category><category term="tricks"></category><category term="tools"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters</title><link href="https://pybit.es/codechallenge05.html" rel="alternate"></link><published>2017-02-06T00:01:00+01:00</published><updated>2017-02-06T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-06:/codechallenge05.html</id><summary type="html">&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Birds of a feather&lt;/h3&gt;
&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;
&lt;h3&gt;Challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a script that receives two command line args: user1 and user2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ similar_tweeters.py bbelderbos pybites
&lt;span class="c1"&gt;# ... some index of similarity ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the last n tweets of these users. You can use the code of &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokenize the words in the tweets, filtering out stop words, URLs, digits, punctuation, words that only occur once or are less than 3 characters (and/or other noise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the main subjects the users tweet about. You could use &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt;, an NLP package for Topic Modeling. However feel free to take your own approach! We are dropping the helper template and external libs (requirements.txt) for this challenge, we'd love to see different approaches to this problem ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the subjects and come up with a similarity score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stay in sync with PyBites challenges repo&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# ... no helper template for this challenge ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing our and your solutions on Friday.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="twitterapi"></category><category term="Twitter"></category><category term="NLP"></category><category term="similarity"></category><category term="Gensim"></category></entry><entry><title>Twitter digest 2017 week 05</title><link href="https://pybit.es/twitter_digest_201705.html" rel="alternate"></link><published>2017-02-04T09:27:00+01:00</published><updated>2017-02-04T09:27:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-04:/twitter_digest_201705.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;python tricks: &lt;a href="https://t.co/MTei4wkOqe" title="https://t.co/MTei4wkOqe" target="_blank"&gt;https://t.co/MTei4wkOqe&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827796656036909056" data-datetime="2017-02-04T08:31:17+00:00"&gt;February 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#97" target="_blank"&gt;#97&lt;/a&gt; Flask, Django style with Flask-Diamond &lt;a href="https://t.co/ggqrD2zPIT" title="https://t.co/ggqrD2zPIT" target="_blank"&gt;https://t.co/ggqrD2zPIT&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827441533188136960" data-datetime="2017-02-03T09:00:09+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Python Top 10 Articles for the Past Year (v.2017) &lt;a href="https://t.co/KWStlTrCTw" title="https://t.co/KWStlTrCTw" target="_blank"&gt;https://t.co/KWStlTrCTw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827419783717064705" data-datetime="2017-02-03T07:33:43+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsycombinator:" target="_blank"&gt;@newsycombinator:&lt;/a&gt; Use vim as a python IDE &lt;a href="https://t.co/P57qWan5OA" title="https://t.co/P57qWan5OA" target="_blank"&gt;https://t.co/P57qWan5OA&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827418975147528192" data-datetime="2017-02-03T07:30:31+00:00"&gt;February 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Python Weekly - Issue 280 - &lt;a href="https://t.co/8MTwN2DKTV" title="https://t.co/8MTwN2DKTV" target="_blank"&gt;https://t.co/8MTwN2DKTV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827295878050414592" data-datetime="2017-02-02T23:21:22+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Working over ssh in Python &lt;a href="https://t.co/KExmjsxVlr" title="https://t.co/KExmjsxVlr" target="_blank"&gt;https://t.co/KExmjsxVlr&lt;/a&gt; &lt;a href="https://twitter.com/search/#ssh" target="_blank"&gt;#ssh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827285656850223110" data-datetime="2017-02-02T22:40:45+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PyConES:" target="_blank"&gt;@PyConES:&lt;/a&gt; ¬°Y la &lt;a href="https://twitter.com/search/#PyConES17" target="_blank"&gt;#PyConES17&lt;/a&gt; ser√° en C√°ceres del 22 al 24 de septiembre!

&lt;a href="https://t.co/rmOKBzqTLs" title="https://t.co/rmOKBzqTLs" target="_blank"&gt;https://t.co/rmOKBzqTLs&lt;/a&gt; &lt;a href="https://t.co/MtLefWCKPN" title="https://t.co/MtLefWCKPN" target="_blank"&gt;https://t.co/MtLefWCKPN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827053699432333312" data-datetime="2017-02-02T07:19:02+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;impressed by the free chapter on functional programming of The Hacker's Guide to &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; by &lt;a href="https://twitter.com/@juldanjou" target="_blank"&gt;@juldanjou&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/827053135201959936" data-datetime="2017-02-02T07:16:47+00:00"&gt;February 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@github:" target="_blank"&gt;@github:&lt;/a&gt; A new way to discover and connect GitHub repositories. &lt;a href="https://t.co/JVJCj8JzeV" title="https://t.co/JVJCj8JzeV" target="_blank"&gt;https://t.co/JVJCj8JzeV&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826802837581611011" data-datetime="2017-02-01T14:42:12+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dabeaz:" target="_blank"&gt;@dabeaz:&lt;/a&gt; Now that Anaconda is on Python 3.6, I'm thinking about going all in on f-strings.  See ya later Python 3.5. It's been fun.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826800885896474624" data-datetime="2017-02-01T14:34:27+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; The five-minute guide to setting up a &lt;a href="https://twitter.com/search/#Jupyter" target="_blank"&gt;#Jupyter&lt;/a&gt; notebook server &lt;a href="https://t.co/i1D5I7eU3h" title="https://t.co/i1D5I7eU3h" target="_blank"&gt;https://t.co/i1D5I7eU3h&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/U4hnsM7GgQ" title="https://t.co/U4hnsM7GgQ" target="_blank"&gt;https://t.co/U4hnsM7GgQ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826800066384031744" data-datetime="2017-02-01T14:31:11+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#11" target="_blank"&gt;#11&lt;/a&gt; Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation &lt;a href="https://t.co/ivbetn0zxD" title="https://t.co/ivbetn0zxD" target="_blank"&gt;https://t.co/ivbetn0zxD&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826716778638172163" data-datetime="2017-02-01T09:00:14+00:00"&gt;February 01, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@bbelderbos:" target="_blank"&gt;@bbelderbos:&lt;/a&gt; New article: Pybit.es - our new &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; blog &lt;a href="https://t.co/3MCzu7GTEF" title="https://t.co/3MCzu7GTEF" target="_blank"&gt;https://t.co/3MCzu7GTEF&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826494975282130949" data-datetime="2017-01-31T18:18:52+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dbader_org:" target="_blank"&gt;@dbader_org:&lt;/a&gt; .&lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; reviewed my Python Tricks book. Did they like it? Click here to find out: &lt;a href="https://t.co/CBBeZinksb" title="https://t.co/CBBeZinksb" target="_blank"&gt;https://t.co/CBBeZinksb&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826457033369071616" data-datetime="2017-01-31T15:48:06+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Why Learn Python? Here Are 8 Data-Driven Reasons &lt;a href="https://t.co/a1M0ztYp4L" title="https://t.co/a1M0ztYp4L" target="_blank"&gt;https://t.co/a1M0ztYp4L&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/826354403640610816" data-datetime="2017-01-31T09:00:17+00:00"&gt;January 31, 2017&lt;/a&gt;&lt;/blockquote&gt;</content><category term="twitter"></category><category term="news"></category><category term="Jupyter"></category><category term="Flask"></category><category term="Django"></category><category term="vim"></category><category term="PyCon"></category><category term="HackersGuide"></category><category term="f-string"></category><category term="Github"></category><category term="learnpython"></category><category term="tricks"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data - Review</title><link href="https://pybit.es/codechallenge04_review.html" rel="alternate"></link><published>2017-02-03T17:00:00+01:00</published><updated>2017-02-03T17:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-03:/codechallenge04_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;here&lt;/a&gt; and detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stdlib imports, pip install tweepy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we generated our keys through the Twitter API and put them in config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define some constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEST_DIR = &amp;#39;data&amp;#39;
EXT = &amp;#39;csv&amp;#39;
NUM_TWEETS = 100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we build a tweepy api object. First we had this in the constructor (init), but second thought we set it up as a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
API = tweepy.API(auth)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we use a namedtuple to define Tweet: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tweet = namedtuple(&amp;#39;Tweet&amp;#39;, &amp;#39;id_str created_at text&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are awesome for simple classes to store data without behaviour!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define the class, Python3 best practice is to explicitly inherit from object: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the constructor gets the handle and an optional max_id, latter is to get a fixed set of tweets which we used in test_usertweets.py: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __init__(self, handle, max_id=None):
        self.handle = handle
        self.max_id = max_id
        self.output_file = &amp;#39;{}.{}&amp;#39;.format(os.path.join(DEST_DIR, self.handle), EXT)
        self._tweets = list(self._get_tweets())
        self._save_tweets()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we get the tweets with the _get_tweets() helper. It returns a generator of Tweet namedtuple objects containing only the get id_str, created_at and text attributes (you get a lot more returned from the Twitter API!): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _get_tweets(self):
        tweets = API.user_timeline(self.handle, count=NUM_TWEETS, max_id=self.max_id)
        return (Tweet(s.id_str, s.created_at, s.text.replace(&amp;#39;\n&amp;#39;, &amp;#39;&amp;#39;)) for s in tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the helper _save_tweets saves tweets to a CSV file. We choose to do it in the constructor, but you can of course take the underscore (_) out and call it explicitly: obj.save_tweets():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _save_tweets(self):
        with open(self.output_file, &amp;#39;w&amp;#39;) as f:
            writer = csv.writer(f)
            writer.writerow(Tweet._fields)
            writer.writerows(self._tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementing len and getitem lets you iterate over the tweets (see our &lt;a href="http://pybit.es/python-data-model.html"&gt;data model post&lt;/a&gt;) as done in the for loop under __main__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __len__(self):
        return len(self._tweets)

    def __getitem__(self, pos):
        return self._tweets[pos]

if __name__ == &amp;quot;__main__&amp;quot;:

    for handle in (&amp;#39;pybites&amp;#39;, &amp;#39;techmoneykids&amp;#39;, &amp;#39;bbelderbos&amp;#39;):
        print(&amp;#39;--- {} ---&amp;#39;.format(handle))
        user = UserTweets(handle)
        for tw in user[:5]:
            print(tw)
        print()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: twitter data changes and you don't want to call the API (slows tests down, unittests should be fast), need to look at mock ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we use this pre-work to load in tweets of various Twitter users and determine who are most similar using NLP techniques. See you on Monday ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tweets"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="oop"></category><category term="datamodel"></category><category term="csv"></category><category term="namedtuples"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data</title><link href="https://pybit.es/codechallenge04.html" rel="alternate"></link><published>2017-01-30T00:01:00+01:00</published><updated>2017-01-30T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-30:/codechallenge04.html</id><summary type="html">&lt;p&gt;A new week, a new code challenge! In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Write a class to retrieve tweets from the Twitter API&lt;/h3&gt;
&lt;p&gt;In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;
&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup virtual environment and install requirements&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;04&lt;/span&gt;
$ python3 -m venv venv
&lt;span class="c1"&gt;# = py3 (might need virtualenv for py2 env)&lt;/span&gt;

$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate 
&lt;span class="c1"&gt;# install tweepy (and its depencencies)&lt;/span&gt;
$ pip install -r requirements.txt

&lt;span class="c1"&gt;# if you want to use another package like twython, feel free to do so&lt;/span&gt;

&lt;span class="c1"&gt;# get your API keys from Twitter - https://apps.twitter.com &lt;/span&gt;
$ cp config-template.py config.py
&lt;span class="c1"&gt;# paste the keys in config.py&lt;/span&gt;

&lt;span class="c1"&gt;# choose a template&lt;/span&gt;
$ cp usertweets-help.py usertweets.py
&lt;span class="c1"&gt;# or &lt;/span&gt;
$ cp usertweets-nohelp.py usertweets.py
&lt;span class="c1"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Define a class called UserTweets that takes a Twitter handle / user in its constructor. it also receives an optional max_id parameter to start from a particular tweet id. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a tweepy API object using the tokens imported from config.py (again, you can use another package if you prefer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable to hold the last 100 tweets of the user. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement len() and getitem() magic (dunder) methods to make the UserTweets object iterable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the generated data as CSV in the data subdirectory: data/some_handle.csv, columns: id_str,created_at,text&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We posted two articles this week you might find useful in this context: &lt;a href="http://pybit.es/oop-primer.html"&gt;oop primer&lt;/a&gt; and &lt;a href="http://pybit.es/python-data-model.html"&gt;Python's data model&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you decide to use Tweepy, you might want to check its &lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html"&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;For developers that like to work towards tests we included test_usertweets.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example output&lt;/h3&gt;
&lt;p&gt;We used a namedtuple here, this is not required. Also note the tweets can differ, yet in the unittests we test a fix set (using the optional max_id parameter in the constructor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;usertweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;825629570992726017&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter digest 2017 week 04 https://t.co/L3njBuBats #python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lrth&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;bbelderb&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;    &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="mi"&gt;825629570992726017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;L3njBuBats&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;span class="mi"&gt;825267189162733569&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Challenge&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xvcLQBbvup&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="twitterapi"></category><category term="tweets"></category><category term="Twitter"></category><category term="oop"></category><category term="datamodel"></category><category term="magicmethods"></category></entry><entry><title>Twitter digest 2017 week 04</title><link href="https://pybit.es/twitter_digest_201704.html" rel="alternate"></link><published>2017-01-28T09:10:00+01:00</published><updated>2017-01-28T09:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-28:/twitter_digest_201704.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;‚ÄúUnderstanding the underscore( _ ) of Python‚Äù by &lt;a href="https://twitter.com/@mingrammer" target="_blank"&gt;@mingrammer&lt;/a&gt; &lt;a href="https://t.co/zgiSGBPd3s" title="https://t.co/zgiSGBPd3s" target="_blank"&gt;https://t.co/zgiSGBPd3s&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825246821085802496" data-datetime="2017-01-28T07:39:09+00:00"&gt;January 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;why you should (tech) blog: a. meet and learn from other developers, b. share knowledge with the wider community, c. refer back to own notes&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825098194254184448" data-datetime="2017-01-27T21:48:33+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@importpython:" target="_blank"&gt;@importpython:&lt;/a&gt; Python Asynchronous I/O Walkthrough &lt;a href="https://t.co/6tIfGuli4t" title="https://t.co/6tIfGuli4t" target="_blank"&gt;https://t.co/6tIfGuli4t&lt;/a&gt; &lt;a href="https://twitter.com/search/#asyncio" target="_blank"&gt;#asyncio&lt;/a&gt; &lt;a href="https://twitter.com/search/#video" target="_blank"&gt;#video&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#book" target="_blank"&gt;#book&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825090537959149568" data-datetime="2017-01-27T21:18:08+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@onyxfish:" target="_blank"&gt;@onyxfish:&lt;/a&gt; pipenv is just lovely. It's going to make teaching best practices to new Python coders so much easier. &lt;a href="https://t.co/wHtWgyuv5‚Ä¶" title="https://t.co/wHtWgyuv5‚Ä¶" target="_blank"&gt;https://t.co/wHtWgyuv5‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/825090382576889860" data-datetime="2017-01-27T21:17:31+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@tiferet:" target="_blank"&gt;@tiferet:&lt;/a&gt; I love &lt;a href="https://twitter.com/search/#python." target="_blank"&gt;#python.&lt;/a&gt; I just think something at it and it turns out to be legit code.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824900745656807424" data-datetime="2017-01-27T08:43:58+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RedditPython:" target="_blank"&gt;@RedditPython:&lt;/a&gt; For anyone learning Python for data science, this an amazing resource--excellent book as free Jupyter notebooks &lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824900665608507393" data-datetime="2017-01-27T08:43:39+00:00"&gt;January 27, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsycombinator:" target="_blank"&gt;@newsycombinator:&lt;/a&gt; Linus Torvalds describes a good commit message &lt;a href="https://t.co/YkPhMnAumb" title="https://t.co/YkPhMnAumb" target="_blank"&gt;https://t.co/YkPhMnAumb&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824704323548545028" data-datetime="2017-01-26T19:43:27+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#96" target="_blank"&gt;#96&lt;/a&gt; Exploring Awesome Python &lt;a href="https://t.co/iYz6nWnHRp" title="https://t.co/iYz6nWnHRp" target="_blank"&gt;https://t.co/iYz6nWnHRp&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824542432301715456" data-datetime="2017-01-26T09:00:09+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Python Bytes Podcast - Episode 10: Python Headlines delivered directly to your earbuds &lt;a href="https://t.co/YtMghHsVTG" title="https://t.co/YtMghHsVTG" target="_blank"&gt;https://t.co/YtMghHsVTG&lt;/a&gt; via &lt;a href="https://twitter.com/@brianokke‚Ä¶" target="_blank"&gt;@brianokke‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824525211194314752" data-datetime="2017-01-26T07:51:43+00:00"&gt;January 26, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; The 4 Major Ways to Do String Formatting in Python (discussion) &amp;gt;&amp;gt; &lt;a href="https://t.co/hDrUHKPcTt" title="https://t.co/hDrUHKPcTt" target="_blank"&gt;https://t.co/hDrUHKPcTt&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#learnpython" target="_blank"&gt;#learnpython&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824291275373481984" data-datetime="2017-01-25T16:22:09+00:00"&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Awesome: pelican-ipynb - Pelican plugin for blogging with &lt;a href="https://twitter.com/search/#jupyter" target="_blank"&gt;#jupyter&lt;/a&gt; / IPython Notebooks&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/824247744361627649" data-datetime="2017-01-25T13:29:10+00:00"&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;great course: Python Beyond The Basics - Object Oriented Programming &lt;a href="https://t.co/Fhapwpz7pZ" title="https://t.co/Fhapwpz7pZ" target="_blank"&gt;https://t.co/Fhapwpz7pZ&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823640943421259776" data-datetime="2017-01-23T21:17:58+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@RealPython:" target="_blank"&gt;@RealPython:&lt;/a&gt; VIM and Python - a match made in heaven &amp;gt;&amp;gt; &lt;a href="https://t.co/2wfQobNhwx" title="https://t.co/2wfQobNhwx" target="_blank"&gt;https://t.co/2wfQobNhwx&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#vim" target="_blank"&gt;#vim&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823593679587864576" data-datetime="2017-01-23T18:10:09+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@analyticbridge:" target="_blank"&gt;@analyticbridge:&lt;/a&gt; 12 Algorithms Every Data Scientist Should Know? 
&lt;a href="https://t.co/uwcDZygLqS" title="https://t.co/uwcDZygLqS" target="_blank"&gt;https://t.co/uwcDZygLqS&lt;/a&gt; &lt;a href="https://t.co/LKDORi9LGt" title="https://t.co/LKDORi9LGt" target="_blank"&gt;https://t.co/LKDORi9LGt&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823593277702205440" data-datetime="2017-01-23T18:08:33+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;true, this book is awesome for developers wanting to advance in their career, recommended it to a co-worker today :‚Ä¶ &lt;a href="https://t.co/9tW8m3oEYU" title="https://t.co/9tW8m3oEYU" target="_blank"&gt;https://t.co/9tW8m3oEYU&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/823592641115918336" data-datetime="2017-01-23T18:06:01+00:00"&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Roll your own&lt;/h2&gt;
&lt;p&gt;We created this list with &lt;a href="http://projects.bobbelderbos.com/tweetdigest/"&gt;Tweet Digest&lt;/a&gt;.&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="asyncio"></category><category term="pipenv"></category><category term="pelican"></category><category term="jupyter"></category><category term="oop"></category><category term="vim"></category><category term="algorithms"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis - Review</title><link href="https://pybit.es/codechallenge03_review.html" rel="alternate"></link><published>2017-01-27T09:00:00+01:00</published><updated>2017-01-27T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-27:/codechallenge03_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/03/tags.py"&gt;here&lt;/a&gt; and commented below.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We use the stdlib to its fullest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define constants at the top. We use maketrans to easily extend replacing multiple characters in the future:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPLACE_CHARS = str.maketrans(&amp;#39;-&amp;#39;, &amp;#39; &amp;#39;)
IDENTICAL = 1.0
TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used a regular expression to show that you can. A better way would be to use a PyPI package like feedparser or BeautifulSoup (see further down). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TAG_HTML = re.compile(r&amp;#39;&lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;([^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+)&lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&amp;#39;)

def get_tags():
    &amp;quot;&amp;quot;&amp;quot;Find all tags (TAG_HTML) in RSS_FEED.
    Replace dash with whitespace (REPLACE_CHARS)&amp;quot;&amp;quot;&amp;quot;
    with open(RSS_FEED) as f:
        tags = TAG_HTML.findall(f.read().lower())
    return [tag.translate(REPLACE_CHARS) for tag in tags]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For everything counting related you really want to use collections.Counter and its most_common method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_top_tags(tags):
    &amp;quot;&amp;quot;&amp;quot;Get the TOP_NUMBER of most common tags&amp;quot;&amp;quot;&amp;quot;
    return Counter(tags).most_common(TOP_NUMBER)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For similarities we were going to read up on &lt;a href="http://www.nltk.org/"&gt;NLTK&lt;/a&gt; but stdlib has difflib.SequenceMatcher which makes this very easy (found &lt;a href="http://stackoverflow.com/questions/17388213/find-the-similarity-percent-between-two-strings"&gt;on Stackoverflow&lt;/a&gt;). We gained quite some performance first matching the first char between tags, but this assumes the first char is always the same. If you don't want that, take that check out. We use itertools.product instead of a double for loop. Lastly yield makes get_similarities a generator which we find more Pythonic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    &amp;quot;&amp;quot;&amp;quot;Find set of tags pairs with similarity ratio of &amp;gt; SIMILAR&amp;quot;&amp;quot;&amp;quot;
    for pair in product(tags, tags):
        # performance enhancements 1.992s -&amp;gt; 0.144s
        if pair[0][0] != pair[1][0]:
            continue
        pair = tuple(sorted(pair))  # set needs hashable type
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The calling code was given, printing it here for completeness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    tags = get_tags()
    top_tags = get_top_tags(tags)
    print(&amp;#39;* Top {} tags:&amp;#39;.format(TOP_NUMBER))
    for tag, count in top_tags:
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(tag, count))
    similar_tags = dict(get_similarities(tags))
    print()
    print(&amp;#39;* Similar tags:&amp;#39;)
    for singular, plural in similar_tags.items():
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(singular, plural))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests pass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout solutions
$ python test_tags.py 
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.153s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Code challenges != Python's 'preferably only one way'&lt;/h2&gt;
&lt;p&gt;We know '&amp;gt;&amp;gt;&amp;gt; import this' says: "There should be one-- and preferably only one --obvious way to do it." and usually there is. Yet for our challenges we encourage people to be creative and not stick to the template + tests per se (we improve the code challenge format as we learn ...). &lt;/p&gt;
&lt;p&gt;For example Jeffrey parses our feed directly in &lt;a href="https://gist.github.com/jrjames83/eeda4324116dde12ea8d45c47a151ab0"&gt;his solution&lt;/a&gt; with requests and BeautifulSoup not stripping off the dash. This is great addition to our solution, using PyPI whenever you can is recommended. Also by parsing the live feed he created us a tool to run this check every now and then (thanks Jeffrey). We like to see different solutions.&lt;/p&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a fresh new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tags"></category><category term="similarity"></category><category term="blog"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis</title><link href="https://pybit.es/codechallenge03.html" rel="alternate"></link><published>2017-01-23T00:01:00+01:00</published><updated>2017-01-23T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-23:/codechallenge03.html</id><summary type="html">&lt;p&gt;Our new code challenge is up: PyBites blog tag analysis. This week you will parse our RSS feed looking for the most common tags and the ones we possibly should merge based on similarity ratio. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given our RSS feed what tags does PyBites mostly use and which tags should be merged (based on similarity)?&lt;/h3&gt;
&lt;p&gt;Example output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python tags.py

* Top &lt;span class="m"&gt;10&lt;/span&gt; tags:
python               &lt;span class="m"&gt;10&lt;/span&gt;
learning             &lt;span class="m"&gt;7&lt;/span&gt;
tips                 &lt;span class="m"&gt;6&lt;/span&gt;
tricks               &lt;span class="m"&gt;5&lt;/span&gt;
github               &lt;span class="m"&gt;5&lt;/span&gt;
cleancode            &lt;span class="m"&gt;5&lt;/span&gt;
best practices       &lt;span class="m"&gt;5&lt;/span&gt;
pythonic             &lt;span class="m"&gt;4&lt;/span&gt;
collections          &lt;span class="m"&gt;4&lt;/span&gt;
beginners            &lt;span class="m"&gt;4&lt;/span&gt;

* Similar tags:
game                 games
challenge            challenges
generator            generators
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;03&lt;/span&gt;
$ cp tags-help.py tags.py
&lt;span class="c1"&gt;# or:&lt;/span&gt;
$ cp tags-nohelp.py tags.py
&lt;span class="c1"&gt;#¬†code&lt;/span&gt;

&lt;span class="c1"&gt;# run the unittests (optional)&lt;/span&gt;
$ python test_tags.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.155s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we update our blog regularly we provided a recent copy of our feed in the 03 directory: rss.xml. We also provided a copy of tags.html for verification (used by unittests in test_tags.py).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both templates provide 3 constants you should use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rest is documented in the methods docstrings. Again use tags-help.py if you need more guidance, tags-nohelp.py is for the more experienced and/or if you want more freedom. Same goes for tests: use them if you need them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talking about freedom feel free to use our &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;live feed&lt;/a&gt; but then the tests will probably break.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hint: for word similarity feel free to use NLTK, or your favorite language processing tool. However, stdlib does provide a nice way to do this. Using this method we came to 0.87 as a threshold to for example not mark 'python' and 'pythonic' as similar. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="tags"></category><category term="Counter"></category><category term="similarity"></category><category term="regex"></category></entry><entry><title>Twitter digest 2017 week 03</title><link href="https://pybit.es/twitter_digest_201703.html" rel="alternate"></link><published>2017-01-21T15:26:00+01:00</published><updated>2017-01-21T15:26:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-21:/twitter_digest_201703.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jsonmez:" target="_blank"&gt;@jsonmez:&lt;/a&gt; 7 Reasons Why You Should Learn Python Right Now - &lt;a href="https://t.co/sApNURfEup" title="https://t.co/sApNURfEup" target="_blank"&gt;https://t.co/sApNURfEup&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822564641624748032" data-datetime="2017-01-20T22:01:07+00:00"&gt;January 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@raymondh:" target="_blank"&gt;@raymondh:&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; tip: Use only immutable values for function defaults.  def wrong(s=[]): ...  def better(s=None): if s is None:‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822342521200250880" data-datetime="2017-01-20T07:18:30+00:00"&gt;January 20, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#95" target="_blank"&gt;#95&lt;/a&gt; Grumpy: Running Python on Go &lt;a href="https://t.co/LGQl1HJfZM" title="https://t.co/LGQl1HJfZM" target="_blank"&gt;https://t.co/LGQl1HJfZM&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/822005708522557440" data-datetime="2017-01-19T09:00:07+00:00"&gt;January 19, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@randal_olson:" target="_blank"&gt;@randal_olson:&lt;/a&gt; The most-used words in &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; scripts. &lt;a href="https://twitter.com/search/#dataviz" target="_blank"&gt;#dataviz&lt;/a&gt;

Other &lt;a href="https://twitter.com/search/#programming" target="_blank"&gt;#programming&lt;/a&gt; languages: &lt;a href="https://t.co/qIcBH444mJ" title="https://t.co/qIcBH444mJ" target="_blank"&gt;https://t.co/qIcBH444mJ&lt;/a&gt; &lt;a href="https://t.co/mZSV‚Ä¶" title="https://t.co/mZSV‚Ä¶" target="_blank"&gt;https://t.co/mZSV‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821846522308521984" data-datetime="2017-01-18T22:27:34+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Assert Statements in Python &lt;a href="https://t.co/Lx6l0AkanQ" title="https://t.co/Lx6l0AkanQ" target="_blank"&gt;https://t.co/Lx6l0AkanQ&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821643343679651840" data-datetime="2017-01-18T09:00:13+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#9" target="_blank"&gt;#9&lt;/a&gt; Walking with async coroutines, diving deep into requests, and a universe of options (for AIs) &lt;a href="https://t.co/fW9nzSSKHF" title="https://t.co/fW9nzSSKHF" target="_blank"&gt;https://t.co/fW9nzSSKHF&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821643338281615362" data-datetime="2017-01-18T09:00:11+00:00"&gt;January 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@getpy:" target="_blank"&gt;@getpy:&lt;/a&gt; Python requests package deep dive &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://twitter.com/search/#requests" target="_blank"&gt;#requests&lt;/a&gt;  &lt;a href="https://t.co/tixkSU3nk0" title="https://t.co/tixkSU3nk0" target="_blank"&gt;https://t.co/tixkSU3nk0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821415756827127808" data-datetime="2017-01-17T17:55:52+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@enneff:" target="_blank"&gt;@enneff:&lt;/a&gt; Good programmers aren't lazy in that they avoid work. Rather, it's that they are sensitive to unnecessary work.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821376732099969024" data-datetime="2017-01-17T15:20:48+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;List of Awesome Python Resources &lt;a href="https://t.co/7i4ODGGwkb" title="https://t.co/7i4ODGGwkb" target="_blank"&gt;https://t.co/7i4ODGGwkb&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/821280923698106368" data-datetime="2017-01-17T09:00:05+00:00"&gt;January 17, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Check out this cool episode: &lt;a href="https://t.co/VtXiXwY8aA" title="https://t.co/VtXiXwY8aA" target="_blank"&gt;https://t.co/VtXiXwY8aA&lt;/a&gt; - interesting episode about SQLAlchemy &lt;a href="https://t.co/CMUzapsLqG" title="https://t.co/CMUzapsLqG" target="_blank"&gt;https://t.co/CMUzapsLqG&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820577391126921218" data-datetime="2017-01-15T10:24:30+00:00"&gt;January 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@kennethreitz:" target="_blank"&gt;@kennethreitz:&lt;/a&gt; Here's the beginnings of my work on Delegator: Subprocesses for Humans 2.0. Feedback welcome! &lt;a href="https://t.co/DT9c7T2FhN" title="https://t.co/DT9c7T2FhN" target="_blank"&gt;https://t.co/DT9c7T2FhN&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820547567285137409" data-datetime="2017-01-15T08:25:59+00:00"&gt;January 15, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@datapythonista:" target="_blank"&gt;@datapythonista:&lt;/a&gt; Europe is eager for &lt;a href="https://twitter.com/@PyData." target="_blank"&gt;@PyData.&lt;/a&gt; Next meetups in &lt;a href="https://twitter.com/@pydatalondon," target="_blank"&gt;@pydatalondon,&lt;/a&gt; &lt;a href="https://twitter.com/@pydataamsterdam," target="_blank"&gt;@pydataamsterdam,&lt;/a&gt; &lt;a href="https://twitter.com/@pydataberlin" target="_blank"&gt;@pydataberlin&lt;/a&gt; and &lt;a href="https://twitter.com/@PyDataMallorca" target="_blank"&gt;@PyDataMallorca&lt;/a&gt; are ful‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820390155232092160" data-datetime="2017-01-14T22:00:29+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonHub:" target="_blank"&gt;@PythonHub:&lt;/a&gt; What are some programs I can make that would realistically prepare me for a programming job using python? &lt;a href="https://t.co/F1nHk‚Ä¶" title="https://t.co/F1nHk‚Ä¶" target="_blank"&gt;https://t.co/F1nHk‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820353672269930498" data-datetime="2017-01-14T19:35:31+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Vlad's blog ‚Äì What every Python project should have &lt;a href="https://t.co/Yfe1rS1tHh" title="https://t.co/Yfe1rS1tHh" target="_blank"&gt;https://t.co/Yfe1rS1tHh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820317914318389248" data-datetime="2017-01-14T17:13:26+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;cookiecutter: utility that creates projects from cookiecutters (project templates). E.g. Python package projects &lt;a href="https://t.co/EMxC7CHur0" title="https://t.co/EMxC7CHur0" target="_blank"&gt;https://t.co/EMxC7CHur0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820313295517319169" data-datetime="2017-01-14T16:55:04+00:00"&gt;January 14, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;Roll your own&lt;/h2&gt;
&lt;p&gt;We created this list with &lt;a href="http://projects.bobbelderbos.com/tweetdigest/"&gt;Tweet Digest&lt;/a&gt;.&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="pydata"></category><category term="tips"></category><category term="grumpy"></category><category term="assert"></category><category term="async"></category><category term="requests"></category><category term="delegator"></category><category term="pyprojects"></category><category term="cookiecutter"></category><category term="resources"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game - Review</title><link href="https://pybit.es/codechallenge02_review.html" rel="alternate"></link><published>2017-01-20T09:00:00+01:00</published><updated>2017-01-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-20:/codechallenge02_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/02/game.py"&gt;here&lt;/a&gt; for the complete solution.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we had the user interface like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        if not set(word) &amp;lt; set(draw):
            print(&amp;#39;One or more characters not in draw, try again&amp;#39;)
            continue
        elif not word.lower() in DICTIONARY:
            print(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
            continue
        return word
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But after learning about &lt;a href="http://pybit.es/error_handling.html"&gt;EAFP (easier to ask for forgiveness than permission)&lt;/a&gt; we thought it was more Pythonic to use exceptions. There was also a bug in the first check above (see comments, great learning!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        try:
            return _validation(word, draw)
        except ValueError as e:
            print(e)
            continue

def _validation(word, draw):
    # thanks Durmus
    for char in word.upper():
        if char in draw:
            draw.remove(char)
        else:
        raise ValueError(&amp;quot;{} is not a valid word!&amp;quot;.format(word))
    if not word.lower() in DICTIONARY:
        raise ValueError(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
    return word
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;random.sample makes it easy to get n number of random letters in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def draw_letters():
    return random.sample(POUCH, NUM_LETTERS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_possible_dict_words - the hardest part. To get all possible letter combinations from the letter draw, you need itertools.permutations, not combinations, because order does matter: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; len(list(itertools.combinations(letters, 2)))
21
&amp;gt;&amp;gt;&amp;gt; len(list(itertools.permutations(letters, 2)))
42
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://pybit.es/itertools-examples.html"&gt;our post on itertools&lt;/a&gt;. See also Durmus' comment / solution here for an alternative using combinations ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First the helper generator to do the work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))  # &amp;gt;= 3.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates all permutation of 1, 2, 3, 4, 5, 6, and 7 letters.&lt;/p&gt;
&lt;p&gt;We store all those in permutations and then use a set operation again to get all valid dictionary words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_possible_dict_words(draw):
    permutations = [&amp;#39;&amp;#39;.join(word).lower() for word in _get_permutations_draw(draw)]
    return set(permutations) &amp;amp; set(DICTIONARY)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the calc_word_value and max_word_value methods from &lt;a href="http://pybit.es/codechallenge01.html"&gt;challenge 01&lt;/a&gt; to calculate which word has the most value. &lt;/p&gt;
&lt;p&gt;The rest is main() calling the methods and outputting (as was provided in the template).&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;We got a request in the comments for tests to verify the work. Good idea, they are &lt;a href="https://github.com/pybites/challenges/blob/master/02/test_game.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_game.py 
......
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.056s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Its fun (addictive?) to play :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: T, I, I, G, T, T, L
Form a valid word: tig
Word chosen: TIG (value: 4)
Optimal word possible: gilt (value: 5)
You scored: 80.0
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: O, N, V, R, A, Z, H
Form a valid word: zar
Word chosen: ZAR (value: 12)
Optimal word possible: zonar (value: 14)
You scored: 85.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: E, P, A, E, I, O, A
Form a valid word: pi
Word chosen: PI (value: 4)
Optimal word possible: apio (value: 6)
You scored: 66.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: B, R, C, O, O, E, O
Form a valid word: broc
Not a valid dictionary word, try again
Form a valid word: f
One or more characters not in draw, try again
Form a valid word: bore
Word chosen: BORE (value: 6)
Optimal word possible: boce (value: 8)
You scored: 75.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="game"></category><category term="scrabble"></category><category term="itertools"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game</title><link href="https://pybit.es/codechallenge02.html" rel="alternate"></link><published>2017-01-16T00:01:00+01:00</published><updated>2017-01-16T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-16:/codechallenge02.html</id><summary type="html">&lt;p&gt;Using what we've learned the last challenge this week we build a simple Scrabble-like game: given a random set of 7 letters build the most valuable word. Good luck!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given a random set of 7 letters build the most valuable word&lt;/h3&gt;
&lt;p&gt;Using what we've learned &lt;a href="http://pybit.es/codechallenge01.html"&gt;the last challenge&lt;/a&gt; this week we build a simple Scrabble-like game (without board):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Letters drawn: G, A, R, Y, T, E, V
Form a valid word: gary  &amp;lt;&amp;lt; user input
Word chosen: GARY (value: 8)
Optimal word possible: GARVEY (value: 13)
You scored: 61.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#¬†assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;
$ cp game-TEMPLATE.py game.py
&lt;span class="c1"&gt;#¬†code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;p&gt;Last time we provided unittests and a guiding template. We received feedback that this was a bit too stringent. Therefore we provide two templates this time: game-help.py and game-nohelp.py&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We load in the necessary data structures to focus on the game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that DICTIONARY is a set for O(1) lookups&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LETTER_VALUES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POUCH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw 7 random letters from POUCH.&lt;/p&gt;
&lt;p&gt;As said POUCH is given and contains a distribution of Scrabble letters so that the player gets enough vowels (equally drawing A-Z makes it extremely hard because you need more vowels to make words):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;C&amp;#39;,
&amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, ...]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the player to form a word with one or more of the 7 letters of the draw. Validate input for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) all letters of word are in draw;
2) word is in DICTIONARY.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the word value and show it to the player.&lt;/p&gt;
&lt;p&gt;To focus on this challenge we re-use two methods from the previous challenge for this: calc_word_value and max_word_value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the optimal word (= max word value) checking all permutations of the 7 letters of the draw, cross-checking the DICTIONARY set for valid ones. This is a bit more advanced, but allows you to score the player (next).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show the player what the optimal word and its value is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give the player a score based on the previous steps, basically: player_score / optimal_score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus (not required)&lt;/h3&gt;
&lt;p&gt;The optimal solution calculation might be a bit difficult for some, that's why we stop here. But if you are feeling creative you might consider expanding this game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep scores in a shelve (file, db) and notify the player when a new record is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with hints and bonuses: hints cost x points, give a bonus of y points, for example when a 7 letter word is created (complete draw exhausted).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a simple web, mobile app or pygame.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="scrabble"></category><category term="codechallenges"></category><category term="github"></category><category term="fork"></category><category term="learning"></category><category term="game"></category><category term="itertools"></category><category term="random"></category><category term="sets"></category></entry><entry><title>Twitter digest 2017 week 02</title><link href="https://pybit.es/twitter_digest_201702.html" rel="alternate"></link><published>2017-01-14T00:05:00+01:00</published><updated>2017-01-14T00:05:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-14:/twitter_digest_201702.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@jakevdp:" target="_blank"&gt;@jakevdp:&lt;/a&gt; After a week using f-strings in Python 3.6, it's hard to remember life without them. The old way just seems...clunky
&lt;a href="https://t‚Ä¶" title="https://t‚Ä¶" target="_blank"&gt;https://t‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/820036347469713408" data-datetime="2017-01-13T22:34:35+00:00"&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@KentBeck:" target="_blank"&gt;@KentBeck:&lt;/a&gt; I'll repeat, the courage of creation is making bad beginnings &lt;a href="https://t.co/qip20A2kid" title="https://t.co/qip20A2kid" target="_blank"&gt;https://t.co/qip20A2kid&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819981740836081664" data-datetime="2017-01-13T18:57:36+00:00"&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@mkennedy:" target="_blank"&gt;@mkennedy:&lt;/a&gt; Cool presentation: 10 awesome features of Python that you can't use because you refuse to upgrade to Python 3 &lt;a href="https://t.co/3z‚Ä¶" title="https://t.co/3z‚Ä¶" target="_blank"&gt;https://t.co/3z‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819441364429668352" data-datetime="2017-01-12T07:10:20+00:00"&gt;January 12, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#8" target="_blank"&gt;#8&lt;/a&gt; Python gets Grumpy, avoiding burnout, Postman for API testing and more &lt;a href="https://t.co/rSLt7q7g8S" title="https://t.co/rSLt7q7g8S" target="_blank"&gt;https://t.co/rSLt7q7g8S&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819106605920702464" data-datetime="2017-01-11T09:00:07+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#94" target="_blank"&gt;#94&lt;/a&gt; Guarenteed packages via Conda and Conda-Forge &lt;a href="https://t.co/6pKEQ9t89J" title="https://t.co/6pKEQ9t89J" target="_blank"&gt;https://t.co/6pKEQ9t89J&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819106595531464705" data-datetime="2017-01-11T09:00:05+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/s5rEdcKZin" title="https://t.co/s5rEdcKZin" target="_blank"&gt;https://t.co/s5rEdcKZin&lt;/a&gt; talk about &lt;a href="https://twitter.com/search/#data" target="_blank"&gt;#data&lt;/a&gt; and &lt;a href="https://twitter.com/search/#nlp," target="_blank"&gt;#nlp,&lt;/a&gt; so cool we can watch all &lt;a href="https://twitter.com/search/#pycon" target="_blank"&gt;#pycon&lt;/a&gt; videos online, such a great way to learn&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819083179629936641" data-datetime="2017-01-11T07:27:02+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I love the key on max, min, sorted, so powerful and concise. Also using it in this week's coding challenge :) &lt;a href="https://t.co/vpL1R3bSIW" title="https://t.co/vpL1R3bSIW" target="_blank"&gt;https://t.co/vpL1R3bSIW&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/819082820329017346" data-datetime="2017-01-11T07:25:36+00:00"&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@getpy:" target="_blank"&gt;@getpy:&lt;/a&gt; Generators &lt;a href="https://t.co/vF2lHX3D6Q" title="https://t.co/vF2lHX3D6Q" target="_blank"&gt;https://t.co/vF2lHX3D6Q&lt;/a&gt; by the author of the fluent python. &lt;a href="https://twitter.com/search/#generators" target="_blank"&gt;#generators&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818951461782646788" data-datetime="2017-01-10T22:43:38+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@_ericelliott:" target="_blank"&gt;@_ericelliott:&lt;/a&gt; The best code is no code. Where there is no code, there are no bugs. No API to learn. No awkward UI. The best refactors a‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818898348312850433" data-datetime="2017-01-10T19:12:35+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@TrendingGithub:" target="_blank"&gt;@TrendingGithub:&lt;/a&gt; pybites / challenges: Repo for our weekly challenges on pybit.es ‚òÖ28 &lt;a href="https://t.co/U1pFa7kucO" title="https://t.co/U1pFa7kucO" target="_blank"&gt;https://t.co/U1pFa7kucO&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818840038729535488" data-datetime="2017-01-10T15:20:53+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Iterators &lt;a href="https://t.co/n3MXkT0Gr3" title="https://t.co/n3MXkT0Gr3" target="_blank"&gt;https://t.co/n3MXkT0Gr3&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818744285180751873" data-datetime="2017-01-10T09:00:23+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;refactor ugly switch statement in &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt; &lt;a href="https://t.co/2Plq0XHVAu" title="https://t.co/2Plq0XHVAu" target="_blank"&gt;https://t.co/2Plq0XHVAu&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818734200035614720" data-datetime="2017-01-10T08:20:19+00:00"&gt;January 10, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@PythonEggs:" target="_blank"&gt;@PythonEggs:&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; Events in 2017, Need your help! &lt;a href="https://t.co/R70NVAZcBU" title="https://t.co/R70NVAZcBU" target="_blank"&gt;https://t.co/R70NVAZcBU&lt;/a&gt; &lt;a href="https://twitter.com/search/#django" target="_blank"&gt;#django&lt;/a&gt; &lt;a href="https://t.co/IjNPLwkmOh" title="https://t.co/IjNPLwkmOh" target="_blank"&gt;https://t.co/IjNPLwkmOh&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818539592022421505" data-datetime="2017-01-09T19:27:01+00:00"&gt;January 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@fullstackpython:" target="_blank"&gt;@fullstackpython:&lt;/a&gt; Working with APIs the Pythonic Way &lt;a href="https://t.co/TQyVxcO5yw" title="https://t.co/TQyVxcO5yw" target="_blank"&gt;https://t.co/TQyVxcO5yw&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/818537299629764609" data-datetime="2017-01-09T19:17:54+00:00"&gt;January 09, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@gcosma1:" target="_blank"&gt;@gcosma1:&lt;/a&gt; The entire Python Data Science Handbook by &lt;a href="https://twitter.com/@jakevdp" target="_blank"&gt;@jakevdp&lt;/a&gt; is openly published as Jupyter notebook &lt;a href="https://t.co/w7RKk5IaC8" title="https://t.co/w7RKk5IaC8" target="_blank"&gt;https://t.co/w7RKk5IaC8&lt;/a&gt; &lt;a href="https://t.‚Ä¶" title="https://t.‚Ä¶" target="_blank"&gt;https://t.‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817746028560584705" data-datetime="2017-01-07T14:53:40+00:00"&gt;January 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="data science"></category><category term="challenges"></category><category term="APIs"></category><category term="conda"></category><category term="3.6"></category></entry><entry><title>Code Challenge 01 - Word Values Part I - Review</title><link href="https://pybit.es/codechallenge01_review.html" rel="alternate"></link><published>2017-01-13T12:40:00+01:00</published><updated>2017-01-13T12:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-13:/codechallenge01_review.html</id><summary type="html">&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's Friday so we review the code challenge of this week. We describe our learning and a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Thanks for coding with us!&lt;/h2&gt;
&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's so cool to see &lt;a href="https://github.com/pybites/challenges/network/members"&gt;many developers&lt;/a&gt; jump on this :) &lt;/p&gt;
&lt;p&gt;This is awesome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="awesome response on github, 70 forks as of this writing" src="https://pybit.es/images/awesome-response.png"&gt;&lt;/p&gt;
&lt;p&gt;It's Friday so we review the code challenge of this week. We describe our learning, a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Process and learning&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Julian&lt;/h3&gt;
&lt;p&gt;It's funny, going into this challenge I actually thought it was going to be easy! I was wrong!
The concept was simple enough and I had a decent idea as to how I was going to write the program. I hit a wall however, when I realised I had to code my answer within the framework of the unittest. &lt;/p&gt;
&lt;p&gt;As a newbie programmer, having to almost "restrict" my code to work with the unittest was quite difficult.
Furthermore, working with the external data.py file also added a little complexity. I'm definitely used to having all data and variables located in the local file I'm working on.&lt;/p&gt;
&lt;p&gt;Probably the biggest pain point was trying to work with the LETTER_SCORES dict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LETTER_SCORES = {letter: score for score, letters in scrabble_scores
                              for letter in letters.split()}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The for loop within the dict threw me off completely and I spent what felt like hours trying to make sense of it. It wasn't until Bob expanded it out into multiple lines of code that it finally made sense.&lt;/p&gt;
&lt;p&gt;On the flip side, I was pleasantly surprised with myself when I got the load_words() function working. I recalled Bob's comment on my code that I could use 'with' (context manager) to open an external file. Doing this made it much simpler.&lt;/p&gt;
&lt;p&gt;Working on the max_word_value() function was equally as satisfying as it was much more familiar coding ... but that may not be a good thing.&lt;/p&gt;
&lt;p&gt;In the end I wasn't actually able to get the program working. Not my proudest moment but definitely an eye opener as to how much further I have to go with my code. I'll hopefully have time this weekend to take another look - maybe a fresh look after a day off will highlight something I missed earlier!&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/hobojoe1848/challenges/tree/master/01"&gt;here&lt;/a&gt; if you're interested! Be gentle!&lt;/p&gt;
&lt;p&gt;Going forward with these challenges, I think we'll try and shake it up a little. Not make it "mandatory" to code the program within the unittest framework which should allow us to get a more diverse code base from the community.&lt;/p&gt;
&lt;p&gt;Overall, while difficult for me and even frustrating at times, I definitely enjoyed the challenge. It forced me to learn to read code I'd never seen before and rethink the way I write it myself.&lt;/p&gt;
&lt;h2&gt;Possible solution and Python idioms&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Bob&lt;/h3&gt;
&lt;p&gt;This was a good exercise. As Julian said we might leave out unittests next time to make it less stringent and make up other requirements like max LOC. We also will provide two template files: beginner (more hand-holding) and advanced (almost blank file). You will see it on Monday ...&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/bbelderbos/challenges/tree/solutions/01"&gt;here&lt;/a&gt;. Some comments:&lt;/p&gt;
&lt;h4&gt;load_words()&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_words():
    with open(DICTIONARY) as f:
        return [word.strip() for word in f.read().split()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, "with" is the way to go to open files. Initially I had return f.read().split() but then I saw the comment of &lt;a href="http://pybit.es/codechallenge01.html"&gt;sesh00&lt;/a&gt;: he used a list comprehension to make sure each word had whitespace stripped which is a good approach.&lt;/p&gt;
&lt;h4&gt;calc_word_value(word)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc_word_value(word):
    return sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dictionary. You can access values by using letter keys as LETTER_SCORES['A'] etc, but what if there is a non-valid character? There were two words with '-' in it so they would cause a KeyError. Using the dict get() method you can give it a default value of 0. Safety first: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; 
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Christophe&lt;/span&gt;
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pierre&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Christophe&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For another more verbose (cleaner?) way to write this see &lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scores = [LETTER_SCORES[letter] for letter in letters 
            if letter in LETTER_SCORES.keys()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I use sum() to add up all letter values. You can give it a list comprehension but also a generator which is best practice (lazy loading):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# sum with list comprehension
&amp;gt;&amp;gt;&amp;gt; sum([LETTER_SCORES.get(c.upper(), 0) for c in word])
31
# or with a generator, just drop the []
&amp;gt;&amp;gt;&amp;gt; sum(LETTER_SCORES.get(c.upper(), 0) for c in word)
31
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can totally write just a for loop and sum to a total variable. And as a beginner I encourage you to actually do this to get a feel for how an iterator works internally.&lt;/p&gt;
&lt;h4&gt;max_word_value(words)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def max_word_value(words=None):
    return max(words or load_words(), key=lambda w: calc_word_value(w))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might be advanced to a beginner. To pass the unittests you have to account for two scenarios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A word list is given, if not load the default dictionary, I do this in one statement with or, using default arg None for words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a criteria for max.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The max builtin calculates the max of an iterator, very convenient here. The cool thing is that it takes a key optional argument (like the sorted() builtin) which you can give a function to 'max on'. &lt;/p&gt;
&lt;p&gt;In this case I don't want to max on for example len of word, but on the word value, so we re-use calc_word_value() here. For more details on this I recommend reading &lt;a href="https://dbader.org/blog/python-min-max-and-nested-lists"&gt;this great article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PyBites digest of comments on Monday's challenge post&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="http://pybit.es/codechallenge01.html#disqus_thread"&gt;your comments&lt;/a&gt;. We are really stoked to learn about all these different approaches. Also you cannot read enough other developers' code, it's a great way to learn fast!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We already mentioned &lt;a href="https://github.com/sesh/challenges/blob/master/01/wordvalue.py"&gt;Sesh' solution&lt;/a&gt;, similar to ours, yet still some minor differences / improvements. Queston for the comments (anybody?): words=load_words() as default arg to max_word_value(), probably not a problem here, but doesn't that fall under the &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;Mutable Default Arguments gotcha&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ukaratay/challenges/blob/master/01/wordvalue.py"&gt;ukaratay solution&lt;/a&gt; is also similar, but he uses upper() on the word = 1 call instead my multiple calls for each char = better. Tiny details but they matter when you add them up and when things scale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return sum(LETTER_SCORES.get(char, 0) for char in word.upper())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/alhart2015/challenges/blob/master/01/wordvalue.py"&gt;alhart2015 solution&lt;/a&gt; is a great addition, specially max_word_value() has a longer format, probably easier to read to people just starting out in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;check out this notebook&lt;/a&gt;, Jeffrey James shared a complete Pandas solution. The cool thing about this approach is that it calculates the score for each dictionary word and loads it into a Pandas dataframe which he uses to show us the relationship between word length and score, interesting. Well done and thanks Jeffrey!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="HN"></category><category term="github"></category><category term="learning"></category><category term="max"></category><category term="generators"></category><category term="scrabble"></category><category term="refactoring"></category></entry><entry><title>Code Challenge 01 - Word Values Part I</title><link href="https://pybit.es/codechallenge01.html" rel="alternate"></link><published>2017-01-09T09:00:00+01:00</published><updated>2017-01-09T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-09:/codechallenge01.html</id><summary type="html">&lt;p&gt;Our first weekly code challenge is to calculate the (language) dictionary word that would have the most value in Scrabble. Enjoy and let us know if you like this format.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Welcome to PyBites Code Challenges&lt;/h2&gt;
&lt;p&gt;Starting today every Monday we release a code challenge here on our blog.
On Friday we publish one or more solutions.&lt;/p&gt;
&lt;p&gt;The goal is to have us and our readers work on the solution during the week.&lt;/p&gt;
&lt;p&gt;To keep it simple we don't accept pull-requests at this time.
Just &lt;a href="https://github.com/pybites/challenges"&gt;fork our repo&lt;/a&gt; and work on your solution locally.&lt;/p&gt;
&lt;p&gt;To have the tests pass import the right module, do this when you have a local clone of the fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;challenge_number&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;this &lt;span class="nv"&gt;week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
$ cp name-template name.py
&lt;span class="c1"&gt;# code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to share your solution just share your commit link in the comments of our Friday review post. 
(Monday post = questions / Friday post = solutions + reflection).&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;this link&lt;/a&gt; how to keep your fork in sync with our repo.&lt;/p&gt;
&lt;p&gt;Remember, we don't strive for the 'best' solution, it's not a competition.
We do of course strive to have good Pythonic solutions so any feedback is welcome, but do respect the newby / learner.
Again, learning more + better Python is the main objective. &lt;/p&gt;
&lt;p&gt;Finally we believe fixing code challenges is a very effective way to become a better programmer.&lt;/p&gt;
&lt;h2&gt;Ready for a code challenge? Read on ...&lt;/h2&gt;
&lt;p&gt;This week you will write a script to calculate the (language) dictionary word that would have the most value in Scrabble. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read in dictionary.txt (a copy of /usr/share/dict/words on my Mac) and calculate the word that has the most value in Scrabble based on LETTER_SCORES which is imported in wordvalue-template.py.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the full code challenge &lt;a href="https://github.com/pybites/challenges/tree/master/01"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be a two-part code challenge. Next week you will expand on this building a simple command line game. Something like giving a user a bunch of letters and let him/her create a high-value word (like Scrabble but without the board).&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges"&gt;Fork our repo&lt;/a&gt; and get coding ... have fun!&lt;/p&gt;
&lt;h2&gt;Like this idea?&lt;/h2&gt;
&lt;p&gt;Any feedback or comments are welcome below or &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;on HN&lt;/a&gt;. Thanks for trying!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Bob + Julian &lt;/p&gt;</content><category term="scrabble"></category><category term="tdd"></category><category term="codechallenges"></category><category term="github"></category><category term="learning"></category></entry><entry><title>Twitter digest 2017 week 01</title><link href="https://pybit.es/twitter_digest_201701.html" rel="alternate"></link><published>2017-01-07T09:00:00+01:00</published><updated>2017-01-07T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-07:/twitter_digest_201701.html</id><summary type="html">&lt;p&gt;On Saturdays we will share a curated list of 15 cool things (mostly Python) we found / tweeted during the week.&lt;/p&gt;</summary><content type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;I got Python Tricks: The Book (Work-In-Progress) from &lt;a href="https://twitter.com/@dbader_org" target="_blank"&gt;@dbader_org&lt;/a&gt; on &lt;a href="https://twitter.com/@Gumroad:" target="_blank"&gt;@Gumroad:&lt;/a&gt; &lt;a href="https://t.co/U54ZyzTEa0" title="https://t.co/U54ZyzTEa0" target="_blank"&gt;https://t.co/U54ZyzTEa0&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817635169213579264" data-datetime="2017-01-07T07:33:09+00:00"&gt;January 07, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@dataelixir:" target="_blank"&gt;@dataelixir:&lt;/a&gt; Looking for data? Follow &lt;a href="https://twitter.com/@CoolDatasets" target="_blank"&gt;@CoolDatasets&lt;/a&gt; for curated datasets that are open and machine-readable.&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817477174253023237" data-datetime="2017-01-06T21:05:20+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@codeorg:" target="_blank"&gt;@codeorg:&lt;/a&gt; Learning to code at age 56 :-) &lt;a href="https://t.co/qsY8Ydu8J8" title="https://t.co/qsY8Ydu8J8" target="_blank"&gt;https://t.co/qsY8Ydu8J8&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817443042823176193" data-datetime="2017-01-06T18:49:43+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pydatait:" target="_blank"&gt;@pydatait:&lt;/a&gt; The next PyData Italy will be again hosted by the Python Italian Conference &lt;a href="https://twitter.com/@pyconit" target="_blank"&gt;@pyconit&lt;/a&gt; in Florence &lt;a href="https://t.co/EfYhVamr3j" title="https://t.co/EfYhVamr3j" target="_blank"&gt;https://t.co/EfYhVamr3j&lt;/a&gt; &lt;a href="https://twitter.com/search/#pyd‚Ä¶" target="_blank"&gt;#pyd‚Ä¶&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817356740253675520" data-datetime="2017-01-06T13:06:47+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#pythontip:" target="_blank"&gt;#pythontip:&lt;/a&gt; whenever you see range(len(fancy_list)), pause to consider which problem you're solving&lt;a href="https://t.co/hw6poTSJUv" title="https://t.co/hw6poTSJUv" target="_blank"&gt;https://t.co/hw6poTSJUv&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817354773292871680" data-datetime="2017-01-06T12:58:58+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;The ultimate list of &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#Podcasts" target="_blank"&gt;#Podcasts&lt;/a&gt; &lt;a href="https://t.co/fqPkqS3zva" title="https://t.co/fqPkqS3zva" target="_blank"&gt;https://t.co/fqPkqS3zva&lt;/a&gt; - nice list&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817280745861484544" data-datetime="2017-01-06T08:04:48+00:00"&gt;January 06, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@NicolasDular:" target="_blank"&gt;@NicolasDular:&lt;/a&gt; "It's really important to have hobbies other than writing code." &lt;a href="https://t.co/dmsAO8t9YH" title="https://t.co/dmsAO8t9YH" target="_blank"&gt;https://t.co/dmsAO8t9YH&lt;/a&gt; great post from &lt;a href="https://twitter.com/@kennethreitz" target="_blank"&gt;@kennethreitz&lt;/a&gt; ab‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817145648680144896" data-datetime="2017-01-05T23:07:59+00:00"&gt;January 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/szO1tTdMre" title="https://t.co/szO1tTdMre" target="_blank"&gt;https://t.co/szO1tTdMre&lt;/a&gt; good explanation of iterators and iterables&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/817132674112516101" data-datetime="2017-01-05T22:16:25+00:00"&gt;January 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@pythonbytes:" target="_blank"&gt;@pythonbytes:&lt;/a&gt; It's &lt;a href="https://twitter.com/@pythonbytes" target="_blank"&gt;@pythonbytes&lt;/a&gt; &lt;a href="https://twitter.com/search/#7:" target="_blank"&gt;#7:&lt;/a&gt; Python 3.6 is out, Sanic is a blazing web framework, and failing open source infrastructure? &lt;a href="https://t.co/zAxKX5INNP" title="https://t.co/zAxKX5INNP" target="_blank"&gt;https://t.co/zAxKX5INNP&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816764531594657792" data-datetime="2017-01-04T21:53:33+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://twitter.com/search/#93" target="_blank"&gt;#93&lt;/a&gt; Spreading Python through the sciences with Software Carpentry &lt;a href="https://t.co/38EBc45KL9" title="https://t.co/38EBc45KL9" target="_blank"&gt;https://t.co/38EBc45KL9&lt;/a&gt; &lt;a href="https://twitter.com/search/#python" target="_blank"&gt;#python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816569887313117184" data-datetime="2017-01-04T09:00:06+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; Building RESTful Python Web Services &lt;a href="https://twitter.com/search/#PacktPublishing" target="_blank"&gt;#PacktPublishing&lt;/a&gt; &lt;a href="https://t.co/eBJ1Oqxvul" title="https://t.co/eBJ1Oqxvul" target="_blank"&gt;https://t.co/eBJ1Oqxvul&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816545953268305920" data-datetime="2017-01-04T07:25:00+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@treyhunner:" target="_blank"&gt;@treyhunner:&lt;/a&gt; &lt;a href="https://twitter.com/search/#pythontip:" target="_blank"&gt;#pythontip:&lt;/a&gt; Whenever you find yourself considering using a lambda in &lt;a href="https://twitter.com/search/#Python," target="_blank"&gt;#Python,&lt;/a&gt; think about whether you should make a named f‚Ä¶&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816539053097185280" data-datetime="2017-01-04T06:57:35+00:00"&gt;January 04, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;One of my favorite programming quotes &lt;a href="https://twitter.com/search/#cleancode" target="_blank"&gt;#cleancode&lt;/a&gt; &lt;a href="https://t.co/qzDrzKgdq5" title="https://t.co/qzDrzKgdq5" target="_blank"&gt;https://t.co/qzDrzKgdq5&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816382171619454976" data-datetime="2017-01-03T20:34:12+00:00"&gt;January 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;RT &lt;a href="https://twitter.com/@newsafaribooks:" target="_blank"&gt;@newsafaribooks:&lt;/a&gt; Data Pipelines with Python &lt;a href="https://twitter.com/search/#InfiniteSkills" target="_blank"&gt;#InfiniteSkills&lt;/a&gt; &lt;a href="https://t.co/iXKS3GMrb6" title="https://t.co/iXKS3GMrb6" target="_blank"&gt;https://t.co/iXKS3GMrb6&lt;/a&gt; &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/816170167575134208" data-datetime="2017-01-03T06:31:46+00:00"&gt;January 03, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;&lt;a href="https://t.co/Dko7iUWysc" title="https://t.co/Dko7iUWysc" target="_blank"&gt;https://t.co/Dko7iUWysc&lt;/a&gt; Pybites weekly newsletter! Our latest posts on one handy page. Keep Calm and Code in &lt;a href="https://twitter.com/search/#Python!" target="_blank"&gt;#Python!&lt;/a&gt;&lt;/p&gt;‚Äî Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/815853681648271360" data-datetime="2017-01-02T09:34:10+00:00"&gt;January 02, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;hr&gt;
&lt;p&gt;Btw, if you are interested in making a Twitter digest yourself, you can use &lt;a href="http://projects.bobbelderbos.com/tweetdigest/index.php"&gt;this tool&lt;/a&gt; (yes ... php ... nice challenge to recreate this one in Django or so #TODO).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- PyBites&lt;/p&gt;</content><category term="twitter"></category><category term="news"></category><category term="python"></category><category term="podcasts"></category><category term="data"></category><category term="iterators"></category><category term="pythontips"></category></entry><entry><title>How to get PyBites up and running on your machine</title><link href="https://pybit.es/install-me.html" rel="alternate"></link><published>2016-12-20T10:40:00+01:00</published><updated>2016-12-20T10:40:00+01:00</updated><author><name>Pybites</name></author><id>tag:pybit.es,2016-12-20:/install-me.html</id><summary type="html">&lt;p&gt;This is a short post for Julian to get this Pelican blog up and running on his system.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is also a useful ref for future collaborators ...&lt;/p&gt;
&lt;p&gt;We're open source right? ;)&lt;/p&gt;
&lt;h2&gt;Pybites install guide&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# we have a src, output and theme (Flex) repo, use --recursive to get all
$ git clone --recursive git@github.com:pybites/pybites.github.io-src pybites
$ cd pybites

# set up env and install dependencies
$ virtualenv venv (might need: virtualenv -p python3 venv)
$ source venv/bin/activate
$ pip install -r requirements.txt

#¬†add some content
$ cd content
$ vi new-blog-post.md ; wq!

#¬†check changes on localhost
$ cd ..
$ make html &amp;amp;&amp;amp; make serve

# push this new content to the parent -src repo
$ git add . 
$ git commit -m &amp;quot;my new blog post&amp;quot;
$ git push

# push the static blog change to the child -io repo
# wait: this is a duplicate step, I don&amp;#39;t like duplication!
# ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we have 2 repos: -src for code, -io for generated static content, ideally we want to automate the publishing to -io, so we can just focus on the main repo (-src). &lt;/p&gt;
&lt;p&gt;Here is where &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;git hooks&lt;/a&gt; come into play. cd into .git/hooks and add below script, name it "pre-push", update your WORKING_DIR and chmod 755 it ...&lt;/p&gt;
&lt;p&gt;UPDATE: we abondonded this hook, because it led to some conflicts / unnecessary work, not worth automating this step. We push manually to -src / -io these days. &lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="github"></category><category term="pip"></category><category term="virtualenv"></category><category term="git"></category></entry><entry><title>__init__</title><link href="https://pybit.es/hello-world.html" rel="alternate"></link><published>2016-12-19T10:26:00+01:00</published><updated>2016-12-19T10:26:00+01:00</updated><author><name>Pybites</name></author><id>tag:pybit.es,2016-12-19:/hello-world.html</id><summary type="html">&lt;p&gt;Welcome to our new PyBites blog where our goal is to further develop our Python skills and share what we learn.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to our PyBites blog hosted by &lt;a href="http://www.techmoneykids.com"&gt;Julian&lt;/a&gt; and &lt;a href="http://www.bobcodes.it"&gt;Bob&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="http://pybit.es/pages/about.html"&gt;here&lt;/a&gt; how we started. You can contact us &lt;a href="http://pybit.es/pages/contact.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="blog"></category><category term="pybites"></category></entry></feed>