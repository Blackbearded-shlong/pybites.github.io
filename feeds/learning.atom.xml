<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Learning</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/learning.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-07-07T08:45:00+02:00</updated><entry><title>From Challenge to Project - How I Made PyTrack, Learning Modules and Packaging</title><link href="https://pybit.es/guest-pytrack-app.html" rel="alternate"></link><published>2017-07-07T08:45:00+02:00</published><updated>2017-07-07T08:45:00+02:00</updated><author><name>Martin</name></author><id>tag:pybit.es,2017-07-07:/guest-pytrack-app.html</id><summary type="html">&lt;p&gt;This is a guest post by Martin, a passionate Pythonista who turns our code challenges into cool projects. In this article he describes his process of building &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;pyTrack&lt;/a&gt;, a simple task time tracker. Not only did he learn various Python modules - PeeWee, Maya and Click - he also stunned us delivering a project with great documentation and properly packaged code.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Lessons learned during the making of pyTrack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a guest post by Martin, a passionate Pythonista who turns our code challenges into cool projects. In this article he describes his process of building &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;pyTrack&lt;/a&gt;, a simple task time tracker. Quoting the Readme:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pyTrack helps you keep track of how much time you spend on your projects and tasks. A sqlite database is used to track your time logs, and it is kept simple by only implementing as few commands as needed to get a full featured application. You can add/remove multiple projects, start/stop tracking any of them, or completely reset the database to start with a clean slate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only did he learn various Python modules - PeeWee, Maya and Click - he also stunned us delivering a project with great documentation (check out &lt;a href="https://github.com/clamytoe/pyTrack/blob/master/README.md"&gt;the README&lt;/a&gt;!) and properly packaged code. &lt;/p&gt;
&lt;p&gt;Enter Martin:&lt;/p&gt;
&lt;h2&gt;PyBites Challenge #23&lt;/h2&gt;
&lt;p&gt;When I first heard about &lt;a href="https://pybit.es/codechallenge23.html"&gt;this challenge&lt;/a&gt;, my interest was immediately peaked. It sounded like something that I could use myself on a regular basis. I knew from the get go that I wanted to use &lt;a href="https://github.com/kennethreitz/maya"&gt;Maya&lt;/a&gt; for keeping track of the timestamps so I installed it and got to work. Things were going great: I wrote up my classes and was able to create objects and save timestamps, pull them back out and get time intervals and such.&lt;/p&gt;
&lt;p&gt;It seemed like a relatively simple challenge. I knew that I needed a database back-end and didn't want to use &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; again, so I decided to up the stakes a bit by using &lt;a href="https://github.com/coleifer/peewee"&gt;PeeWee&lt;/a&gt; ORM. &lt;/p&gt;
&lt;p&gt;I'm usually able to figure things out by checking the docs and playing around with the code. Time was not on my side this time though so I could only work on this sporadically over a couple of weeks. It was hard going at first. I mostly struggled with getting to know how to use PeeWee. Maya on the other hand was relatively easy to pick up.&lt;/p&gt;
&lt;h2&gt;PeeWee and Maya&lt;/h2&gt;
&lt;p&gt;One thing was certain: all of the work that I had already put into creating the classes and tests for this would have to be tossed and replaced with the class models for &lt;em&gt;PeeWee&lt;/em&gt;...&lt;/p&gt;
&lt;p&gt;Figuring out a one-to-many relationship was one of my first hurdles. I read the docs a bit and looked at some quick tutorials. They were very basic, so my implementation ended up basic. I recently came across &lt;a href="http://blog.adnansiddiqi.me/develop-database-driven-applications-in-python-with-peewee/"&gt;Adnan's Random bytes&lt;/a&gt; blog, that would have came in really handy when I was first developing this. The way he sets his relationships is how I should have done it.&lt;/p&gt;
&lt;p&gt;Another thing that threw me off was not being able to save &lt;em&gt;MayaDT&lt;/em&gt; objects into the database. Only I didn't realize that it was the problem that I was having! The error messages from PeeWee were really cryptic and hard to follow.&lt;/p&gt;
&lt;p&gt;After a few days of cursing and messing around with it, it finally hit me! &lt;em&gt;PeeWee&lt;/em&gt; was expecting me to store &lt;em&gt;datetime&lt;/em&gt; objects because that's what I had declared them as in the models! As soon as I converted the &lt;em&gt;Maya&lt;/em&gt; objects into the correct format, I was able to get the ball rolling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; now&lt;span class="o"&gt;()&lt;/span&gt;.datetime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next issue was when I would pull those timestamps back out to get my time intervals, &lt;em&gt;Maya&lt;/em&gt; was not having it. Fortunate for me, the author of &lt;em&gt;Maya&lt;/em&gt;, had already solved that problem. Instead of using the normal &lt;em&gt;MayaInterval()&lt;/em&gt; I had to do it this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MayaInterval.from_datetime&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you would think that would be it, but no, that introduced another issue. See, with the normal &lt;em&gt;MayaInterval&lt;/em&gt; method, your local timezone is automatically determined and taken care of. Not so with the &lt;em&gt;.from_datetime()&lt;/em&gt; one. It took me a while to figure out why it was failing when it had all been working before the addition of &lt;em&gt;PeeWee&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that I couldn't simply just use the &lt;em&gt;datetime&lt;/em&gt; entries that I had placed into the database. I had to first get the timezone and then feed that into &lt;em&gt;.from_datetime()&lt;/em&gt;. The timezone object has many properties, the one that I was interested in was &lt;strong&gt;zone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# set local timezone&lt;/span&gt;
&lt;span class="nv"&gt;timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_localzone&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;local_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; timezone.zone

&lt;span class="c1"&gt;# import datetime objects from database&lt;/span&gt;
...

&lt;span class="c1"&gt;# parse them into the proper formats&lt;/span&gt;
&lt;span class="nv"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; parse&lt;span class="o"&gt;(&lt;/span&gt;log.start_time&lt;span class="o"&gt;)&lt;/span&gt;.datetime&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;to_timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;local_tz, &lt;span class="nv"&gt;naive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;stop&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; parse&lt;span class="o"&gt;(&lt;/span&gt;log.stop_time&lt;span class="o"&gt;)&lt;/span&gt;.datetime&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;to_timezone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;local_tz, &lt;span class="nv"&gt;naive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get the interval&lt;/span&gt;
&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; MayaInterval.from_datetime&lt;span class="o"&gt;(&lt;/span&gt;start, stop&lt;span class="o"&gt;)&lt;/span&gt;.timedelta
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;timedelta&lt;/em&gt; converts the interval object into &lt;em&gt;0:00:00&lt;/em&gt; format, which is exactly what I wanted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note from PyBites: we definitely recognize this kind of struggle using new modules and technologies. This is why we encourage learning by code challenges. Reading a book about technology only gets you so far. It's when you start &lt;em&gt;using&lt;/em&gt; the technology that you run in many (context) specific issues. This can be frustrating, but practice enough and you will be on your way to mastery. We think Martin's &lt;em&gt;pyTrack&lt;/em&gt; is a great example of this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;User interface - plan ahead!&lt;/h2&gt;
&lt;p&gt;Once everything was working smoothly, I remembered that I wanted to make this into a command-line utility. &lt;/p&gt;
&lt;p&gt;A common mistake is to just start coding which often leads to having to rewrite a lot of your code. In that regard I think next time I’ll build out the command-line interface first and then add the code for it. &lt;/p&gt;
&lt;p&gt;I started to add &lt;a href="https://github.com/pallets/click"&gt;Click&lt;/a&gt; to get the CLI functionality. I had already used Click before so I thought that it would be pretty easy to add it as an afterthought. Boy was I wrong!&lt;/p&gt;
&lt;p&gt;Let's just say that I patched it onto my existing code but then had to refactor the whole thing out once again so that the command-line portion of the code would be its own separate file. This will make it easier to add a GUI later on, if I get the motivation to do it.&lt;/p&gt;
&lt;p&gt;My biggest roadblock here was in trying to get the project listing to show whenever no arguments were passed. None of the documentation or tutorials that I found showed how to do this. Took me a while to figure out that you have to call the method that starts off &lt;em&gt;Click&lt;/em&gt; and since every example that I ran into in the wild started out that way, I thought it was a requirement.&lt;/p&gt;
&lt;p&gt;I modified my main function so that it would look for command-line arguments and take action appropriately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
        &lt;span class="k"&gt;if&lt;/span&gt; len&lt;span class="o"&gt;(&lt;/span&gt;argv&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;1&lt;/span&gt;:
            cli&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;:
            &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; get_projects&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;True&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have that portion of the code wrapped in other code that opens and closes the connection to the database. I found it easier to do it this way instead of using function decorators.&lt;/p&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;p&gt;Last but not least came time to package the whole thing. PyBites wrote up &lt;a href="https://pybit.es/python-packaging.html"&gt;an excellent tutorial&lt;/a&gt; on how to do it, so I won't repeat it here. I actually learned from it myself and implemented some of it on this project, so go and have a read.&lt;/p&gt;
&lt;p&gt;I should also give a shout out to &lt;a href="https://twitter.com/dbader_org"&gt;Dan Bader&lt;/a&gt; and thank him for his excellent &lt;a href="https://dbader.org/blog/write-a-great-readme-for-your-github-project"&gt;README-Template for your GitHub project&lt;/a&gt;, which I use on every single project that I write. It takes your documentation from being so so, up to pro level!&lt;/p&gt;
&lt;p&gt;I haven’t covered a lot about actually using my project. I think I did a pretty good job of explaining how it works in the &lt;a href="https://github.com/clamytoe/pyTrack"&gt;README&lt;/a&gt;, so check it out for yourself and feel free to contact me with any suggestions on how to improve it.&lt;/p&gt;
&lt;p&gt;One more bit of advice when starting your own projects. Do a quick &lt;strong&gt;pip&lt;/strong&gt; search for your potential project name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip search pyTrack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wasn't planning on pushing this out to &lt;a href="https://pypi.python.org/pypi"&gt;pypi&lt;/a&gt;, but now that I'm considering it I'm running into the problem that &lt;strong&gt;pyTrack&lt;/strong&gt; is already taken! Not only will I have to come up with a new name, but I'm also going to have to rename my GitHub repo to reflect the change.&lt;/p&gt;
&lt;p&gt;Conclusion: put in a little bit of leg work at the beginning and save yourself the hassle. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Martin Uribe&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin is a ten year Army Veteran, turned Field Support Technician in the IT and Services Industry, who likes to code on the side to make his daily tasks easier. You can follow him on &lt;a href="https://twitter.com/mohhinder"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/clamytoe"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="challenges"></category><category term="guest"></category><category term="PyTrack"></category><category term="packaging"></category><category term="peewee"></category><category term="click"></category><category term="maya"></category><category term="learning"></category></entry><entry><title>From Script to Project part 2. - Packaging Your Code in Python</title><link href="https://pybit.es/python-packaging.html" rel="alternate"></link><published>2017-07-01T10:45:00+02:00</published><updated>2017-07-01T10:45:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-07-01:/python-packaging.html</id><summary type="html">&lt;p&gt;This week's article is about packaging your Python code. Sounds daunting? Actually it is pretty simple.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Namespaces are one honking great idea -- let's do more of those!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This week's article is about packaging your Python code. Sounds daunting? Actually it is pretty simple.&lt;/p&gt;
&lt;p&gt;Last week we introduced &lt;a href="https://github.com/pybites/karmabot"&gt;Karma Bot&lt;/a&gt; in part 1 of this series. I will use it to show you how I ended up organizing the code. Then I will show a simpler script refactored into a package.&lt;/p&gt;
&lt;p&gt;Packaging your code makes it easier for others to use. It also adds more structure to your code which leads to more maintainable code. Finally it namespaces your code, &lt;em&gt;one honking great idea&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At the very basic level you create a package by putting one or more modules (.py files) inside a folder together with a __init__.py file. This file turns the folder into a package. Your code should ideally not go in that file. It is used for imports and setup.&lt;/p&gt;
&lt;h2&gt;Example 1 - Karma bot&lt;/h2&gt;
&lt;p&gt;At this moment karmabot has two packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls bot
__init__.py    karma.py    slack.py

$ ls utils
__init__.py    get_botid.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;main.py&lt;/code&gt; in the top level directory is the driving script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
...
main.py
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is not one best way to structure your code. A better grouping could be adding &lt;code&gt;slack.py&lt;/code&gt; and &lt;code&gt;get_botid.py&lt;/code&gt; to a &lt;em&gt;slack&lt;/em&gt; package. Work in progress.&lt;/p&gt;
&lt;p&gt;At least this is far better than the first version where I had all code in one big file. Unfortunately this was before my first commit so cannot retrieve it. That's why I have another example lined up ... &lt;/p&gt;
&lt;h2&gt;Example 2 - Twitter Archive Stats&lt;/h2&gt;
&lt;p&gt;This is a smaller script so better to demo. Take a minute to look at the &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/086/twitter_archive.py"&gt;original script&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This code is part of our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100 Days of PyBites, 100 Days of Code&lt;/a&gt; (days 086 and 093) which we are about to finish. Stay tuned for a review article next week!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you see all the code is lumped together in one file. There is also way too much going on under &lt;code&gt;if __name__ == '__main__'&lt;/code&gt;. This is not code we can re-use. Most scripts start like this. If you don't step back every now and then though, it becomes a mess.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A great book on refactoring I read this year is Martin Fowler's &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt;. Read it. You will write better code!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Packaging to the rescue! Here are the steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First. Don't write any code yet. Think about the various things this script tries to accomplish. What are the main responsibilities? In this case it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parses the data from &lt;code&gt;tweets.csv&lt;/code&gt;, the exported Twitter archive,&lt;/li&gt;
&lt;li&gt;parses the obtained data from 1., counting certain metrics,&lt;/li&gt;
&lt;li&gt;prints the results to stdout.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So it does 3 things. As it is a small script one package is fine. I created a folder called "archive" with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a module (Python script file) for each functionality,&lt;/li&gt;
&lt;li&gt;an __init__.py file that turns it into a package:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls archive/
__init__.py    report.py    stats.py    tweets.py
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then I started moving code around. This actually led to additional refactoring! For example the &lt;code&gt;for row in data:&lt;/code&gt; block was reduced from 25 to 15 lines using the &lt;a href="https://refactoring.com/catalog/extractMethod.html"&gt;extract method&lt;/a&gt;. The additional helper methods also made it more readable. The final code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/093"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactoring your code is a positive side effect of packaging!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One note on imports. Starting off with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
archive    main.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding the init file to the archive package, in &lt;code&gt;main.py&lt;/code&gt; I could import like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;archive.report&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's common to make this shorter by bringing the imports into the package namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.tweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.stats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;calc_stats&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.report&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I can just import from &lt;em&gt;archive&lt;/em&gt;, reducing 3 import statements to only 1: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;archive&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc_stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html"&gt;Be Pythonic: __init__.py&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;Next thing you want to do is add a &lt;code&gt;setup.py&lt;/code&gt; etc to make your code distributable. You could use a tool like &lt;a href="(https://github.com/audreyr/cookiecutter)"&gt;cookiecutter&lt;/a&gt; for this. We will explore this further in part 5. First we dive into testing and documentation in part 3 and 4.&lt;/p&gt;
&lt;p&gt;In closing here are some links for further inspection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-packaging.readthedocs.io/en/latest/"&gt;How To Package Your Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/"&gt;Python Packaging User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/small-things-about-python/lets-talk-about-python-packaging-6d84b81f1bb5"&gt;A Simple Guide for Python Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/audreyr/cookiecutter"&gt;Cookiecutter - a cli utility that creates projects from cookiecutters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="packaging"></category><category term="modules"></category><category term="init"></category><category term="imports"></category><category term="refactoring"></category><category term="karma"></category><category term="Twitter"></category></entry><entry><title>Parsing Twitter Geo Data and Mocking API Calls by Example</title><link href="https://pybit.es/twitter-api-geodata-mocking.html" rel="alternate"></link><published>2017-06-17T23:55:00+02:00</published><updated>2017-06-17T23:55:00+02:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-06-17:/twitter-api-geodata-mocking.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/anthonypjshaw/status/875275923930480641"&gt;"Is this Bob or Julian?!"&lt;/a&gt; ... yeah tweeting from our shared &lt;a href="https://twitter.com/pybites"&gt;@pybites Twitter account&lt;/a&gt; can be confusing! So I made a little script to parse the location of our tweets. Then I extended it to make it testable. I wrote a &lt;a href="https://pybit.es/codechallenge14.html"&gt;decorator&lt;/a&gt; to cache a couple of API outputs to be used with the unittest.mock patch decorator I learned about. A simple script turned into a good learning exercise.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://twitter.com/anthonypjshaw/status/875275923930480641"&gt;"Is this Bob or Julian?!"&lt;/a&gt; ... yeah tweeting from our shared &lt;a href="https://twitter.com/pybites"&gt;@pybites Twitter account&lt;/a&gt; can be confusing! So I made a little script to parse the location of our tweets. Then I extended it to make it testable. I wrote a &lt;a href="https://pybit.es/codechallenge14.html"&gt;decorator&lt;/a&gt; to cache a couple of API outputs to be used with the unittest.mock patch decorator I learned about. A simple script turned into a good learning exercise. &lt;/p&gt;
&lt;h3&gt;Practice leads to new discoveries&lt;/h3&gt;
&lt;p&gt;That's the cool thing: even a relatively easy exercise like parsing some Twitter data can grow into something more interesting when you extend your goals, in this case: "how to unittest an API?". I will do a dedicated article on mocking when I learn some more, but for now I wanted to share how I went about testing the Twitter API.&lt;/p&gt;
&lt;h3&gt;1. whotweeted.py&lt;/h3&gt;
&lt;p&gt;First of all the script: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/080/whotweeted.py"&gt;whotweeted&lt;/a&gt;: it uses &lt;code&gt;tweepy&lt;/code&gt; to get the tweet meta data from the Twitter API and parses the country code (&lt;code&gt;try tweet.place.country_code ...&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;If Spain it's me, if Australia it's Julian:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python whotweeted.py https://twitter.com/pybites/status/875677559970770944
Bob tweeted it out

$ python whotweeted.py https://twitter.com/pybites/status/875639674244444160
Julian tweeted it out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It raises some exceptions if we input or retrieve bad data. It makes the program longer but more robust: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python whotweeted.py https://twitter.com/KirkDBorne/status/876176282542891008
Not a pybites tweet

$ python whotweeted.py https://twitter.com/pybites/status/844092059988508673
Location not &lt;span class="nb"&gt;set&lt;/span&gt; on tweet

$ python whotweeted.py https://twitter.com/pybites/status/844092059988508abc
Problem getting tweet:
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;: &lt;span class="m"&gt;144&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;No status found with that ID.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that tweet location is not enabled by default, you have to turn it on, see &lt;a href="https://support.twitter.com/articles/78525"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Use mocking to test API calls&lt;/h3&gt;
&lt;p&gt;This is cool but how can we test our assumptions? We don't want to call the API each time we run our unittests. Enter &lt;a href="https://stackoverflow.com/questions/2665812/what-is-mocking"&gt;mocking&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, mocking is creating objects that simulate the behaviour of real objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I learned about the unittest.mock patch decorator which I use like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@patch.object(tweepy.API, &amp;#39;get_status&amp;#39;, return_value=get_tweet(&amp;#39;AU&amp;#39;))
...
test
...

@patch.object(tweepy.API, &amp;#39;get_status&amp;#39;, return_value=get_tweet(&amp;#39;ES&amp;#39;))
...
another test
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test script is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/081/test_whotweeted.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This imitates a &lt;code&gt;get_status&lt;/code&gt; method call of the &lt;code&gt;tweepy.API&lt;/code&gt; object. As &lt;code&gt;return_value&lt;/code&gt; I load in one of Julian's/my tweets I pickled to a data directory. Not sure if I could have simplified this by using a library like &lt;a href="https://github.com/joke2k/faker"&gt;Faker&lt;/a&gt;. As I wanted the full &lt;code&gt;tweepy&lt;/code&gt; response object I added a &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/080/whotweeted.py"&gt;cache decorator&lt;/a&gt; in &lt;code&gt;whotweeted&lt;/code&gt; to cache (pickle) response data (TODO: put this code in a separate setup script).&lt;/p&gt;
&lt;p&gt;The test script is not only much faster (no internet dependency/ latency), you also prevent repeated calls to the API (not sure for Twitter, but some APIs have pretty strict quotas).&lt;/p&gt;
&lt;p&gt;To learn more about mocking in Python, checkout the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"&gt;mock object library&lt;/a&gt; or if you use pytest see &lt;a href="https://pypi.python.org/pypi/pytest-mock"&gt;pytest-mock&lt;/a&gt;. I have to practice some more with this, I will do a follow-up article on mocking at some point ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="twitter"></category><category term="API"></category><category term="mock"></category><category term="geo"></category><category term="data"></category><category term="unittest"></category><category term="pickle"></category><category term="tweepy"></category><category term="testing"></category><category term="100days"></category></entry><entry><title>How to Write a Python Subclass</title><link href="https://pybit.es/python-subclasses.html" rel="alternate"></link><published>2017-06-17T19:37:00+02:00</published><updated>2017-06-17T19:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-06-17:/python-subclasses.html</id><summary type="html">&lt;p&gt;In this article I cover Python subclasses and inheritance using a relatable code example scenario.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an article on Python Subclasses and inheritance. Before reading on, if you haven’t done so already, I strongly recommend you check out my write up on &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s get cracking!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Python Sub-what?&lt;/h2&gt;
&lt;p&gt;Let’s say you have a class already set up. In my &lt;a href="https://pybit.es/python-classes.html"&gt;previous article on classes&lt;/a&gt;, I created what I’m going to refer to as a “single tier” Person class. That is, you use the &lt;code&gt;Person&lt;/code&gt; class to create a person object. That’s it. (I created Bob using this class. Muahaha!).&lt;/p&gt;
&lt;p&gt;What if I wanted some more depth though? Let’s use vehicles as an example. I’ll get really simplistic here.&lt;/p&gt;
&lt;p&gt;Vehicle &amp;gt; Car &amp;gt; Mercedes.&lt;/p&gt;
&lt;p&gt;See that? Now we’re talking! Multiple levels! &lt;code&gt;Vehicle&lt;/code&gt; would be the parent class, &lt;code&gt;Car&lt;/code&gt; would be the &lt;strong&gt;Subclass&lt;/strong&gt; and &lt;code&gt;Mercedes&lt;/code&gt; would be an object we create using the &lt;code&gt;Car&lt;/code&gt; subclass.&lt;/p&gt;
&lt;p&gt;Not only that, but the Mercedes we just created will &lt;em&gt;inherit&lt;/em&gt; all of the attributes and functions associated with the &lt;code&gt;Vehicle&lt;/code&gt; parent class &lt;em&gt;and&lt;/em&gt; those from the &lt;code&gt;Car&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;That is, the Mercedes will be deemed a car vehicle in that it has four wheels and a windshield as opposed to a motorbike vehicle which only has two wheels and a tiny windshield. Both the car and the motorbike are vehicles but just two different &lt;em&gt;types&lt;/em&gt; of vehicles. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Familiar Example&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Full code &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To demonstrate this in code, I wrote up a &lt;code&gt;Boss&lt;/code&gt; class. Let’s face it, we’ve all had a job at some point in our lives. It’s also more than likely that we’ve copped good and bad bosses and managers along the way.&lt;/p&gt;
&lt;p&gt;Imagine if you would, a game with a Boss in it. I can imagine myself coding up a Boss class similar to the below. I’d then use this code to create different types of Bosses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_attitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attitude&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_behaviour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;behaviour&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_face&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A full explanation of a class written like this is found in my &lt;a href="https://pybit.es/python-classes.html"&gt;Python Classes article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A boss would have a &lt;code&gt;name&lt;/code&gt;, an &lt;code&gt;attitude&lt;/code&gt;, a &lt;code&gt;behaviour&lt;/code&gt; and a &lt;code&gt;face&lt;/code&gt; (facial expression!).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Now, let’s start working on the Boss Subclasses. What kind of Bosses do we want to be able to make? How about a &lt;code&gt;GoodBoss&lt;/code&gt; and a &lt;code&gt;BadBoss&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;behaviour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What did I do here? It’s very similar to coding the parent class. Note the differences though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We start by defining the subclass &lt;code&gt;GoodBoss&lt;/code&gt;. See how it’s got “Boss” between the brackets? That’s because we’re defining a &lt;code&gt;GoodBoss&lt;/code&gt;, &lt;code&gt;Boss&lt;/code&gt; object. This will ensure the &lt;code&gt;GoodBoss&lt;/code&gt; class inherits everything from the &lt;code&gt;Boss&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the init dunder, we have to specify &lt;code&gt;self&lt;/code&gt; as well as all of the attributes defined in the parent &lt;code&gt;Boss&lt;/code&gt; class. We can then &lt;strong&gt;add&lt;/strong&gt; whatever ‘GoodBoss’ unique attributes we want, such as a “laugh” attribute (good bosses laugh right?). In this case, I’m not adding any, thus the last attribute you see is &lt;code&gt;face&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;super()&lt;/code&gt; statement is probably the most confusing. It relates to the inheritance from the base class. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;I’d be doing you a disservice trying to explain super() in one bullet point so I’m going to direct you to where I read up on it. The 3rd answer in &lt;a href="https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods"&gt;this Stack Overflow thread&lt;/a&gt; is amazing as is this &lt;a href="https://www.programiz.com/python-programming/methods/built-in/super"&gt;Programiz article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Phew! Okay. Next up, we can define some GoodBoss specific class functions. These can &lt;em&gt;only&lt;/em&gt; be used by an object created using the &lt;code&gt;GoodBoss&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def nurture_talent(self):
    #A good boss nurtures talent making employees happy!
    print(&amp;quot;The employees feel all warm and fuzzy then put their talents to good use.&amp;quot;)

def encourage(self):
    #A good boss encourages their employees!
    print(&amp;quot;The team cheers, starts shouting awesome slogans then gets back to work.&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does a good boss do? He/She nurtures talent to help employees grow! They also encourage their teams to keep them motivated!&lt;/p&gt;
&lt;p&gt;These two class functions simply print out the specified message when called. If this &lt;em&gt;were&lt;/em&gt; a game, rather than just printing, we could have these functions perform transactions like “increase &lt;code&gt;employee_happiness&lt;/code&gt; by 20 points, or something similar.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
In the same way, we can define a &lt;code&gt;BadBoss&lt;/code&gt; subclass. You can find the &lt;code&gt;BadBoss&lt;/code&gt; subclass code in our code repo &lt;a href="https://github.com/pybites/blog_code/tree/master/boss_class_code"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Who’s the Boss?!&lt;/h2&gt;
&lt;p&gt;Time for some fun! I’ll be the good boss, Bob can be the bad boss. (Sorry brother!).
The easiest way to test this out is to import the code into the interactive shell.&lt;/p&gt;
&lt;p&gt;I’ve got a file called &lt;code&gt;boss_class.py&lt;/code&gt;. I’m initiating the python shell from the same folder the script lives in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;boss_class&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Boss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GoodBoss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BadBoss&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
Once imported, we can create a “standard” &lt;code&gt;Boss&lt;/code&gt;, a &lt;code&gt;GoodBoss&lt;/code&gt; or a &lt;code&gt;BadBoss&lt;/code&gt;. Let’s start with the good one!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian = GoodBoss(&amp;quot;Julian&amp;quot;, &amp;quot;Positive&amp;quot;, &amp;quot;Sociable&amp;quot;, &amp;quot;Smiling&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
We can then use the class functions associated with both the &lt;code&gt;Boss&lt;/code&gt; class &lt;em&gt;and&lt;/em&gt; &lt;code&gt;GoodBoss&lt;/code&gt;  subclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;julian.attitude
‘Positive’

julian.get_behaviour()
‘Sociable’

julian.nurture_talent()
The employees feel all warm and fuzzy then put their talents to good use.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wish I really had that effect on people! Also, this is inheritance in action! We “inherited” the &lt;code&gt;get_behaviour&lt;/code&gt; function from the &lt;code&gt;Boss&lt;/code&gt; class! Woohoo!&lt;/p&gt;
&lt;h2&gt;Ending on a low&lt;/h2&gt;
&lt;p&gt;I know we’re on a roll but Bad Bosses always have a way of ruining things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = BadBoss(&amp;quot;Bob&amp;quot;, “Crazy”, &amp;quot;Anti-Social&amp;quot;, &amp;quot;Scowl of Hate&amp;quot;)

bob.face
&amp;#39;Scowl of Hate&amp;#39;

bob.get_attitude()
‘Crazy’

bob.hoard_praise()
The employees feel cheated and start plotting Bob&amp;#39;s demise while he stares at his own reflection.

bob.yell()
Everyone stares while Bob yells. Someone shouts, &amp;#39;Won&amp;#39;t somebody PLEASE think of the children?!’
Bob storms off, everyone comforts the victim and one person offers to arrange an &amp;#39;accident&amp;#39; for Bob.
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I love Bob (we all know he’s the best thing since sliced bread!). I also love my AWS overlords.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;How cool are classes, subclasses and inheritance?!&lt;/p&gt;
&lt;p&gt;Not only has this helped me better plan my code but it’s also allowed me to better appreciate other code. I can only imagine how many classes and subclasses exist in video games (World of Warcraft for example!).&lt;/p&gt;
&lt;p&gt;Once you get the hang of them, classes really are quite easy to use. They’re a series of set and forget templates/blueprints for you to call at any time. Oh the possibilities… Yum!&lt;/p&gt;
&lt;p&gt;Oh and speaking of templates. I created a framework/blank class and subclass template for Day 77 of our 100 days of code challenge. Check it out &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/077"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;(Psst! Did anyone get the &lt;a href="https://www.youtube.com/watch?v=RybNI0KB1bg"&gt;Simpsons Reference&lt;/a&gt;?)&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>How to Write a Python Class</title><link href="https://pybit.es/python-classes.html" rel="alternate"></link><published>2017-05-25T20:37:00+02:00</published><updated>2017-05-25T20:37:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-25:/python-classes.html</id><summary type="html">&lt;p&gt;In this post I cover learning Python classes by walking through one of our 100 days of code submissions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another week, another scary Python construct to tackle. Classes! I’m so glad we’re covering Object Oriented Programming in &lt;a href="http://pybit.es/codechallenge20.html"&gt;this week’s code challenge&lt;/a&gt;. Thanks to this challenge, I wrote my first class! In this post I explain what a Python class is (in my own words of course!) and break down my code to help  with the learning.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What is a Python Class?&lt;/h2&gt;
&lt;p&gt;It’s hard to explain. Pretty much, a class is a way of “generically” representing some sort of object. (Confusing right?) Let me try with an example.&lt;/p&gt;
&lt;p&gt;What’s something we’re all familiar with… Angry Birds! (At least, you should be if you’ve ever owned an iPhone!).&lt;/p&gt;
&lt;p&gt;Let’s go with the Pigs. In Angry Birds there are a heap of different types of Pigs to kill. Some are large, some are small. Some have hats that give them extra health and some have helmets that make them almost indestructible. What’s one thing they all have in common? They’re all Pigs!&lt;/p&gt;
&lt;p&gt;If you were to be writing the code for Angry Birds, you wouldn’t manually code up each Pig, you’d create a &lt;em&gt;Pig Class&lt;/em&gt; that you could call every time you wanted to create a Pig. When you create the Pig Class, you would specify the &lt;em&gt;attributes&lt;/em&gt; that a Pig could be created with, e.g., how much health the pig gets. &lt;/p&gt;
&lt;p&gt;I’m being simplistic but you get the idea. The base “Pigness” is there. A Pig will &lt;em&gt;always&lt;/em&gt; have a set amount of health to begin with, you’re just specifying how much it gets when you create it.&lt;/p&gt;
&lt;p&gt;I wrote a basic Person Class this week for our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt;. I’ll break it down for you to make this easier.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Person Class&lt;/h2&gt;
&lt;p&gt;The code for this example is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/054"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A person is as simple as it gets. We’re all people but we differ immensely. We’re different ages, different heights, weights, sexes, colours and so on. At the end of the day, we’re still people - which makes us a great Class use case!&lt;/p&gt;
&lt;p&gt;In the below code, I define a person class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The first line is simple. We’re &lt;em&gt;defining&lt;/em&gt; a class called “Person” and it’s an object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; is a dunder method used to say that we’re &lt;em&gt;creating&lt;/em&gt; the Person object (using the Person class definition).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the difference between &lt;em&gt;defining&lt;/em&gt; the class and &lt;em&gt;creating&lt;/em&gt; the object based on the class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the ()s we specify all of the attributes we want the Person object to be created with. Self is pretty self explanatory (pun intended!). It’s referring to itself. That is, the actual Person object that’s being created. (You’ll see in a sec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then assign these attributes to variables because they’ll contain data once a person object is created. &lt;code&gt;self.name&lt;/code&gt; for example, is then assigned “name” which will actually be a name at object creation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating A Person Object&lt;/h2&gt;
&lt;p&gt;At this point, we’ve defined a Person. A Person will have the attributes: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;gender&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s create that person!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob = Person(&amp;quot;Bob&amp;quot;, 30, 180, 80, &amp;quot;Male&amp;quot;, &amp;quot;Professional Awesome Programmer Guy&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like passing variables to a function, we pass the attributes to the Person Class. What we’re doing here is we’re assigning all of these details (in the order specified in the class) to the &lt;code&gt;bob&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Yay! We just used the &lt;code&gt;Person&lt;/code&gt; class to create &lt;code&gt;bob&lt;/code&gt;! Creepy right?!&lt;/p&gt;
&lt;p&gt;We can then do funky things like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.age
30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the &lt;code&gt;self&lt;/code&gt; stuff starts to make sense. Look back at the class creation and substitute the word &lt;code&gt;self&lt;/code&gt; with &lt;code&gt;bob&lt;/code&gt;. Get it?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Creating Class Functions&lt;/h2&gt;
&lt;p&gt;If we want, we can also create some functions specific to this class that we can call to do the same thing. Here’s another way of getting &lt;code&gt;bob&lt;/code&gt;’s job (this is specified in the class):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_job(self):
    return self.job
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then call this as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.get_job()
Professional Awesome Programmer Guy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the same output as running &lt;code&gt;bob.job&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Getting Funky with Class Functions&lt;/h2&gt;
&lt;p&gt;What’s something interesting we could do? This is where I came up with the idea of calculating a person’s BMI (Body Mass Index).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bmi(self):
    return (self.weight / ((self.height / 100) ** 2))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BMI is calculated using the equation in the above: weight (kgs) divided by height in metres squared.&lt;/p&gt;
&lt;p&gt;Once a Person object has been created, we can then check what their BMI is as per the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob.bmi()
24.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty cool right?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;When Would you use a Class?&lt;/h2&gt;
&lt;p&gt;I’d say you’d want to use them any time you’re dealing with repetitive data sets.&lt;/p&gt;
&lt;p&gt;For example, if you were dealing with data from a movie database you could make a Movie Class because we know that each movie is going to have the same attributes: title, duration, year, director and so on.&lt;/p&gt;
&lt;p&gt;You could use them for anything really.&lt;/p&gt;
&lt;p&gt;Consider a complaints system at a company. A complaint would be structured the same way every time: ID, Customer Name, Affected Service, Date, Complaint Text.&lt;/p&gt;
&lt;p&gt;The best part is that by creating your own class functions you can do all sorts of weird and wonderful things with the data. Imagine a &lt;code&gt;complaint.email()&lt;/code&gt; function. It could email off the complaint to the correct department if it was deemed legitimate!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Classes do take a little getting used to, especially when you start playing with subclasses (Code Challenge 20!) but they’re so great and totally necessary if you’re diving into Object Oriented Programming!&lt;/p&gt;
&lt;p&gt;My recommendation is to open up an editor and code up a quick and dirty class right now:&lt;/p&gt;
&lt;p&gt;Create a car class with attributes: Manufacturer, Model, Year of Manufacturing, Petrol Type, Mileage, Odometer. Then create some cars and play with their data! Print them to screen, add them to a database, whatever. Just get coding!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="classes"></category><category term="beginners"></category></entry><entry><title>How to Create Your Own Steam Game Release Notifier</title><link href="https://pybit.es/steam-notifier.html" rel="alternate"></link><published>2017-05-19T19:53:00+02:00</published><updated>2017-05-19T19:53:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-19:/steam-notifier.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you’ve been following our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Days of Code Challenge&lt;/a&gt; you’ll have noticed that I’ve been contributing snippets of code relating to the &lt;a href="http://store.steampowered.com/"&gt;Steam&lt;/a&gt; gaming platform and store.&lt;/p&gt;
&lt;p&gt;When people ask us what the best way to learn Python is, we always tell them to get their hands dirty and to &lt;a href="http://pybit.es/learn-by-doing.html"&gt;learn by doing&lt;/a&gt;. Idea wise, we tell people to scratch their own itch. That’s exactly what I’ve been doing between code challenges, work and family life. I made my own Steam Game Notifier that emails me the latest Steam game releases!&lt;/p&gt;
&lt;p&gt;Steam does have its own RSS feed which I could have just loaded in an RSS app but there’s no fun in that! I wanted the challenge of coding up a solution myself. This post will break down the code and describe the solution.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/tree/master/steam_notifier"&gt;Full code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Splitting the Code Up&lt;/h2&gt;
&lt;p&gt;Looking at the above code link you’ll notice there are four Python scripts that make up the program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;email_list.py:&lt;/strong&gt; Stores the email addresses of recipients for this tool.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;emailer.py:&lt;/strong&gt; The script that sends the email. It reads in the emails stored in email_list.py.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull_xml.py:&lt;/strong&gt; This script pulls down the newreleases.xml file from the Steam servers and saves it to the local directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xml_steam_scraper.py:&lt;/strong&gt; The main script. This parses the XML file and manipulates the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;pull_xml.py&lt;/h2&gt;
&lt;p&gt;We’ll attack this in executional order. First up is &lt;code&gt;pull_xml.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a very simple &lt;code&gt;requests&lt;/code&gt; pull. It requests the newreleases.xml file from Steam and saves the contents to the local directory. The main thing to note in the code is the &lt;code&gt;wb&lt;/code&gt; open mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;newreleases.xml&amp;#39;, &amp;#39;wb&amp;#39;) as f:
    f.write(r.content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;wb&lt;/code&gt; (write binary) mode is required to correctly write the XML data to a local file called new releases.xml.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;xml_steam_scraper.py&lt;/h2&gt;
&lt;p&gt;Now for the meat. I’ll cover the noteworthy parts as it should hopefully help anyone learning Python.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Game = namedtuple(&amp;#39;Game&amp;#39;, &amp;#39;title url&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a &lt;code&gt;namedtuple&lt;/code&gt; from the &lt;code&gt;collections&lt;/code&gt; module. Read this &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;docs.python doc&lt;/a&gt; if you’re new to these. Essentially we’re creating a tuple subclass named &lt;code&gt;Game&lt;/code&gt;. It has two fields associated with it: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; (more on this later).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_create_db():
    with sqlite3.connect(DB_NAME) as connection:
        c = connection.cursor()
        try:
            c.execute(&amp;quot;&amp;quot;&amp;quot;CREATE TABLE new_steam_games
                (Name TEXT, Link TEXT, Emailed TEXT)
                    &amp;quot;&amp;quot;&amp;quot;)        
        except:
            pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This entire function handles the database creation we’re using for this program. The &lt;code&gt;sqlite&lt;/code&gt; code will create the DB &lt;code&gt;steam_games.db&lt;/code&gt; (as per the declaration at the top of the code) if the DB doesn’t exist. If it does exist, it just continues on.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.execute(&amp;quot;SELECT Name from new_steam_games&amp;quot;)
db_games_list = c.fetchall()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the &lt;code&gt;pull_db_data()&lt;/code&gt; function you’ll see this line. This code will pull the &lt;code&gt;Name&lt;/code&gt; data from the &lt;code&gt;steam_games.db&lt;/code&gt; file and populate the &lt;code&gt;db_games_list&lt;/code&gt; list with the data.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Ignore my intentionally awesome function names
def parse_that_feed_baby():
    feed_list = []
    feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        game_data = Game(title=entry[&amp;#39;title&amp;#39;], url=entry[&amp;#39;link&amp;#39;])
        feed_list.append(game_data)
    return feed_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I use &lt;code&gt;feedparser&lt;/code&gt; to interrogate the &lt;code&gt;newreleases.xml&lt;/code&gt; file. We also see the usage of that &lt;code&gt;namedtuple&lt;/code&gt; &lt;code&gt;Game&lt;/code&gt;. The fields we specified earlier are being assigned “entries” pulled from the XML file with feedparser.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; field is given the XML “title” of the game; the &lt;code&gt;url&lt;/code&gt; field is given the link to the game.&lt;/p&gt;
&lt;p&gt;This is done for every individual “entry” (game) in the XML file using the &lt;code&gt;for&lt;/code&gt; loop. It’s all appended to &lt;code&gt;feed_list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def check_for_new(feed_list, db_games):
    new_games_list = []
    for data in feed_list:
        if (data.title,) not in db_games:
            new_games_list.append(data)
    return new_games_list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function creates an empty list called &lt;code&gt;new_games_list&lt;/code&gt;. It then checks whether &lt;code&gt;data.title&lt;/code&gt; (&lt;code&gt;.title&lt;/code&gt; being the field from the namedtuple) is &lt;strong&gt;not&lt;/strong&gt; in the existing games database &lt;code&gt;db_games&lt;/code&gt;. I’m essentially doing a name match. Eg: Does the game name from the feed list exist in the list of games already in the database.&lt;/p&gt;
&lt;p&gt;If the name &lt;strong&gt;isn’t&lt;/strong&gt; in the existing DB, then we add it to the &lt;code&gt;new_games_list&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.executemany(&amp;quot;INSERT INTO new_steam_games VALUES (?, ?, 0)&amp;quot;, new_games)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, at the end of the &lt;code&gt;main()&lt;/code&gt; function, we add the &lt;strong&gt;new games&lt;/strong&gt; to the DB. The 2x ?s are placeholders for the data in the &lt;code&gt;new_games&lt;/code&gt; list. The 0 at the end will be explained in a moment.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;DB Table Layout and Emailed Flag&lt;/h2&gt;
&lt;p&gt;The DB we create at the start of the script has 3x columns: &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Link&lt;/code&gt;, and &lt;code&gt;Emailed&lt;/code&gt;, all of which are &lt;code&gt;TEXT&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; are self explanatory but why &lt;code&gt;Emailed&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;I needed a way to determine whether a row (game) had been emailed out already. I decided to go with a boolean flag, i.e., Yes/No, True/False, 0/1.&lt;/p&gt;
&lt;p&gt;When new games are added to the DB at the end of the code, they’re added with a 0 in the 3rd column (&lt;code&gt;Emailed&lt;/code&gt;). This indicates that they are new and have &lt;strong&gt;not&lt;/strong&gt; been emailed.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;emailer.py&lt;/h2&gt;
&lt;p&gt;I’ve covered sending advanced emails using Python MIME in a &lt;a href="http://pybit.es/python-MIME.html"&gt;previous article&lt;/a&gt; so have a read through of that for the basics if you’re not sure what you’re looking at here.&lt;/p&gt;
&lt;p&gt;The important code is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with sqlite3.connect(DATA_FILE) as connection:
    c = connection.cursor()
    c.execute(&amp;quot;SELECT Name, Link FROM new_steam_games WHERE Emailed=&amp;#39;0&amp;#39;&amp;quot;)
    for item in c.fetchall():
        body += item[0] + &amp;#39;: &amp;#39; + item[1] + &amp;#39;\n&amp;#39;
    c.execute(&amp;quot;UPDATE new_steam_games SET Emailed=&amp;#39;1&amp;#39;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this code I grab the data from the database that has a “0” in the &lt;code&gt;Emailed&lt;/code&gt; column. (Pulling the new games!).&lt;/p&gt;
&lt;p&gt;I then add the name, &lt;code&gt;item[0]&lt;/code&gt;, and link, &lt;code&gt;item[1]&lt;/code&gt; to the body of the email using a &lt;code&gt;for&lt;/code&gt; loop. This will add the new games one by one.&lt;/p&gt;
&lt;p&gt;After this, the games are then flagged as being emailed by changing the &lt;code&gt;Emailed&lt;/code&gt; flag to “1”. This will ensure that the next time the emailer is run, the same games don’t get emailed again.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Automate it!&lt;/h2&gt;
&lt;p&gt;Done! What next? Add it to a cron job and automate the sucker!&lt;/p&gt;
&lt;p&gt;I’ve got the pull, the feedparse and emailer all running on separate cron jobs, one after the other (2 mins apart).&lt;/p&gt;
&lt;p&gt;The pull writes over newreleases.xml with fresh data; feedparser updates the DB with fresh data (if any) and the emailer sends out any new games.&lt;/p&gt;
&lt;p&gt;An example crontab entry could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;30 20 * * * cd /opt/development/steamscraper &amp;amp;&amp;amp; /usr/bin/python3 pull_xml.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;I’m seeing plenty of room for improvement just writing this article! The curse of the programmer!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What happens if there isn’t a new game to email out? Does it break or just send an empty email? (No idea at the time of writing!). The script should either not send an email or (easier) just email a “No new games” message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the xml_steam_scraper.py script I access the sqlite DB using a &lt;code&gt;with&lt;/code&gt; statement &lt;strong&gt;three&lt;/strong&gt; times. This seems unpythonic to me. I need to figure out a better way to talk to the DB throughout the script. I could do a &lt;code&gt;connect&lt;/code&gt; at the start and then a &lt;code&gt;close&lt;/code&gt; at the end of &lt;code&gt;main()&lt;/code&gt; but is it Pythonic to leave the DB connection open for the entirety of the script?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could have some nicer text (a header maybe?) in the email rather than just a plain text dump of the Names/URLs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What happens if the emailer fails &lt;em&gt;after&lt;/em&gt; I’ve already changed the &lt;code&gt;Emailed&lt;/code&gt; DB flag to 1? The new games will &lt;strong&gt;not&lt;/strong&gt; have been mailed out but the DB will have potentially been updated to reflect that they have been. I could probably move the update to the end of the script to avoid this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create funnier function names (just on my copy of the code of course!).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;I’m stoked that this thing actually WORKS! And boy did I learn a lot! In this program alone I’ve tackled so many different concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feedparser (web scraping)&lt;/li&gt;
&lt;li&gt;sqlite (persistent storage)&lt;/li&gt;
&lt;li&gt;with statements&lt;/li&gt;
&lt;li&gt;smtplib (emailers)&lt;/li&gt;
&lt;li&gt;requests (more web scraping)&lt;/li&gt;
&lt;li&gt;collections (namedtuples)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The biggest hurdle for me was figuring out how to store the data in the DB and determine whether an entry had been emailed or not. That took me &lt;em&gt;ages&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Very happy with the final result, regardless of its Pythonicness (roll with the word). I’ll keep refactoring as I go but for now I’ll enjoy the satisfaction of automatically emailing myself games to buy!&lt;/p&gt;
&lt;p&gt;If you have any feedback or improvements &lt;em&gt;please&lt;/em&gt; let me know. It’s the best way to learn!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="sqlite3"></category><category term="xml"></category><category term="email"></category><category term="automation"></category><category term="tools"></category><category term="feedparser"></category><category term="game"></category></entry><entry><title>How to Parse Common Data Formats in Python</title><link href="https://pybit.es/parsing-data.html" rel="alternate"></link><published>2017-05-16T20:37:00+02:00</published><updated>2017-05-16T20:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-16:/parsing-data.html</id><summary type="html">&lt;p&gt;In this post we demonstrate ways in which you can parse common data formats used in Python.&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the biggest jumps you make in your Python learning is when you start dealing with external data. &lt;/p&gt;
&lt;p&gt;With this post we wanted to demonstrate a few ways you can work with the more common data formats. Why? Because it’s a big deal when you’re starting out! Furthermore, unless you do it often enough it’s easy to forget how so bookmark this baby and reference it!&lt;/p&gt;
&lt;p&gt;The links below are to articles and scripts we’ve actually written as well as to external resources we’ve found helpful.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;1. CSV&lt;/h2&gt;
&lt;p&gt;If you’re going to play with CSV files, &lt;code&gt;DictReader&lt;/code&gt; is your friend. It converts each row into an &lt;code&gt;OrderedDict&lt;/code&gt; (Hallelujah!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reading the contents of a CSV file:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/001/pytip.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for entry in csv.DictReader(f, fieldnames=FIELDS):
    yield entry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Opening and reading the CSV using a &lt;code&gt;with&lt;/code&gt; statement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def read_csv(cf=CSV_FILE):
    with open(cf, &amp;#39;r&amp;#39;) as csvfile:
        return list(csv.DictReader(csvfile))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. JSON&lt;/h2&gt;
&lt;p&gt;JSON is a must these days, especially if you want to work with APIs. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple read of JSON data pulled down by &lt;code&gt;requests&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/027/warcraft_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = json.loads(r.text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;One of our first articles used a &lt;code&gt;with&lt;/code&gt; statement to load in JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/kindle-json-to-html.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_json(json_file):    
    with open(json_file) as f:        
        return json.loads(f.read())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Our Challenge 07 review used &lt;code&gt;yield&lt;/code&gt; to return the JSON data:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge07_review.html"&gt;Article/Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Note the &lt;code&gt;.json()&lt;/code&gt; method on &lt;code&gt;requests.get&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/weather_compare/blob/master/weather.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = requests.get(API_URL.format(city, API_KEY)).json()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;dump&lt;/code&gt; to write to a file as per this &lt;a href="http://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file-in-python"&gt;Stack Overflow question&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. SQLite&lt;/h2&gt;
&lt;p&gt;We’ve learned to love SQLite recently and have found ourselves using it all the time. It’s worth picking up as it’s such an easy and great way of getting a persistent DB!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent use to convert a CSV of movies to an &lt;code&gt;sqlite&lt;/code&gt; DB:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/030/movies.py"&gt;Code Link&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href="https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch06s08.html"&gt;Python Cookbook chapter&lt;/a&gt; details working with Relational Databases (&lt;a href="http://amzn.to/2qMGNaN"&gt;Amazon Link&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We enjoyed this thorough &lt;code&gt;sqlite&lt;/code&gt; &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;Python tutorial&lt;/a&gt; by Sebastian Raschka too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4. XML&lt;/h2&gt;
&lt;p&gt;XML! The data format of choice for RSS feeds. Can be a bit troublesome at times but always worth the effort.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example of using &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; to parse the Safari RSS feed:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/017/safari.py"&gt;Code Link&lt;/a&gt; - Worth checking out the full code but the gist of it is…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in doc.iterfind(&amp;#39;channel/item&amp;#39;):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;strong&gt;Using &lt;code&gt;feedparser&lt;/code&gt; to pull specific XML tags and add to a list:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/045/xml_steam_scraper.py"&gt;Code Link&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feed = feedparser.parse(FEED_FILE)
    for entry in feed[&amp;#39;entries&amp;#39;]:
        Game = (entry[&amp;#39;title&amp;#39;], entry[&amp;#39;link&amp;#39;])
            games_list.append(Game)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Challenge Solutions&lt;/h2&gt;
&lt;p&gt;We’ve had numerous challenges over the past few months where the solutions involved these data formats. Here are a few of the noteworthy ones:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge04.html"&gt;Code Challenge 04&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/6gvF0b"&gt;Read CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/udmLRm"&gt;Write CSV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;a href="http://pybit.es/codechallenge07.html"&gt;Code Challenge 07&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/lsv2MJ"&gt;Dump tweet JSON&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="goo.gl/VjEukO"&gt;Load tweets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pybit.es/codechallenge17_review.html"&gt;Code Challenge 17 Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was definitely a great challenge. Check out the multiple community contributions for some examples of using &lt;code&gt;sqlite&lt;/code&gt; and XML in functional scripts written by your fellow Pythonistas.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Learn By Doing&lt;/h2&gt;
&lt;p&gt;Now that you have the info, as we said in our &lt;a href="http://pybit.es/learn-by-doing.html"&gt;Learn By Doing article&lt;/a&gt;, open up a vim session and get coding!&lt;/p&gt;
&lt;p&gt;One awesome, shameless plug of a way to do this would be to come up with a solution for &lt;a href="http://pybit.es/codechallenge19.html"&gt;Code Challenge 19&lt;/a&gt;. Playing with an API means you’ll more than likely need to use quite a few of these formats.&lt;/p&gt;
&lt;p&gt;We’d love to hear if you have any Pythonic tips on using these formats too so leave a comment!&lt;/p&gt;
&lt;p&gt;And as always, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian and Bob&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="csv"></category><category term="sqlite3"></category><category term="json"></category><category term="xml"></category></entry><entry><title>Learning Python by Building a Wisdom Quotes App</title><link href="https://pybit.es/guest-learning-apis.html" rel="alternate"></link><published>2017-05-09T14:10:00+02:00</published><updated>2017-05-09T14:10:00+02:00</updated><author><name>Dante</name></author><id>tag:pybit.es,2017-05-09:/guest-learning-apis.html</id><summary type="html">&lt;p&gt;In this guest post Dante tells us about his &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;Wisdom of the Ages&lt;/a&gt; app he built for &lt;a href="http://pybit.es/codechallenge16.html"&gt;PyBites code challenge 16&lt;/a&gt; (reviewed &lt;a href="http://pybit.es/codechallenge16_review.html"&gt;here&lt;/a&gt;). The best way to learn Python is to build something and we are proud of our community achieving just that.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this guest post Dante tells us about his &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;Wisdom of the Ages&lt;/a&gt; app he built for &lt;a href="http://pybit.es/codechallenge16.html"&gt;PyBites code challenge 16&lt;/a&gt; (reviewed &lt;a href="http://pybit.es/codechallenge16_review.html"&gt;here&lt;/a&gt;). The best way to learn Python is to build something and we are proud of our community achieving just that. &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Query Your Favorite API Challenge&lt;/h2&gt;
&lt;p&gt;Only recently I started following PyBites, but I really liked the idea of the &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt;, so when I saw the opportunity to put some of my knowledge in practice, I took it without thinking twice.&lt;/p&gt;
&lt;p&gt;As I like to challenge myself and up the bets, I decided I was going to query one API and then query another one using somehow the results of the first. Since I had some experience querying the Wikipedia API, I chose it then googled up for free APIs on the internet to use. I came by &lt;a href="http://forismatic.com/en/api/"&gt;an API to get random inspirational quotes&lt;/a&gt;, and the idea struck me: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple website that displays a random inspirational quote, with its author's biography as an addendum. Wikipedia could provide those biographies!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;App implementation&lt;/h3&gt;
&lt;p&gt;I quickly sketched the app using the well-known 'flask' and 'requests' modules, with a simple jinja2 template to display three variables: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The quote, &lt;/li&gt;
&lt;li&gt;the quote's author, and &lt;/li&gt;
&lt;li&gt;the quote's author's biography.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Error handling&lt;/h3&gt;
&lt;p&gt;After the core functionality was done, I started to iron out some bugs by adding try/except blocks for expected errors: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the quotes API sometimes returned malformed JSON, &lt;/li&gt;
&lt;li&gt;I couldn't grab a biography for an anonymous author.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making it pretty&lt;/h2&gt;
&lt;p&gt;Done with the 'insides' of my machine, I wanted to make it look pretty on the outside too, so I used my google-fu to search for bootstrap templates and themes, found one I liked (&lt;a href="https://bootstraptaste.com/free-one-page-bootstrap-template-amoeba/"&gt;Amoeba&lt;/a&gt;) and after cutting down all the things I didn't need and downloading a favicon, my first iteration of &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;&lt;strong&gt;Wisdom of the Ages&lt;/strong&gt;&lt;/a&gt; was finished:&lt;/p&gt;
&lt;p&gt;&lt;img alt="wisdom of ages design" src="https://pybit.es/images/pcc16_dseptem2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Experimenting&lt;/h2&gt;
&lt;p&gt;But I wanted more! Recently I had heard about a Python module called &lt;a href="https://github.com/r0x0r/pywebview"&gt;pywebview&lt;/a&gt;, which displays a barebones browser as an application to the user. I figured I could make the user of my script choose between the 'embedded' simple view of the website flask created and her own browser, but eventually dropped the functionality because it made everything more complicated (I even had to use threading to run code after starting the flask app website) with no real benefit.&lt;/p&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Finally, after some back-and-forth with PyBites (thanks for the feedback, again!), I refactored the code for readability, made it more pythonic, added an "another quote" button that refreshes the website on click and last but not least, prepared the app to display an 'Internal server error' if the quotes API is down or the user has no internet connection.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really enjoyed this experience and I'm looking forward to more challenges! Peer-reviewing code is a joy I don't usually get to experience. Thanks to the folks at PyBites and have fun with your coding!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Dante Septem&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dante describes himself as "a Pythonista in the making, digital magician and complete fool". You can follow him &lt;a href="https://github.com/dseptem"&gt;on Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="challenges"></category><category term="learning"></category><category term="guest"></category><category term="wikipedia"></category><category term="API"></category><category term="code review"></category><category term="flask"></category><category term="requests"></category><category term="quotes"></category><category term="forismatic"></category></entry><entry><title>How to Download an XML File with Python</title><link href="https://pybit.es/download-xml-file.html" rel="alternate"></link><published>2017-05-04T20:46:00+02:00</published><updated>2017-05-04T20:46:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-05-04:/download-xml-file.html</id><summary type="html">&lt;p&gt;In this post I detail how to download an xml file to your OS and why it’s not as simple as you’d think&lt;/p&gt;</summary><content type="html">&lt;p&gt;Really? An article on downloading and saving an XML file? “Just use requests mate!”, I hear you all saying. Well, it’s not that simple. At least, it wasn’t as straight forward as that for a beginner like me. Here’s why.&lt;/p&gt;
&lt;h2&gt;Parsing is Different to Saving&lt;/h2&gt;
&lt;p&gt;For sure, experts and beginners alike will have used requests to pull down the contents of a web page. Generally it’s for the purpose of parsing or scraping that page for specific data elements.&lt;/p&gt;
&lt;p&gt;What if you wanted to actually &lt;em&gt;save&lt;/em&gt; that web page to your local drive? Things get slightly different. You’re no longer just reading a text rendered version of the page, you’re trying to save the actual page in its original state.&lt;/p&gt;
&lt;p&gt;This is what I found slightly confusing. I wasn’t dealing with a &lt;code&gt;text = r.text&lt;/code&gt; situation anymore, I was trying to maintain the original format of the page as well, tabs and all.&lt;/p&gt;
&lt;h2&gt;Why XML?&lt;/h2&gt;
&lt;p&gt;I’m talking XML here because I was/am trying to download the actual XML file for an RSS feed I wanted to parse offline. For those of you playing at home, this is for our &lt;a href="http://pybit.es/codechallenge17.html"&gt;PyBites Code Challenge 17&lt;/a&gt; (hint hint!).&lt;/p&gt;
&lt;h2&gt;Why Download when you can just Parse the feed itself?&lt;/h2&gt;
&lt;p&gt;Good question! It’s about best practice and just being nice.&lt;/p&gt;
&lt;p&gt;In the case of our code challenge (PCC17), how many times are you going to run your Py script while building the app to test if it works? Every time you run that script with your &lt;code&gt;requests.get&lt;/code&gt; code in place, you’re making a call to the target web server.&lt;/p&gt;
&lt;p&gt;This generates unnecessary traffic and load on that server which is a pretty crappy thing to do!&lt;/p&gt;
&lt;p&gt;The nicer and Pythonic thing to do is to have a separate script that does the request once and saves the required data to a local file. Your primary scraping or analysis script then references the local file.&lt;/p&gt;
&lt;h2&gt;Get to the code already!&lt;/h2&gt;
&lt;p&gt;Alright, check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://insert.your/feed/here.xml&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It all looks pretty familiar so I won’t go into detail on the usual suspects.&lt;/p&gt;
&lt;p&gt;What I’m doing in this code is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pulling the xml &lt;em&gt;content&lt;/em&gt; down using &lt;code&gt;requests.get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using a &lt;code&gt;with&lt;/code&gt; statement to create a file called &lt;code&gt;feed.xml&lt;/code&gt;. (If the file exists it’ll be overwritten).&lt;/li&gt;
&lt;li&gt;Writing the &lt;strong&gt;contents&lt;/strong&gt; of the requests response into the file &lt;code&gt;feed.xml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s why it was a learning exercise for me:&lt;/p&gt;
&lt;p&gt;As I open/create the feed.xml file, I’m using the “Mode” &lt;code&gt;wb&lt;/code&gt;. This means I’m opening the file for writing purposes but &lt;strong&gt;can only write to it in a binary format&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you fail to choose the binary mode then you’ll get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Traceback (most recent call last):
  File &amp;quot;pull_xml.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    file.write(response.content)
TypeError: write() argument must be str, not bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This confused the hell out of me and resulted in me wasting time trying to convert the requests response data to different formats or writing to the external file one line at a time (which meant I lost formatting anyway!).&lt;/p&gt;
&lt;p&gt;The binary mode is required to write the actual content of the XML page to your external file in the original format.&lt;/p&gt;
&lt;p&gt;Speaking of content. Notice in the final &lt;code&gt;write&lt;/code&gt; statement I’m using &lt;code&gt;response.content&lt;/code&gt;? Have any idea how long I spent thinking my use of the usual &lt;code&gt;response.text&lt;/code&gt; was the only way to do this? Too damn long!&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;content&lt;/code&gt; option allows you to dump the entire XML file (as is) into your own local XML file. Brilliant!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note for beginners: If you’re reading other people’s code, be prepared to see &lt;code&gt;with&lt;/code&gt; statements where files are opened &lt;code&gt;as f&lt;/code&gt;. The same applies to the &lt;code&gt;requests&lt;/code&gt; module. The line will generally read &lt;code&gt;r = requests.get(URL)&lt;/code&gt;. I’ve used full form names for the sake of this article thus the words &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;response&lt;/em&gt; in my code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is one of those things that we all just get used to doing. Pulling a feed down and saving it to a file is something Bob has done a thousand times so no longer has to give it any extra thought.&lt;/p&gt;
&lt;p&gt;For me, however, this took an entire night* of playing around because I’d never done it before and was assuming (silly me!) that the parsing code I've been using &lt;code&gt;requests&lt;/code&gt; for was all I needed.&lt;/p&gt;
&lt;p&gt;I also found that I had to scour a ton of StackOverflow posts and other documentation just to get my head wrapped around this concept correctly.&lt;/p&gt;
&lt;p&gt;So with this finally cleared up, it’s time to go attack some feeds!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Julian&lt;/p&gt;
&lt;p&gt;*Not really an entire night. I do need my beauty sleep!&lt;/p&gt;</content><category term="tutorial"></category><category term="learning"></category><category term="webscraping"></category><category term="requests"></category><category term="xml"></category><category term="beginners"></category><category term="python"></category></entry><entry><title>The making of my Task Manager App for the PyBites Code Challenge</title><link href="https://pybit.es/guest-making-of-task-manager.html" rel="alternate"></link><published>2017-05-02T13:00:00+02:00</published><updated>2017-05-02T13:00:00+02:00</updated><author><name>Martin</name></author><id>tag:pybit.es,2017-05-02:/guest-making-of-task-manager.html</id><summary type="html">&lt;p&gt;As a relatively newcomer to the Python scene I've come to realize that the best way to learn is to actually participate in coding challenges. This has helped to push me out of my comfort zone.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a relatively newcomer to the Python scene I've come to realize that the best way to learn is to actually participate in coding challenges. This has helped to push me out of my comfort zone. If you're in the same boat as me, I hope that this writeup will motivate you to do the same.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clamytoe's Task Manager" src="https://pybit.es/images/ctm.png"&gt;&lt;/p&gt;
&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;To be honest, I was already working on a command line version of a task manger. I basically wanted a way to track my achievements throughout the year so that I could readily have them available when it came time for my "self review". I forget what I did this morning, so having this would be a tremendous asset. I figured I could just convert my code to work with Flask, easy right? Boy was I wrong!&lt;/p&gt;
&lt;p&gt;If you're interested in learning how I approached this challenge, read on.&lt;/p&gt;
&lt;h2&gt;Flask&lt;/h2&gt;
&lt;p&gt;The first thing I did was to head on over to &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;'s website and check out their &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;documentation&lt;/a&gt;. I specifically found their &lt;a href="http://flask.pocoo.org/docs/0.12/quickstart/"&gt;Quickstart&lt;/a&gt; guide to be an invaluable resource and I went back to it many times. I've been trying to keep up with developments with HTML5, CSS3, and JavaScript, so I knew that the easiest route would be to build this app on top of &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, so that's where I headed to next.&lt;/p&gt;
&lt;h2&gt;Bootstrap&lt;/h2&gt;
&lt;p&gt;The first thing I did was to make my way to their &lt;a href="http://getbootstrap.com/getting-started/"&gt;Getting Started&lt;/a&gt; page. Out of all their choices on implementing their framework, I opted to go with the CDN option to avoid having to upload too many files to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;. Unfortunately, my Internet connection at home is very limited, so going this route would mean having to deal with slow response times, but it would be worth it for everyone else.&lt;/p&gt;
&lt;p&gt;I headed straight for their &lt;a href="http://getbootstrap.com/getting-started/#examples"&gt;Examples&lt;/a&gt; page to find me a template that was close enough to what I was looking for. Modifying a template would definitely speedup the development of this app. If you're new to Bootstrap, like I was, their &lt;a href="http://getbootstrap.com/components/"&gt;Components&lt;/a&gt; page was another one of those resources that made this a whole lot easier. I chose to go with their &lt;a href="http://getbootstrap.com/examples/navbar-static-top/"&gt;Static top navbar&lt;/a&gt; template.&lt;/p&gt;
&lt;h2&gt;HTML &amp;amp; CSS&lt;/h2&gt;
&lt;p&gt;The next thing I did was to get the template up and running locally. I copied the code to my template and replaced the Bootstrap calls with the ones for the CDN. Where other files were being called, I just downloaded those and stuck them in the static folder of my project. I started with a simple "Hello World!" page just to have something loaded.&lt;/p&gt;
&lt;p&gt;From there I started to customize the form that I would need and to add the table to display the results. Being a bit rusty, I headed over to &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; and went over their tutorials on &lt;a href="https://www.w3schools.com/html/html_forms.asp"&gt;Forms&lt;/a&gt;, &lt;a href="https://www.w3schools.com/html/html_tables.asp"&gt;Tables&lt;/a&gt;, and &lt;a href="https://www.w3schools.com/css/default.asp"&gt;CSS&lt;/a&gt; formating. To my surprise, they also had a section on &lt;a href="https://www.w3schools.com/bootstrap/default.asp"&gt;Bootstrap&lt;/a&gt;, but I found the examples on Bootstrap's page more useful.&lt;/p&gt;
&lt;h2&gt;Template&lt;/h2&gt;
&lt;p&gt;Now that I had my page up and running, it was time to get things rolling! I should have headed over to &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt;'s page and checked out their
&lt;a href="http://jinja.pocoo.org/docs/2.9/"&gt;documentation&lt;/a&gt;, but all I went off of was the basic examples on Flask's site. My goal was to make this a one page application, so the examples there were all I needed.&lt;/p&gt;
&lt;p&gt;Creating the template was pretty straight forward. I had it mocked up and coded without much trouble. The hardest part was working within the confines of Bootstrap and trying to get it to do what I wanted. Once I was happy with that, it was time to actually start writing some Python code!&lt;/p&gt;
&lt;h2&gt;Flask-SQLAlchemy&lt;/h2&gt;
&lt;p&gt;With my CLI task list, I had used &lt;a href="https://docs.python.org/2/library/sqlite3.html"&gt;slqlite3&lt;/a&gt;, but I wasn't too happy with all of the calls that I had to make each time that I wanted to modify or pull data from the database. On top of that, I had to actually write out the &lt;a href="https://www.w3schools.com/sql/default.asp"&gt;SQL&lt;/a&gt; commands as well. I had heard that &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; was the tool to use, so I figured that this would be the perfect time to get acquainted with it.&lt;/p&gt;
&lt;p&gt;Unfortunately, their docs were pretty daunting. &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; to the rescue! Like all of the other great tools that I've talked about thus far, their &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/quickstart/"&gt;documentation&lt;/a&gt; made this a breeze. I spent a lot of time going over those pages. When I couldn't find what I was looking for, &lt;a href="http://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; and &lt;a href="http://stackexchange.com/"&gt;Stack Exchange&lt;/a&gt; via &lt;a href="https://www.startpage.com/eng/?"&gt;StartPage&lt;/a&gt; searches came through for me. I found a lot of differing "opinions" on the proper way of doing things, but none would actually work for me. A bit of trial and error and actually dropping into the Python interpreter were key.&lt;/p&gt;
&lt;p&gt;I recently discovered &lt;a href="https://pypi.python.org/pypi/pdir2"&gt;pdir2&lt;/a&gt;, which has been great for helping with discovering what actual commands I can use with the modules. Python's default &lt;code&gt;dir()&lt;/code&gt; works as well, but I find the formatting and coloring of &lt;code&gt;pdir()&lt;/code&gt; a lot easier to consume. I didn't add it to the &lt;em&gt;requirements.txt&lt;/em&gt; because it's not needed for running the application. Another great tool that needs to be mentioned is the &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm IDE&lt;/a&gt;. Its code completion came in really handy while working with SQLAlchemy.&lt;/p&gt;
&lt;h2&gt;Setbacks&lt;/h2&gt;
&lt;p&gt;I did run into some trouble trying to get Python &lt;code&gt;datetime&lt;/code&gt; objects through SQLAlchemy, so I ended up discarding my accomplishment task tracking app idea and just going with a simple Todo Task Manager: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Original UI" src="https://pybit.es/images/old-ui.png"&gt;&lt;/p&gt;
&lt;p&gt;Even though I had to "dumb it down" a bit, I still tried to make it as easy as possible to use. With it you can do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create separate Projects&lt;/li&gt;
&lt;li&gt;Add tasks to each Project&lt;/li&gt;
&lt;li&gt;Easily navigate between Projects&lt;/li&gt;
&lt;li&gt;Remembers which Project you used last&lt;/li&gt;
&lt;li&gt;One button click task status changes&lt;/li&gt;
&lt;li&gt;from Open to Close&lt;/li&gt;
&lt;li&gt;from Close to Open&lt;/li&gt;
&lt;li&gt;Remove all tasks from a Project&lt;/li&gt;
&lt;li&gt;Remove a single task at a time&lt;/li&gt;
&lt;li&gt;Remove Projects along with any tasks assigned to it&lt;/li&gt;
&lt;li&gt;Able to add tasks that are initially marked as Close&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later on, if I have the motivation and time, I'd like to add the ability to select all tasks and perform operations on them with a single button click.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall it was a great experience and I learned a lot from it. I'd recommend anyone looking to learn more about Python to take the time and participate &lt;a href="http://pybit.es/pages/challenges.html"&gt;in PyBites code challenges&lt;/a&gt;. It's one thing to read about how to do something and another one altogether having to actually implement it.&lt;/p&gt;
&lt;h2&gt;PyBites addition&lt;/h2&gt;
&lt;p&gt;Martin submitted this cool project for our &lt;a href="http://pybit.es/codechallenge15.html"&gt;Code Challenge 15 - Create a Simple Flask App&lt;/a&gt; which we reviewed &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Martin Uribe&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martin is a ten year Army Veteran, turned Field Support Technician in the IT and Services Industry, who likes to code on the side to make his daily tasks easier. You can follow him on &lt;a href="https://twitter.com/mohhinder"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/clamytoe"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="blog"></category><category term="challenges"></category><category term="Flask"></category><category term="Bootstrap"></category><category term="HTML"></category><category term="CSS"></category><category term="Jinja2"></category><category term="Flask-SQLAlchemy"></category><category term="sql"></category><category term="guest"></category><category term="learning"></category></entry><entry><title>Learn Python by Coding for Yourself</title><link href="https://pybit.es/learn-by-doing.html" rel="alternate"></link><published>2017-04-27T23:30:00+02:00</published><updated>2017-04-27T23:30:00+02:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-04-27:/learn-by-doing.html</id><summary type="html">&lt;p&gt;In this post I discuss (with examples) why it’s important to learn Python by actually coding. It’s not enough to just read!&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all know that the best way to learn &lt;em&gt;anything&lt;/em&gt; is to just jump in and do it. You don’t learn to play the guitar by simply watching &lt;a href="https://www.youtube.com/watch?v=tQ0iww5u6_I"&gt;YouTube videos&lt;/a&gt;, you learn by playing every day, trying new songs and challenging yourself.&lt;/p&gt;
&lt;p&gt;The same applies to learning Python.&lt;/p&gt;
&lt;h2&gt;Sharing is Caring&lt;/h2&gt;
&lt;p&gt;In typical PyBites fashion, I’m going to share my experiences from the past two weeks regarding this “Learn by Doing” concept.&lt;/p&gt;
&lt;p&gt;This is also a crucial part of learning Python - sharing. Don’t be afraid to put yourself out there and share your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put it on GitHub for the world to see.&lt;/li&gt;
&lt;li&gt;Share it on the &lt;a href="http://reddit.com/r/learnpython"&gt;Reddit Learn Python page&lt;/a&gt; for it to be critiqued.&lt;/li&gt;
&lt;li&gt;Take part in &lt;a href="http://pybit.es/pages/challenges.html"&gt;code challenges&lt;/a&gt; (shameless plug!) and actually submit your code for review.&lt;/li&gt;
&lt;li&gt;Send the code to friends with more coding experience for some feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whatever the case, sharing your code with others is one of the best ways to learn and &lt;em&gt;retain&lt;/em&gt; the knowledge.&lt;/p&gt;
&lt;h2&gt;Challenge Yourself&lt;/h2&gt;
&lt;p&gt;This week our &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge&lt;/a&gt; is based on APIs. Why? Because I didn’t know jack about them. When Bob and I brainstorm ideas for the code challenges, we generally settle on a topic that we’re not entirely comfortable with ourselves.&lt;/p&gt;
&lt;p&gt;While Bob can query APIs in his sleep, just the thought of working with APIs made me collapse and start foaming at the mouth. Again, that’s why it was chosen.&lt;/p&gt;
&lt;p&gt;It’s important to challenge yourself. If you just stick with what you know and stay within your comfort zone, not only will you never improve but you’re never going to have a &lt;em&gt;reason&lt;/em&gt; to.&lt;/p&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;On the surface, my foray into the world of APIs was disastrous. Seriously. Dive a little deeper though and it’s honestly been one of the greatest Python learning experiences I’ve had.&lt;/p&gt;
&lt;p&gt;Being a World of Warcraft nerd, naturally the first API I looked into was the &lt;a href="https://dev.battle.net/"&gt;Blizzard Warcraft API&lt;/a&gt;. Needless to say, I had no idea what the heck I was doing. The documentation assumed a level of familiarity with APIs and clearly that wasn’t me.&lt;/p&gt;
&lt;p&gt;After hours of playing around, I was able to get the basics down and pull some meaningful (to me!) data from my player profile. The saddest part is that after all of that effort, the most “crucial” line of code for the API call was this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url = (&amp;#39;https://us.api.battle.net/wow/character/%s/%s?fields=mounts&amp;amp;locale=en_US&amp;amp;apikey=%s&amp;#39; % (realm, char_name, API_KEY))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was like a kick in the teeth seeing such a pitiful line of code sitting there after such long period of time. (&lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;Full code here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Why was it such a great experience? Well…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being thrown in the deep end can be super beneficial. Assumptive documentation and almost zero meaningful content online meant I had to figure it out through trial and error.&lt;/li&gt;
&lt;li&gt;I was forced to read code that called &lt;em&gt;other&lt;/em&gt; APIs in order to see how it was done, then apply that to this scenario.&lt;/li&gt;
&lt;li&gt;I learned that you can use the &lt;code&gt;requests&lt;/code&gt; module to pull data from the API using a specific HTTP URL. This was using the &lt;code&gt;get&lt;/code&gt; attribute of &lt;code&gt;requests&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I learned a little about &lt;code&gt;OAuth&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;This all resulted in me playing around with JSON content for the first time ever.&lt;/li&gt;
&lt;li&gt;I discovered that you can make JSON print out in a readable format using &lt;code&gt;pprint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This forced me to then start looking into how one parses JSON data effectively, especially when you have multiple layers of dicts stored in the one JSON dict.&lt;/li&gt;
&lt;li&gt;I did this completely for me. This wasn’t out of a book or something someone told me to do. &lt;em&gt;I&lt;/em&gt; wanted to play with this specific API because &lt;em&gt;I’m&lt;/em&gt; a big Blizzard fan. This meant that I was engaged and &lt;strong&gt;determined&lt;/strong&gt; to learn it even though it was bloody frustrating.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While my code is nowhere near a success and most definitely unPythonic, it’s one heck of an achievement for me. I actually understand this stuff now!&lt;/p&gt;
&lt;h2&gt;The GMAIL API Experience&lt;/h2&gt;
&lt;p&gt;The next day I decided to hit up the &lt;a href="https://developers.google.com/apis-explorer/#p/gmail/v1/"&gt;Gmail API&lt;/a&gt; because of the whole &lt;a href="https://www.gizmodo.com.au/2017/04/how-did-unrollme-get-users-to-allow-it-to-sell-their-inbox-data/"&gt;Unroll.me fuss&lt;/a&gt; going on at the moment. I figured if they could do it, so could I!&lt;/p&gt;
&lt;p&gt;I was wrong. But at least I learned something!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I learned how Google uses OAuth to authenticate applications with your Google account.&lt;/li&gt;
&lt;li&gt;I was able to pull down a list of my Gmail labels, messages and filters.&lt;/li&gt;
&lt;li&gt;I performed all of these requests using the Python &lt;code&gt;apiclient&lt;/code&gt; module to talk directly to the Gmail API (didn’t use &lt;code&gt;requests&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;I learned that each type of call to the API has its own set of options that allow you to filter the returned data. Seems obvious now…&lt;/li&gt;
&lt;li&gt;I had more practice trying to parse multi-tiered JSON output.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;results = service.users().settings().filters().list(userId=&amp;#39;me&amp;#39;).execute()
    pprint(results)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, I was underwhelmed with the outcome but learned so much more by actually doing this than if I was just reading a book. (Full code not online).&lt;/p&gt;
&lt;h2&gt;Python Flask App&lt;/h2&gt;
&lt;p&gt;Last week we created &lt;a href="http://pybit.es/codechallenge15_review.html"&gt;Python Flask Apps for our code challenge&lt;/a&gt;. It was freaking awesome. If you saw my website you’ll see that it’s very “I’m just learning HTML” retro. (I didn’t have time for the CSS and Bootstrap).&lt;/p&gt;
&lt;p&gt;I think I learned more Python in that week than any other time. It was full on and it was damn satisfying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I revived my HTML and CSS “skills” (Steady on! It's been a while!).&lt;/li&gt;
&lt;li&gt;I got to push learning Flask!&lt;/li&gt;
&lt;li&gt;I played with Jinja2 templates.&lt;/li&gt;
&lt;li&gt;I created my very first, working HTML Form that returned data to my &lt;em&gt;own&lt;/em&gt; backend script and DB.&lt;/li&gt;
&lt;li&gt;Subsequently, I learned about HTML &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests! (Who knew?!)&lt;/li&gt;
&lt;li&gt;I learned &lt;code&gt;sqlite3&lt;/code&gt; from scratch. I knew absolutely no SQL prior to last week!&lt;/li&gt;
&lt;li&gt;I created my first persistent SQL database.&lt;/li&gt;
&lt;li&gt;I created my first working Web App!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a &lt;em&gt;massive&lt;/em&gt; learning experience. None of which was taught from one book as part of an “end of chapter exercise”.&lt;/p&gt;
&lt;p&gt;This was purely for the thrill of creating my own web app. And it was &lt;strong&gt;fun&lt;/strong&gt;! (Meal Tracker 5000 baby!).&lt;/p&gt;
&lt;p&gt;The best part was that for this challenge I found information everywhere. YouTube, StackOverflow, Reddit, PyBites (Bam!), GitHub and some other books.&lt;/p&gt;
&lt;p&gt;I’m happy with the code too. &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Get on With it&lt;/h2&gt;
&lt;p&gt;So here’s the deal. If you’re finding it tough to learn Python then do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Come up with an idea for something to code. Make it something you’d want or use yourself. (My first app was an Overtime Tracker for the extra hours I worked at Oracle!)&lt;/li&gt;
&lt;li&gt;If you’re learning something new, make it something fun! (To learn how to automate sending emails I created a script that spams my workmates every evening! Sorry fellas!)&lt;/li&gt;
&lt;li&gt;Don’t just use one resource, search &lt;strong&gt;everywhere&lt;/strong&gt;. Expect to find many ways to solve your problem, not just the way they might be telling you in the book you’re reading.&lt;/li&gt;
&lt;li&gt;Experiment in the Python Shell! It’s the best place to stuff around!&lt;/li&gt;
&lt;li&gt;As I said before, share your code and get people to give you feedback.&lt;/li&gt;
&lt;li&gt;Join us in our &lt;a href="http://pybit.es/special-100days.html"&gt;100 Day Code Challenge&lt;/a&gt;! It’s been the leading factor for my recent increase in Python understanding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of all though: &lt;strong&gt;STICK WITH IT&lt;/strong&gt;. The failures and the frustrating evenings where the code just doesn’t work are so important. They totally suck but man do you learn!&lt;/p&gt;
&lt;p&gt;And I seriously mean it when I say, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Anyone else remember the guy from the YouTube video at the top? That video may be &lt;strong&gt;the&lt;/strong&gt; reason I started playing the guitar! I love it!&lt;/em&gt;&lt;/p&gt;</content><category term="learning"></category><category term="code"></category><category term="programming"></category><category term="python"></category><category term="resources"></category><category term="Flask"></category><category term="Warcraft"></category><category term="requests"></category><category term="gmail"></category><category term="APIs"></category><category term="sqlite3"></category><category term="challenge"></category><category term="motivation"></category></entry><entry><title>Comparing Lists with Difflib</title><link href="https://pybit.es/comparing_lists.html" rel="alternate"></link><published>2017-03-08T10:00:00+01:00</published><updated>2017-03-08T10:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-08:/comparing_lists.html</id><summary type="html">&lt;p&gt;Learn to compare blocks of text with the difflib module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love finding new things, especially when they end up saving you a boat load of time and effort! I was looking for a way to compare two lists as the code I had seemed quite clunky. Surely there had to be a better way out there! That's when I discovered difflib.&lt;/p&gt;
&lt;h2&gt;The Julian Way&lt;/h2&gt;
&lt;p&gt;I'll show you how I was approaching the problem first. Don't judge me!&lt;/p&gt;
&lt;p&gt;First, the two blocks of text (made these lists up on the spot):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1 = &amp;quot;&amp;quot;&amp;quot;Julian&amp;#39;s to-do list:
1. Be awesome.
2. Pybites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; text2 = &amp;quot;&amp;quot;&amp;quot;Bob&amp;#39;s to-do list:
1. Be awesome!
2. PyBites.
3. Enjoy a beer.&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then split the these blocks up into strings using &lt;em&gt;splitlines()&lt;/em&gt;. This returns a list containing each line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I got stuck. I came up with a for loop that checked to see if items from the &lt;em&gt;text1_split&lt;/em&gt; list were in the &lt;em&gt;text2_split&lt;/em&gt; list. There's an if statement for the checking:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; for i in text1_split:
    if i in text2_split:
        print(&amp;quot;&amp;#39;%s&amp;#39; is in both lists!&amp;quot; % (i))
    else:
        print(&amp;quot;&amp;#39;%s&amp;#39; is NOT in both lists!&amp;quot; % (i))


&amp;#39;Julian&amp;#39;s to-do list:&amp;#39; is NOT in both lists!
&amp;#39;1. Be awesome.&amp;#39; is NOT in both lists!
&amp;#39;2. Pybites.&amp;#39; is NOT in both lists!
&amp;#39;3. Enjoy a beer.&amp;#39; is in both lists!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that it doesn't tell me what's in &lt;em&gt;text2_split&lt;/em&gt;. All it's confirming is whether the items in &lt;em&gt;text1_split&lt;/em&gt; exist in &lt;em&gt;text2_split&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;The code was already getting out of hand. From here I'd need to add code to tell me what's in &lt;em&gt;text2_split&lt;/em&gt; if there isn't a match and what the differences are. 
Enter difflib.&lt;/p&gt;
&lt;h2&gt;Difflib to the Rescue!&lt;/h2&gt;
&lt;p&gt;Before I show you the command, I'll just say that difflib is actually quite expansive, ie, there's a lot you can do with it. This post is just about the &lt;em&gt;Differ()&lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;As before, you have to split the blocks of text into a list of strings/lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; text1_split = text1.splitlines()
&amp;gt;&amp;gt;&amp;gt; text2_split = text2.splitlines()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then call &lt;em&gt;Differ().compare()&lt;/em&gt; to do the comparison. I store the result of the command in the &lt;em&gt;diff&lt;/em&gt; variable. Finally, I print the output, joining the lines with a new line to make it readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; diff = difflib.Differ().compare(text1_split, text2_split)
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;\n&amp;#39;.join(diff))
- Julian&amp;#39;s to-do list:
? ^^^^^^

+ Bob&amp;#39;s to-do list:
? ^^^

- 1. Be awesome.
?              ^

+ 1. Be awesome!
?              ^

- 2. Pybites.
?      ^

+ 2. PyBites.
?      ^

  3. Enjoy a beer.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look familiar? If you're a Linux/Unix fan you'll have likely come across the &lt;em&gt;diff&lt;/em&gt; command, in which case you'll have no problem reading this!&lt;/p&gt;
&lt;p&gt;What you're seeing here is the differences between each list.&lt;/p&gt;
&lt;p&gt;The key to reading the above:&lt;/p&gt;
&lt;p&gt;'- ' indicates the difference is in the first list. In this case, the letters "Julian".&lt;/p&gt;
&lt;p&gt;'+ ' indicates the difference is in the second list. In this case, the letters "Bob".&lt;/p&gt;
&lt;p&gt;'? ' draws your attention to anything that doesn't appear in either list. It appears under every line here (except the last) because the new line we inserted wasn't originally there.&lt;/p&gt;
&lt;p&gt;'  ' (a blank space) indicates that this line is a perfect match and is in both lists. In this case, line item "3. Enjoy a beer.".&lt;/p&gt;
&lt;p&gt;The ^ (caret) symbol appears underneath the differing characters. Note the ^ under the lower and upper case B in the second line item.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is only the tip of the iceberg as Difflib is pretty big. In fact, we used the difflib.SequenceMatcher class in our &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;Code Challenge 03 - PyBites blog tag analysis&lt;/a&gt; to look for similarities between our blog tags.&lt;/p&gt;
&lt;p&gt;It's one of those handy stdlib modules you stumble across that can change how you code (another example we wrote about is &lt;a href="http://pybit.es/collections-deque.html"&gt;deque&lt;/a&gt;). I think it's brilliant!&lt;/p&gt;
&lt;p&gt;Read more on difflib &lt;a href="https://docs.python.org/3/library/difflib.html"&gt;here&lt;/a&gt; or use help(difflib) from the Python shell.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="stdlib"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>Pythonic String Formatting</title><link href="https://pybit.es/string-formatting.html" rel="alternate"></link><published>2017-03-02T08:00:00+01:00</published><updated>2017-03-02T08:00:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-03-02:/string-formatting.html</id><summary type="html">&lt;p&gt;The formatting of strings has been a hot topic in Python and something that I struggled with at the beginning. It's quite interesting to see how it's evolved over time to be what it is today!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Formatting strings was one of the things that really hurt my head when I started learning Python. Everyone did it differently!&lt;/p&gt;
&lt;p&gt;After doing Michael Kennedy's &lt;a href="http://pybit.es/pythonic-code-course-rewiew.html"&gt;&lt;em&gt;Write Pythonic Code Like a Seasoned Developer&lt;/em&gt;&lt;/a&gt; course, I was inspired to write about the different ways you could format a string in Python. Mainly because the method we've all deemed &lt;strong&gt;wrong&lt;/strong&gt; (or at least, "least Pythonic") is the way I started off doing it!&lt;/p&gt;
&lt;h2&gt;The Terribly Unpythonic Method&lt;/h2&gt;
&lt;p&gt;Okay let's get this out of the way first. Here's how I formatted a string when I first started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; country = &amp;quot;Australia&amp;quot;
&amp;gt;&amp;gt;&amp;gt; level = 11
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of &amp;quot; + country + &amp;quot; is &amp;quot; + str(level) + &amp;quot;.&amp;quot;)
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll be honest, I was just glad I could get text to print! It's pretty terrible isn't it? Having to display &lt;em&gt;level&lt;/em&gt; as a string with &lt;em&gt;str()&lt;/em&gt; sends shivers down my spine now.&lt;/p&gt;
&lt;h2&gt;Using the String Format Operator&lt;/h2&gt;
&lt;p&gt;When Bob first showed me code that contained the string format operator I could have died. Not because it was awesome but because as a newbie, I had no idea what the heck I was even reading! Using the same variables and types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of %s is %d.&amp;quot; % (country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What the heck are % signs doing within a string? And how are they being substituted and not being displayed as is?&lt;/p&gt;
&lt;p&gt;It's pretty simple! What the code is doing is substituting the %s and %d for the values specified in the brackets after the string.&lt;/p&gt;
&lt;p&gt;That is, %s is substituted with &lt;em&gt;country&lt;/em&gt; and %d with &lt;em&gt;level&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was great until I realised that the %s was only to be used to specify a string type variable and %d to specify a decimal. (There are more options to choose from of course!).&lt;/p&gt;
&lt;p&gt;The reason this is a pain is that you'll need to remember the type of every variable you're going to print and get the order right in your print statement. Not a huge fan.&lt;/p&gt;
&lt;h2&gt;Replacement Fields&lt;/h2&gt;
&lt;p&gt;This is my favourite one. Replacement fields!&lt;/p&gt;
&lt;p&gt;Replacement fields expand on the format operator by taking the thinking out of the equation (always a good thing for me!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;The awesomeness level of {} is {}.&amp;quot;.format(country, level))
The awesomeness level of Australia is 11.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar to the format operator, we put the replacement fields &lt;em&gt;{}&lt;/em&gt; where we'd like the variable output to be in the string. The difference? We no longer need to remember what the &lt;strong&gt;type&lt;/strong&gt; of the variable is! &lt;/p&gt;
&lt;p&gt;It's all taken care of by &lt;em&gt;.format()&lt;/em&gt; which will display your variable using the appropriate format. So very cool and painless!&lt;/p&gt;
&lt;p&gt;Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Python 3.6 f-strings&lt;/h2&gt;
&lt;p&gt;f-strings were introduced &lt;a href="http://pybit.es/3.6_new.html"&gt;in Python 3.6&lt;/a&gt; and are pretty new to me but that doesn't stop them from being awesome! Check this out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; f&amp;quot;The awesomeness level of {country} is {level}.&amp;quot;
&amp;#39;The awesomeness level of Australia is 11.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How incredible is that? The variables are called in the string output directly within the replacement fields. You no longer need to manually call format()!&lt;/p&gt;
&lt;p&gt;Even more Pythonic goodness!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Being quite new to Python means I'm more likely to use the latest and greatest method of formatting strings which actually makes things more difficult. I now want to go back through my old code and update it with the newer, more Pythonic methods.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pythonic string formatting summarized" src="https://pybit.es/images/pythonic-string-formatting.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I want to hear more about how other programmers format their output strings. It's a topic that's interested me purely because of the strong opinion out there!&lt;/p&gt;
&lt;p&gt;How do you do it?&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category><category term="pythonic"></category></entry><entry><title>I have been coding in Python for years and I still ...</title><link href="https://pybit.es/python-lookup.html" rel="alternate"></link><published>2017-03-01T09:00:00+01:00</published><updated>2017-03-01T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-01:/python-lookup.html</id><summary type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick post on a fun trend we saw on Twitter this morning: people posting how long they coded for and what they still had to lookup. Some of this is tongue in cheek of course, but the point is that programming is not easy. Secondly there is no shame in looking things up, we all do it! What do fellow Pythonistas say?&lt;/p&gt;
&lt;p&gt;It seems to have started here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is Tim. I'm a lead at Google with over 30 years coding experience and I need to look up how to get length of a python string. &lt;a href="https://twitter.com/tdierks/status/835912924329836545"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or maybe even here: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don't do riddles. &lt;a href="https://twitter.com/dhh/status/834146806594433025"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; to the rescue, as Pythonista Luciano Ramalho tweets: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Luciano, I've been coding for almost 40 years now, and I believe StackOverflow is the best thing since array bounds checking. &lt;a href="https://twitter.com/ramalhoorg/status/836319368216739842"&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Pythonistas&lt;/h3&gt;
&lt;p&gt;Some fun examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20python&amp;amp;src=typd"&gt;here&lt;/a&gt; (Python bloggers, take note ...). &lt;/p&gt;
&lt;p&gt;We definitely have been here:&lt;/p&gt;
&lt;p&gt;CSV files cannot be written without Google:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still google to read/write csv files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Logging (setup) is hard!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still copy paste from the logging cookbook. #python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What was the difference again between json dump and load? And when to add the extra -s?!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been using Python for more than 4 years and still forget the difference between json dump(s) and load(s) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Negative slicing, maybe not so clear to the next maintainer of your code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been doing Python for a few years now. I have to check the docs when I need list slicing with negative indexes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily we have the REPL, just type python + enter, and play:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... using Python since 2001. I still keep many tabs of stdlib docs open, and check often in a REPL as a normal worflow. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;True, writing a book or blog you still have to look up stuff:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I wrote a widely read book about Intermediate Python and I still have to use Stackoverflow and Google while coding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep, we looked this one up too last week: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always confuse .sort() with sorted().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can't remember map parameter order either, list comprehensions do fit in our memory (and are more elegant) :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... still can't remember if its map(fn, iterable) or map(iterable, fn) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tedioust Python code to write indeed, we always need to copy it from somewhere ;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always copy if __name__ == "__main__" from another Python script because I cannot count the underscores &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Regex stuff (re module) is hard to do from memory (specially group() vs groups() on a matched object!):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I need to check docs on pretty much everything in the 're' lib before using it &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We share the feeling, we too have to lookup datetime docs everytime we work with dates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't use date and timezone properly without google &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of these things you open a quick REPL session for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I still have to use the REPL to figure out how slices work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh and don't forget the whitespace, luckily it's simple to set (and forget) in Vim:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I can't write python without something to manage my whitespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whitespace, ouch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... contributor to many scientific python projects, and I just spent 40 min debugging because I had an extra space on one line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;*nix fun&lt;/h3&gt;
&lt;p&gt;This happens all the time to us too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I always forget about the crontab's entry time order and need to lookup at the man page. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...  I'm using bash since 15 years but still have to Google the syntax of 'find -exec' every time I use it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To have a laugh you can read more generic programming examples &lt;a href="https://twitter.com/search?f=tweets&amp;amp;q=my%20name%20is%20years%20still&amp;amp;src=typd"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;PyBites favorite:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;... I've been coding in Python for 4 years now and I still haven't learned any better languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;And you?&lt;/h3&gt;
&lt;p&gt;You can share your experience with us &lt;a href="http://twitter.com/home?status=@pybites I have been coding in %23Python for n years and I still ... " target="_blank"&gt;via Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="learning"></category><category term="twitter"></category><category term="pyfun"></category><category term="stackoverflow"></category></entry><entry><title>Shelve It!</title><link href="https://pybit.es/shelve-it.html" rel="alternate"></link><published>2017-02-14T00:48:00+01:00</published><updated>2017-02-14T00:48:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-02-14:/shelve-it.html</id><summary type="html">&lt;p&gt;Shelve basics and a question on how best to manage importing the DB.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When Bob first spoke about Python Shelves a while ago, I thought he'd gone bonkers. This was mainly because he was talking about his "Python shelve" storing book data in a script he was writing. &lt;/p&gt;
&lt;p&gt;"How the heck did you get a bookshelf in Python?!", I wondered. Little did I know he was talking about an awesome, persistent storage option.&lt;/p&gt;
&lt;p&gt;My first foray into Python shelves was actually rather painless (for me). I was impressed by how simple they were. They were almost as simple as opening and working text files.&lt;/p&gt;
&lt;h2&gt;Creating a Shelf File&lt;/h2&gt;
&lt;p&gt;A quick overview for the uninitiated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julian&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Break it down!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We import the shelve module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;shelve.open('data')&lt;/em&gt; opens (or creates in this case as it doesn't exist yet) a database .db file called &lt;em&gt;data&lt;/em&gt;. This is assigned to the &lt;em&gt;db&lt;/em&gt; variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a variable called &lt;em&gt;name&lt;/em&gt; and it assign it the name Julian (so vain!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interesting part. We now assign the &lt;em&gt;name&lt;/em&gt; variable (containing 'Julian') to the key &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We close off our access to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the &lt;em&gt;name&lt;/em&gt; variable has been stored in a shelf called &lt;em&gt;data.db&lt;/em&gt;. This .db file, by default, is located in the same directory that your script is run from.&lt;/p&gt;
&lt;h2&gt;UnShelve It!&lt;/h2&gt;
&lt;p&gt;It's not actually called unshelving. Just roll with it.&lt;/p&gt;
&lt;p&gt;To read the data back in, we do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db_names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The read in of the data here is the 3rd line of code. In this line we take the object stored in &lt;em&gt;db_names&lt;/em&gt; within the &lt;em&gt;db&lt;/em&gt; shelf and assign it to &lt;em&gt;name&lt;/em&gt;. The string in &lt;em&gt;name&lt;/em&gt; (Julian) is then printed.&lt;/p&gt;
&lt;h2&gt;Noteworthy&lt;/h2&gt;
&lt;p&gt;The above is super basic of course. Shelves become really useful when we start storing lists and dicts in them.&lt;/p&gt;
&lt;p&gt;There is a catch though. Any data you read in from the shelf is not automatically updated in the shelf if changed by your script. Using the above script, after reading in &lt;em&gt;db_names&lt;/em&gt;, if we were to change the name variable to contain 'Bob' instead of 'Julian', that update would not be pushed back to the &lt;em&gt;db&lt;/em&gt; shelf.&lt;/p&gt;
&lt;p&gt;To enable automatic writing to the shelf you can open the shelf with "writeback" enabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db = shelve.open(&amp;#39;data&amp;#39;, writeback=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this can be super handy, it can be a bit of a memory hog if you're not careful. Any changes being made during execution are stored in cache until the shelf file is closed with &lt;em&gt;.close()&lt;/em&gt;. This is when they're written to the shelf file.&lt;/p&gt;
&lt;h2&gt;The Wall I Hit with Shelves&lt;/h2&gt;
&lt;p&gt;My biggest hurdle with regards to shelves was how to manage a script that was importing the shelf data when it was only being run for the first time. That is, before the db file had even been populated with data.&lt;/p&gt;
&lt;p&gt;If I try to run the above code to read in data before &lt;em&gt;db_names&lt;/em&gt; even exists, I'll get an error.&lt;/p&gt;
&lt;p&gt;I wasn't actually too sure how to approach this. Should I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Have some sort of configuration/setup script that runs separately before running the main program?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a bunch of if statements?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a cli based menu system that allows the user to choose when to add items?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with all things Python, I found I was &lt;em&gt;try&lt;/em&gt;-ing (pun intended!) too hard. It was as simple as using &lt;em&gt;try&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name = []

while True:
    try:
        with shelve.open(&amp;#39;data&amp;#39;) as db:
            name = db[&amp;#39;db_names&amp;#39;]
            break
    except:
        print(&amp;quot;Please enter a  name to begin: &amp;quot;)
        name.append(input())
        break 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works too!&lt;/p&gt;
&lt;p&gt;This situation got me thinking though. There's more than one way to skin a... &lt;em&gt;ahem&lt;/em&gt;... potato?&lt;/p&gt;
&lt;p&gt;How would you Pythonistas handle this? What sort of approach do you take when it comes to dealing with shelves?&lt;/p&gt;
&lt;p&gt;For now I'll stick with &lt;em&gt;try&lt;/em&gt; but I'm keen to know what you think.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="shelve"></category><category term="python"></category><category term="tips"></category><category term="tricks"></category><category term="code"></category><category term="pybites"></category><category term="database"></category></entry><entry><title>Python Naming Conventions</title><link href="https://pybit.es/naming_conventions.html" rel="alternate"></link><published>2017-01-01T11:14:00+01:00</published><updated>2017-01-01T11:14:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-01:/naming_conventions.html</id><summary type="html">&lt;p&gt;Naming conventions can be tricky in Py. It's good to make sure we're all on the same page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned in my &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff review&lt;/a&gt;, I was led astray with regards to naming my functions and variables. That is, the book was telling me to use camelCase rather than the approved underscore method.&lt;/p&gt;
&lt;p&gt;After writing that article I decided to do some digging and I totally feel this needs a dedicated post!&lt;/p&gt;
&lt;h2&gt;The Consensus&lt;/h2&gt;
&lt;p&gt;A lot of people are divided on this topic! Doing a quick Google search found people who believe it doesn't matter what you use and those that would fight for their chosen method.&lt;/p&gt;
&lt;p&gt;The one thing everyone agrees on however is that you need to remain consistent. If you decide to use camelCase in your code, then do so for the entirety of your project, &lt;strong&gt;don't mix&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Quick Example&lt;/h2&gt;
&lt;p&gt;After Bob informed me that camelCase &lt;em&gt;wasn't&lt;/em&gt; the way to go, I went through and renamed all of my functions and variables using the underscore method. Here's a quick snippet in case you don't know what this all looks like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happyNewYearEveryone():
    partyTime()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Underscore Method&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;happy_new_year_everyone():
    party_time()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sticking with PEP8&lt;/h2&gt;
&lt;p&gt;I did wonder where this guidance was coming from though. How did Bob know this was exactly how it should be?&lt;/p&gt;
&lt;p&gt;That was when I discovered the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8 Style Guide&lt;/a&gt; on python.org. If you have any doubts as to how your code should be laid out, reference this baby and you'll be on your way. &lt;/p&gt;
&lt;p&gt;What does it say about naming conventions? Quite a bit actually! For the pupose of this post there, here's what it says about Function names (also applicable to Methods and Instance Variables):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Function names should be lowercase, with words separated by underscores as necessary to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you check out the page for yourself you'll see further explanations on other naming convention options within Py.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Given the existence of the PEP8 standards, I don't think we really have a choice nor do I think there's any debate about how we should be naming variables and the like.&lt;/p&gt;
&lt;p&gt;Going forward I'll definitely be using these rules when working on my code. If I don't, feel free to correct me!&lt;/p&gt;
&lt;p&gt;Imagine a world where we all code to the same rules. Mmmm.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>Don't Let Indentation Catch You Out</title><link href="https://pybit.es/indentation_tips.html" rel="alternate"></link><published>2016-12-30T19:51:00+01:00</published><updated>2016-12-30T19:51:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2016-12-30:/indentation_tips.html</id><summary type="html">&lt;p&gt;Python indentation can be a cruel mistress. Let's get it right!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every programmer knows the frustration of writing code and hitting run only to have the compiler locate an error that you swear wasn't an error. (That is, I'm hoping it's not just me right?!)&lt;/p&gt;
&lt;p&gt;One of the first things to learn with Python is the absolute &lt;strong&gt;importance of indentation&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;What is Indentation?&lt;/h2&gt;
&lt;p&gt;Okay I'll keep this quick. It's just important that I cover this for anyone new to programming.&lt;/p&gt;
&lt;p&gt;Indentation is the white space at the front of your code. In all languages you'll see some sort of indentation such as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the space in front of the second line.&lt;/p&gt;
&lt;h2&gt;Python's Love Affair With Indentation&lt;/h2&gt;
&lt;p&gt;It took me a day or two to fully grasp how dependent Python was on indentation. It's actually part of the beauty of the language. In most other languages you'll be wrapping your code within curly braces {} which can grow tiresome.&lt;/p&gt;
&lt;p&gt;Python, however, relies on indents. In the above code, the indent in front of line 2 tells the compiler that this code "belongs" to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;Check out the difference between Javascript and Python for the same code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;how_to_be_cool() {&lt;/span&gt;
    &lt;span class="nx"&gt;wear_aviator_sunglasses&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much simpler in Python! Anything that's indented by the same amount under the function will be considered part of the function. The general rule of thumb is to use 4 spaces.&lt;/p&gt;
&lt;h2&gt;Hanging Indents for Nested Code&lt;/h2&gt;
&lt;p&gt;Indents for your nested statements is a little more flexible but there are definitely guidelines. Let's add a simple infinite while Loop to the above code and check out the indentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The while loop is now in the first indent of 4 spaces and the sunglasses function call is indented by a further 4 spaces to indicate that it's now in the loop.&lt;/p&gt;
&lt;p&gt;If I want to add code to the &lt;em&gt;how_to_be_cool&lt;/em&gt; function after the while loop, I simply write code one indentation margin (4 spaces) "up". Check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool():
    while True:
        wear_aviator_sunglasses()
    time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple!&lt;/p&gt;
&lt;h2&gt;How Indents Can Bite You in the Butt&lt;/h2&gt;
&lt;p&gt;This brings me to one of my biggest learning points with Python. &lt;strong&gt;Always Watch Your Indents!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can't stress that enough. If you're not careful, you are bound to make mistakes and waste time debugging your code. Python expects proper marginalised indents. Unless you're continuing code from the previous line onto subsequent lines, your code needs to line up. If not, Python will most likely spit the dummy.&lt;/p&gt;
&lt;p&gt;Of course, you won't always do it intentionally. While editing and fine tuning my own code I was doing so without removing previous indents and spaces. As a result I was left with unexpected spaces that caused my code to error out.&lt;/p&gt;
&lt;p&gt;Here's an example of the above code with indentation that's just &lt;em&gt;slightly&lt;/em&gt; out of whack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def how_to_be_cool:
    while True:
        wear_aviator_sunglasses()
     time.sleep(5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be quite noticeable here but when you've got 200 lines of code it'll be harder to catch. Of course, the compiler should tell you where the error is but it may not jump out at you at first. It sure didn't for me!&lt;/p&gt;
&lt;h2&gt;Tabs V Spaces&lt;/h2&gt;
&lt;p&gt;I initially wrote this post assuming that tabs were mandatory in Python (as that's how I keep my code clean in other languages). &lt;a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces"&gt;The official Python Style Guide&lt;/a&gt; actually says otherwise! &lt;/p&gt;
&lt;p&gt;Python.org recommends that we use only spaces and never tabs (unless it's to keep consistent with code already with tabs). Always something new to learn!&lt;/p&gt;
&lt;h2&gt;Further Reading on Indentation&lt;/h2&gt;
&lt;p&gt;There's an extensive list of different indentation scenarios on the &lt;a href="https://www.python.org/dev/peps/pep-0008/#indentation"&gt;Python Style Guide&lt;/a&gt;. I found it to be quite enlightening! I recommend checking it out posthaste!&lt;/p&gt;
&lt;h2&gt;Vim Settings to Make Your Life Easier&lt;/h2&gt;
&lt;p&gt;For the Vim lovers out there, adding the following to your &lt;em&gt;.vimrc&lt;/em&gt; file will take care of a lot of your indentation woes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These settings will make the following 3 adjustments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change your tab to be only 4 spaces long instead of the usual 8.&lt;/li&gt;
&lt;li&gt;Limit the length of your lines to be 79 characters as per &lt;a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;Python specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Save your files in a unix format (helpful for github sharing/interactions etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to RealPython.com for this info. They've actually got a heap of other handy settings for Vim + Python in their &lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;original article&lt;/a&gt;. Definitely worth checking out!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For such a simple concept, indentation can be super complex which is why even the mighty Bob was caught out leaving only 2 spaces in his blocks of code (Sorry Bob!). I no longer feel bad for getting this wrong!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;edit Bob: I shamefully admit I used 2 spaces before, now that I comply with PEP8 using 4 spaces I am so much happier, and people reading my code probably too :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indentation is what makes Python beautiful but is also something that can ruin your afternoon so do yourself a favour, get those vim settings in place to automate it and keep it in the back of your mind that a stray space somewhere could be foiling your Python master plans!&lt;/p&gt;
&lt;p&gt;Remember, Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="python"></category><category term="learning"></category><category term="beginners"></category><category term="tips"></category><category term="cleancode"></category><category term="bestpractices"></category></entry><entry><title>Learning from Python mistakes</title><link href="https://pybit.es/py-mistakes.html" rel="alternate"></link><published>2016-12-28T09:00:00+01:00</published><updated>2016-12-28T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2016-12-28:/py-mistakes.html</id><summary type="html">&lt;p&gt;In this post I summarize some great lessons Mike Pirnat shared in his free ebook 'How to make mistakes in Python'&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are some great &lt;a href="http://www.oreilly.com/programming/free/"&gt;free Python O'Reilly ebooks&lt;/a&gt;. In this post some useful tips from Mike Pirnat's &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;How to make mistakes in Python&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtualenv / pyvenv&lt;/a&gt; to isolate your environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am still doing this: using the default REPL which leads to a lot of arrow-up repeating, use IPython or Jupyter Notebooks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always return a value from your functions / methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use PyLint (I am also relatively late in this, future post, promise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read, use, abide by &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;, the Python style guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(not Python per se) name your variables wisely. There is a whole chapter in &lt;a href="http://amzn.to/2nhxa1d"&gt;clean code&lt;/a&gt; dedicated to this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't abuse lambdas, I almost only use them for &lt;a href="https://docs.python.org/3/howto/sorting.html"&gt;sorting&lt;/a&gt;. Ditto for list comprehension, too much nesting makes it hard to read them. Same goes for decorators, too much nesting makes for complex code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid long if/elif/ blocks, wrap options into classes or dicts, use Enums, look at the &lt;a href="http://refactoring.com/catalog/replaceConditionalWithPolymorphism.html"&gt;Replace Conditional with Polymorphism pattern&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave extensive getters and setters for Java, use properties (future post).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write small methods and (decoupled) modules, I wrote about this generically &lt;a href="http://bobbelderbos.com/2016/03/building-maintainable-software/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid the global scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be specific in your imports, from time import * is asking for trouble. Use time.time() instead and you won't have name clashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Explicit is better than implicit" (import this): don't use pass in except, handle the error (log it). And be specific what exception to catch (e.g. 'except IOError' is better than just 'except' which catches everything).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't re-invent the wheel: &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; is full of great modules you can pip install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use mutable default values for methods, it leads to weird behavior because each time you call the method you expect a new object (say list), yet you modify an existing one, use None instead. This and other common gotchas are described &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overeager Code: keep your constuctors (dunder inits) methods lean, watch out for modules doing a lot of operations when being imported. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Test your code!&lt;/a&gt; There are great frameworks apart from unittest, checkout &lt;a href="http://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging is cheap, &lt;a href="https://docs.python.org/3.5/library/logging.html"&gt;use it!&lt;/a&gt; Config is tricky (future post ...)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's thank Mike Pirnat for sharing all these great insights in this &lt;a href="http://www.oreilly.com/programming/free/how-to-make-mistakes-in-python.csp?intcmp=il-prog-free-product-lgen_python_mistakes"&gt;freely distributed ebook&lt;/a&gt; of just 80 pages.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="bestpractices"></category><category term="pep8"></category><category term="virtualenv"></category><category term="cleancode"></category><category term="logging"></category><category term="pytest"></category><category term="ebook"></category><category term="refactoring"></category><category term="gotchas"></category></entry></feed>