<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyBites</title><link>http://pybit.es/</link><description>Python code challenges, tutorials and news, one bite a day</description><atom:link href="http://pybit.es/feeds/challenges.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 20 Feb 2017 00:01:00 +0100</lastBuildDate><item><title>Code Challenge 07 - Twitter data analysis Part 3: sentiment analysis</title><link>http://pybit.es/codechallenge07.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Perform a sentiment analysis on a popular topic on Twitter&lt;/h3&gt;
&lt;p&gt;A new week, more coding! You are free to pick a topic. This can be a trend, news or movie. We will take latter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do Tweeters react on &lt;a href="http://www.imdb.com/title/tt4465564/?ref_=nv_sr_1"&gt;Fifty Shades Darker&lt;/a&gt;, positive or negative?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app if not done already to get keys, put those in config.py (copying the config-template.py)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install Twython (to follow along with our approach just do pip install -r requirements.txt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have provided a getting_data.py script (from &lt;a href="https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/getting_data.py"&gt;Joel Grus&lt;/a&gt;) that uses the Twitter &lt;a href="https://dev.twitter.com/streaming/overview"&gt;Streaming APIs&lt;/a&gt; to collect tweets, run it as follows. It takes 1000 tweets, adjust as necessary (this is also an experiment for us!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python getting_data.py Fifty Shades Darker
&lt;span class="c"&gt;# replacing with your topic of interest&lt;/span&gt;
&lt;span class="c"&gt;# generates data_unix_timestamp.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you prefer Tweepy, you can use this &lt;a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/"&gt;article/ script&lt;/a&gt; (and pip install that library ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write is sentiment.py, it contains some code to read the stored json back in memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python sentiment.py data_1487544849.json
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean up the data, we did some of this in &lt;a href="http://pybit.es/codechallenge05_review.html"&gt;part 2&lt;/a&gt; of this challenge series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sentiment analysis ... is the audience positive or negative? We will try &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; for this, use any (Python) tools you prefer ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 07
$ cp sentiment-template.py sentiment.py
# if you want to follow along with our recommended libraries (assuming py &amp;gt;= 3.3)
$ python -m venv venv 
$ source venv/bin/activate&amp;#39;
$ pip install -r requirements.txt
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 20 Feb 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-02-20:codechallenge07.html</guid><category>codechallenges</category><category>learning</category><category>pypi</category><category>prediction</category></item><item><title>Code Challenge 06 - When does PyPI reach 100K packages? - review</title><link>http://pybit.es/codechallenge06_review.html</link><description>&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solutions / learning&lt;/h2&gt;
&lt;h3&gt;1. Moving average using PyPI's RSS&lt;/h3&gt;
&lt;p&gt;My first approach was to take the &lt;a href="https://pypi.python.org/pypi?%3Aaction=packages_rss"&gt;PyPI New RSS feed&lt;/a&gt; and take the average of time between adding packages. The script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi100k.py"&gt;here&lt;/a&gt;. The problem though is that the RSS feed has only 40 items, not much data. However when I put it in a cronjob and left it running for a week I got pretty similar results: it will happen somewhere at the beginning of March:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# grep Result pypi.log |sed &amp;#39;s/,.* \[Main.*: /   /g&amp;#39;
2017-02-09 16:09:13   2017-02-25 13:52:23.701848
2017-02-10 15:57:03   2017-02-26 03:50:38.528795
2017-02-11 15:57:03   2017-03-09 23:10:14.631885
2017-02-12 15:57:03   2017-03-05 22:31:50.575452
2017-02-13 15:57:03   2017-02-27 07:02:47.599206
2017-02-14 15:57:03   2017-02-21 20:41:34.775090
2017-02-15 15:57:03   2017-02-25 00:01:30.304754
2017-02-16 15:57:03   2017-03-01 12:52:38.659931
2017-02-17 08:00:33   2017-03-01 09:38:01.360349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another source to use if you go this route is &lt;a href="https://wiki.python.org/moin/PyPIXmlRpc"&gt;PyPI's XML-RPC methods&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Using scipy.interpolate on Webarchive data&lt;/h3&gt;
&lt;p&gt;I was pointed to the &lt;a href="http://web.archive.org/web/20131025235716/https://pypi.python.org/pypi"&gt;Web Archive&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/learnpython/comments/5trx9z/challenge_when_does_pypi_reach_100k_packages/"&gt;Reddit&lt;/a&gt;. This is how you get snapshots of the PyPI page over time == a set of date points and how many packages there were at each time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python -m venv venv &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; source venv/bin/activate
$ pip install waybackpack
# take 4 years of data (half a GB, delete when done)
$ waybackpack https://pypi.python.org/pypi -d pypi-snapshots --from-date 20130214 --to-date 20170214
# few days went by, adjusted end date to 20170217 today
#
# prep the data
$ cd pypi-snapshots
# sometimes unix is all you need ;)
$ find . -name &amp;#39;pypi&amp;#39;|xargs grep &amp;quot;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;[0-9][0-9]*&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&amp;quot;| perl -pe &amp;#39;s/.*?(\d+)\/.*&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;(\d+)&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\/strong&amp;gt;/\1:\2/g&amp;#39; &amp;gt; ../data.txt
$ head -2 data.txt
20130214002304:28061
20130216031420:28108
$ tail -2 data.txt
20170215124232:98825
20170216124236:98907
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This data (and all scripts) are on our &lt;a href="https://github.com/pybites/challenges/tree/solutions/06"&gt;solutions branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi_pred_webarchive.ipynb"&gt;this notebook&lt;/a&gt; with the analysis. I used &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline"&gt;scipy.interpolate - UnivariateSpline&lt;/a&gt; to do the extrapolation, I found this &lt;a href="http://stackoverflow.com/questions/2745329/how-to-make-scipy-interpolate-give-an-extrapolated-result-beyond-the-input-range"&gt;here&lt;/a&gt; (Joma's answer).&lt;/p&gt;
&lt;h2&gt;My prediction&lt;/h2&gt;
&lt;p&gt;As you can see from the notebook I am getting: 1st of March 8:37 PM. First of the month, nice date. And consistent with the first method.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the result" src="http://pybit.es/images/pypi100k.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we return to the Twitter API to do a sentiment analysis! Stay tuned ...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 17 Feb 2017 16:00:00 +0100</pubDate><guid>tag:pybit.es,2017-02-17:codechallenge06_review.html</guid><category>codechallenges</category><category>code review</category><category>learning</category><category>pypi</category><category>prediction</category><category>scipy</category><category>numpy</category><category>matplotlib</category></item><item><title>Code Challenge 06 - When does PyPI reach 100K packages?</title><link>http://pybit.es/codechallenge06.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A milestone right around the corner&lt;/h3&gt;
&lt;p&gt;A new week, more coding! &lt;/p&gt;
&lt;p&gt;We are grabbing this challenge from &lt;a href="https://twitter.com/raymondh/status/829474817082433536"&gt;Raymond Hettinger's tweet&lt;/a&gt; (EAFP):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python data extrapolation contest: Tweet your prediction of the exact date and time(UTC) that http://pypi.python.org  hits 100,000 packages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted answers (tweet replies) were very different which made us curious. As it's a prediction there won't be one right answer of course. We challenge you to find a data set to make your prediction. We are curious what you will come up with ...&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# cp pypi100k-template.py pypi100k.py
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 13 Feb 2017 08:40:00 +0100</pubDate><guid>tag:pybit.es,2017-02-13:codechallenge06.html</guid><category>codechallenges</category><category>learning</category><category>pypi</category><category>prediction</category></item><item><title>Code Challenge 05 - Twitter data analysis Part 2: similar tweeters - review</title><link>http://pybit.es/codechallenge05_review.html</link><description>&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;This week's challenge was really hard. We looked at &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt; to calculate similarity between Twitter users.&lt;/p&gt;
&lt;p&gt;Below what we got. Any feedback welcome. Code is &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we tweaked usertweets.py from last week to download 200 tweets of 15 users and store them as csv files in the data/ subdirectory. Users are mostly Pythonistas, but also some unrelated. We changed the solution a bit: instead of comparing only two users, we rank similarity of one user of the set against all others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We load all tweets per user in with get_user_tokens() and tokenize them with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def tokenize_text(words):
    words = [word for word in words if len(word) &amp;gt; 4 and word not in STOPWORDS]
    words = [word for word in words if _is_ascii(word)]
    words = [word for word in words if not IS_LINK_OBJ.search(word)]
    return words
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where IS_LINK_OBJ discards links and mentions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;IS_LINK_OBJ = re.compile(r&amp;#39;^(?:@|https?://)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get stopwords from nltk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="n"&gt;STOPWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The underscore methods are helpers. We assigned lambdas to variables, but flake8 complained, so better methods :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we use Gensim to compare a user against the set. This took quite some effort, hopefully our method is correct, the results (see further down) look promosing. We partially used &lt;a href="http://stackoverflow.com/questions/22433884/python-gensim-how-to-calculate-document-similarity-using-the-lda-model"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gensim&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c"&gt;# globbing csv files in data/ or provided with sys.argv[1:]&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LdaModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;id2word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatrixSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_bow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_bow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_lda&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interestingly this model worked kind of ok, but got different results upon running and not much polarity. It turned out that the sample Twitter set (200 tweets per user) was too small, so we created a data/new directory and used &lt;a href="https://gist.github.com/yanofsky/5436496"&gt;yanofsky's awesome tweet_dumper&lt;/a&gt; to get 3200 tweets per user. &lt;/p&gt;
&lt;p&gt;Data set before vs after:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wc -l *&lt;span class="p"&gt;|&lt;/span&gt;grep total
    &lt;span class="m"&gt;3618&lt;/span&gt; total
&lt;span class="nv"&gt;$ &lt;/span&gt;wc -l new/*&lt;span class="p"&gt;|&lt;/span&gt;grep total
   &lt;span class="m"&gt;45573&lt;/span&gt; total
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This did not make sense due to small data set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python similar_tweeters.py Pybonacci
cine_tv_es 0.999743 -&amp;gt; nothing to &lt;span class="k"&gt;do&lt;/span&gt; yet almost 1.0 ?!
github 0.999743
gvanrossum 0.455312
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new data set, although the script takes longer to run, now the results are much better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# not much Python: 
$ python similar_tweeters.py paugasol
jsonmez 0.739746
Schwarzenegger 0.739746
tferriss 0.739746
cine_tv_es 0.631373
gvanrossum 0.631373
treyhunner 0.631373
bbelderbos 0.206394
dbader_org 0.206394
newsafaribooks 0.206394
techmoneykids 0.113994
github 0.0983753
lifehacker 0.0983753
pybites 0.056072
importpython 0.0432182
PythonEggs 0.0432182
raymondh 0.0432182

# more Py
$ python similar_tweeters.py pybites
dbader_org 0.936956
importpython 0.936956
PythonEggs 0.936956
tferriss 0.936956 -&amp;gt; not sure about this one
bbelderbos 0.367078
techmoneykids 0.340996
github 0.320053
newsafaribooks 0.320053
gvanrossum 0.138829
jsonmez 0.138829
lifehacker 0.138829
Schwarzenegger 0.138829
treyhunner 0.138829
raymondh 0.0201458
cine_tv_es 0.0
paugasol 0.0

# results change upon second run - comment if you know why / how to fix or improve?
$ python similar_tweeters.py pybites
importpython 0.890289
newsafaribooks 0.890289
PythonEggs 0.890289
bbelderbos 0.506814
techmoneykids 0.443702
jsonmez 0.426503
paugasol 0.426503
Schwarzenegger 0.426503
tferriss 0.426503
github 0.138233
gvanrossum 0.138233
treyhunner 0.138233
dbader_org 0.100782 -&amp;gt; was high last run ?!
lifehacker 0.0658598
raymondh 0.0658598
cine_tv_es 0.0451122
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running one more, my personal Twitter. Also a lot of Python at the top, jsonmez/ tferriss/ pybites I have mentioned/retweeted more than once. This looks pretty good ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python similar_tweeters.py bbelderbos
dbader_org 0.985021
gvanrossum 0.985021
importpython 0.985021
jsonmez 0.985021
pybites 0.985021
PythonEggs 0.985021
tferriss 0.985021
treyhunner 0.985021
techmoneykids 0.275167
newsafaribooks 0.149423
paugasol 0.149423
Schwarzenegger 0.149423
raymondh 0.142598
cine_tv_es 0.064402
github 0.064402
lifehacker 0.0570781
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was not an easy challenge! However we learned a lot: our first NLP exploration, playing with a relatively complex library and discovering the data science part of it: the quality of your input data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we pause a bit from Twitter doing something new and original on Monday, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 10 Feb 2017 23:00:00 +0100</pubDate><guid>tag:pybit.es,2017-02-10:codechallenge05_review.html</guid><category>codechallenges</category><category>code review</category><category>learning</category><category>nlp</category><category>Twitter</category><category>twitterapi</category><category>gensim</category><category>nltk</category></item><item><title>Code Challenge 05 - Twitter data analysis Part 2: how similar are two tweeters?</title><link>http://pybit.es/codechallenge05.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Birds of a feather&lt;/h3&gt;
&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;
&lt;h3&gt;Challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a script that receives two command line args: user1 and user2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;similar_tweeters.py bbelderbos pybites
&lt;span class="c"&gt;# ... some index of similarity ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the last n tweets of these users. You can use the code of &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokenize the words in the tweets, filtering out stop words, URLs, digits, punctuation, words that only occur once or are less than 3 characters (and/or other noise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the main subjects the users tweet about. You could use &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt;, an NLP package for Topic Modeling. However feel free to take your own approach! We are dropping the helper template and external libs (requirements.txt) for this challenge, we'd love to see different approaches to this problem ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the subjects and come up with a similarity score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stay in sync with PyBites challenges repo&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# ... no helper template for this challenge ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing our and your solutions on Friday.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 06 Feb 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-02-06:codechallenge05.html</guid><category>codechallenges</category><category>learning</category><category>twitterapi</category><category>Twitter</category><category>NLP</category><category>similarity</category><category>Gensim</category></item><item><title>Code Challenge 04 - Twitter data analysis Part 1: get the data - Review</title><link>http://pybit.es/codechallenge04_review.html</link><description>&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;here&lt;/a&gt; and detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stdlib imports, pip install tweepy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we generated our keys through the Twitter API and put them in config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define some constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DEST_DIR = &amp;#39;data&amp;#39;
EXT = &amp;#39;csv&amp;#39;
NUM_TWEETS = 100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we build a tweepy api object. First we had this in the constructor (init), but second thought we set it up as a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
API = tweepy.API(auth)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we use a namedtuple to define Tweet: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Tweet = namedtuple(&amp;#39;Tweet&amp;#39;, &amp;#39;id_str created_at text&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are awesome for simple classes to store data without behaviour!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define the class, Python3 best practice is to explicitly inherit from object: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the constructor gets the handle and an optional max_id, latter is to get a fixed set of tweets which we used in test_usertweets.py: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def __init__(self, handle, max_id=None):
        self.handle = handle
        self.max_id = max_id
        self.output_file = &amp;#39;{}.{}&amp;#39;.format(os.path.join(DEST_DIR, self.handle), EXT)
        self._tweets = list(self._get_tweets())
        self._save_tweets()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we get the tweets with the _get_tweets() helper. It returns a generator of Tweet namedtuple objects containing only the get id_str, created_at and text attributes (you get a lot more returned from the Twitter API!): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def _get_tweets(self):
        tweets = API.user_timeline(self.handle, count=NUM_TWEETS, max_id=self.max_id)
        return (Tweet(s.id_str, s.created_at, s.text.replace(&amp;#39;\n&amp;#39;, &amp;#39;&amp;#39;)) for s in tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the helper _save_tweets saves tweets to a CSV file. We choose to do it in the constructor, but you can of course take the underscore (_) out and call it explicitly: obj.save_tweets():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def _save_tweets(self):
        with open(self.output_file, &amp;#39;w&amp;#39;) as f:
            writer = csv.writer(f)
            writer.writerow(Tweet._fields)
            writer.writerows(self._tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementing len and getitem lets you iterate over the tweets (see our &lt;a href="http://pybit.es/python-data-model.html"&gt;data model post&lt;/a&gt;) as done in the for loop under __main__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def __len__(self):
        return len(self._tweets)

    def __getitem__(self, pos):
        return self._tweets[pos]

if __name__ == &amp;quot;__main__&amp;quot;:

    for handle in (&amp;#39;pybites&amp;#39;, &amp;#39;techmoneykids&amp;#39;, &amp;#39;bbelderbos&amp;#39;):
        print(&amp;#39;--- {} ---&amp;#39;.format(handle))
        user = UserTweets(handle)
        for tw in user[:5]:
            print(tw)
        print()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in 0.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: twitter data changes and you don't want to call the API (slows tests down, unittests should be fast), need to look at mock ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we use this pre-work to load in tweets of various Twitter users and determine who are most similar using NLP techniques. See you on Monday ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 03 Feb 2017 17:00:00 +0100</pubDate><guid>tag:pybit.es,2017-02-03:codechallenge04_review.html</guid><category>codechallenges</category><category>code review</category><category>github</category><category>learning</category><category>tweets</category><category>Twitter</category><category>twitterapi</category><category>oop</category><category>datamodel</category><category>csv</category><category>namedtuple</category></item><item><title>Code Challenge 04 - Twitter data analysis Part 1: get the data</title><link>http://pybit.es/codechallenge04.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Write a class to retrieve tweets from the Twitter API&lt;/h3&gt;
&lt;p&gt;In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;
&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup virtual environment and install requirements&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;04
&lt;span class="nv"&gt;$ &lt;/span&gt;python3 -m venv venv
&lt;span class="c"&gt;# = py3 (might need virtualenv for py2 env)&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate 
&lt;span class="c"&gt;# install tweepy (and its depencencies)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt

&lt;span class="c"&gt;# if you want to use another package like twython, feel free to do so&lt;/span&gt;

&lt;span class="c"&gt;# get your API keys from Twitter - https://apps.twitter.com &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp config-template.py config.py
&lt;span class="c"&gt;# paste the keys in config.py&lt;/span&gt;

&lt;span class="c"&gt;# choose a template&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp usertweets-help.py usertweets.py
&lt;span class="c"&gt;# or &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp usertweets-nohelp.py usertweets.py
&lt;span class="c"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Define a class called UserTweets that takes a Twitter handle / user in its constructor. it also receives an optional max_id parameter to start from a particular tweet id. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a tweepy API object using the tokens imported from config.py (again, you can use another package if you prefer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable to hold the last 100 tweets of the user. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement len() and getitem() magic (dunder) methods to make the UserTweets object iterable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the generated data as CSV in the data subdirectory: data/some_handle.csv, columns: id_str,created_at,text&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We posted two articles this week you might find useful in this context: &lt;a href="http://pybit.es/oop-primer.html"&gt;oop primer&lt;/a&gt; and &lt;a href="http://pybit.es/python-data-model.html"&gt;Python's data model&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you decide to use Tweepy, you might want to check its &lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html"&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;For developers that like to work towards tests we included test_usertweets.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in 0.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example output&lt;/h3&gt;
&lt;p&gt;We used a namedtuple here, this is not required. Also note the tweets can differ, yet in the unittests we test a fix set (using the optional max_id parameter in the constructor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;usertweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pybites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;825629570992726017&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Twitter digest 2017 week 04 https://t.co/L3njBuBats #python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lrth&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;bbelderb&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;    &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="mi"&gt;825629570992726017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;L3njBuBats&lt;/span&gt; &lt;span class="c"&gt;#python&lt;/span&gt;
&lt;span class="mi"&gt;825267189162733569&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Challenge&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xvcLQBbvup&lt;/span&gt; &lt;span class="c"&gt;#python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 30 Jan 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-01-30:codechallenge04.html</guid><category>codechallenges</category><category>github</category><category>learning</category><category>blog</category><category>twitterapi</category><category>tweets</category><category>Twitter</category><category>oop</category><category>datamodel</category><category>magicmethods</category></item><item><title>Code Challenge 03 - PyBites blog tag analysis - Review</title><link>http://pybit.es/codechallenge03_review.html</link><description>&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/03/tags.py"&gt;here&lt;/a&gt; and commented below.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We use the stdlib to its fullest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define constants at the top. We use maketrans to easily extend replacing multiple characters in the future:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;REPLACE_CHARS = str.maketrans(&amp;#39;-&amp;#39;, &amp;#39; &amp;#39;)
IDENTICAL = 1.0
TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used a regular expression to show that you can. A better way would be to use a PyPI package like feedparser or BeautifulSoup (see further down). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;TAG_HTML = re.compile(r&amp;#39;&lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;([^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+)&lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&amp;#39;)

def get_tags():
    &amp;quot;&amp;quot;&amp;quot;Find all tags (TAG_HTML) in RSS_FEED.
    Replace dash with whitespace (REPLACE_CHARS)&amp;quot;&amp;quot;&amp;quot;
    with open(RSS_FEED) as f:
        tags = TAG_HTML.findall(f.read().lower())
    return [tag.translate(REPLACE_CHARS) for tag in tags]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For everything counting related you really want to use collections.Counter and its most_common method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def get_top_tags(tags):
    &amp;quot;&amp;quot;&amp;quot;Get the TOP_NUMBER of most common tags&amp;quot;&amp;quot;&amp;quot;
    return Counter(tags).most_common(TOP_NUMBER)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For similarities we were going to read up on &lt;a href="http://www.nltk.org/"&gt;NLTK&lt;/a&gt; but stdlib has difflib.SequenceMatcher which makes this very easy (found &lt;a href="http://stackoverflow.com/questions/17388213/find-the-similarity-percent-between-two-strings"&gt;on Stackoverflow&lt;/a&gt;). We gained quite some performance first matching the first char between tags, but this assumes the first char is always the same. If you don't want that, take that check out. We use itertools.product instead of a double for loop. Lastly yield makes get_similarities a generator which we find more Pythonic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def get_similarities(tags):
    &amp;quot;&amp;quot;&amp;quot;Find set of tags pairs with similarity ratio of &amp;gt; SIMILAR&amp;quot;&amp;quot;&amp;quot;
    for pair in product(tags, tags):
        # performance enhancements 1.992s -&amp;gt; 0.144s
        if pair[0][0] != pair[1][0]:
            continue
        pair = tuple(sorted(pair))  # set needs hashable type
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The calling code was given, printing it here for completeness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    tags = get_tags()
    top_tags = get_top_tags(tags)
    print(&amp;#39;* Top {} tags:&amp;#39;.format(TOP_NUMBER))
    for tag, count in top_tags:
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(tag, count))
    similar_tags = dict(get_similarities(tags))
    print()
    print(&amp;#39;* Similar tags:&amp;#39;)
    for singular, plural in similar_tags.items():
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(singular, plural))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests pass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout solutions
&lt;span class="nv"&gt;$ &lt;/span&gt;python test_tags.py 
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in 0.153s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Code challenges != Python's 'preferably only one way'&lt;/h2&gt;
&lt;p&gt;We know '&amp;gt;&amp;gt;&amp;gt; import this' says: "There should be one-- and preferably only one --obvious way to do it." and usually there is. Yet for our challenges we encourage people to be creative and not stick to the template + tests per se (we improve the code challenge format as we learn ...). &lt;/p&gt;
&lt;p&gt;For example Jeffrey parses our feed directly in &lt;a href="https://gist.github.com/jrjames83/eeda4324116dde12ea8d45c47a151ab0"&gt;his solution&lt;/a&gt; with requests and BeautifulSoup not stripping off the dash. This is great addition to our solution, using PyPI whenever you can is recommended. Also by parsing the live feed he created us a tool to run this check every now and then (thanks Jeffrey). We like to see different solutions.&lt;/p&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a fresh new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 27 Jan 2017 09:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-27:codechallenge03_review.html</guid><category>codechallenges</category><category>code review</category><category>github</category><category>learning</category><category>tags</category><category>similarity</category><category>blog</category></item><item><title>Code Challenge 03 - PyBites blog tag analysis</title><link>http://pybit.es/codechallenge03.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given our RSS feed what tags does PyBites mostly use and which tags should be merged (based on similarity)?&lt;/h3&gt;
&lt;p&gt;Example output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python tags.py

* Top &lt;span class="m"&gt;10&lt;/span&gt; tags:
python               10
learning             7
tips                 6
tricks               5
github               5
cleancode            5
best practices       5
pythonic             4
collections          4
beginners            4

* Similar tags:
game                 games
challenge            challenges
generator            generators
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;03
&lt;span class="nv"&gt;$ &lt;/span&gt;cp tags-help.py tags.py
&lt;span class="c"&gt;# or:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp tags-nohelp.py tags.py
&lt;span class="c"&gt;# code&lt;/span&gt;

&lt;span class="c"&gt;# run the unittests (optional)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python test_tags.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in 0.155s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we update our blog regularly we provided a recent copy of our feed in the 03 directory: rss.xml. We also provided a copy of tags.html for verification (used by unittests in test_tags.py).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both templates provide 3 constants you should use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rest is documented in the methods docstrings. Again use tags-help.py if you need more guidance, tags-nohelp.py is for the more experienced and/or if you want more freedom. Same goes for tests: use them if you need them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talking about freedom feel free to use our &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;live feed&lt;/a&gt; but then the tests will probably break.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hint: for word similarity feel free to use NLTK, or your favorite language processing tool. However, stdlib does provide a nice way to do this. Using this method we came to 0.87 as a threshold to for example not mark 'python' and 'pythonic' as similar. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 23 Jan 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-01-23:codechallenge03.html</guid><category>codechallenges</category><category>github</category><category>learning</category><category>blog</category><category>tags</category><category>Counter</category><category>similarity</category><category>regex</category></item><item><title>Code Challenge 02 - Word Values Part II - Review</title><link>http://pybit.es/codechallenge02_review.html</link><description>&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/02/game.py"&gt;here&lt;/a&gt; for the complete solution.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we had the user interface like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        if not set(word) &amp;lt; set(draw):
            print(&amp;#39;One or more characters not in draw, try again&amp;#39;)
            continue
        elif not word.lower() in DICTIONARY:
            print(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
            continue
        return word
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But after learning about &lt;a href="http://pybit.es/error_handling.html"&gt;EAFP (easier to ask for forgiveness than permission)&lt;/a&gt; we thought it was more Pythonic to use exceptions. There was also a bug in the first check above (see comments, great learning!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        try:
            return _validation(word, draw)
        except ValueError as e:
            print(e)
            continue

def _validation(word, draw):
    # thanks Durmus
    for char in word.upper():
        if char in draw:
            draw.remove(char)
        else:
        raise ValueError(&amp;quot;{} is not a valid word!&amp;quot;.format(word))
    if not word.lower() in DICTIONARY:
        raise ValueError(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
    return word
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;random.sample makes it easy to get n number of random letters in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def draw_letters():
    return random.sample(POUCH, NUM_LETTERS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_possible_dict_words - the hardest part. To get all possible letter combinations from the letter draw, you need itertools.permutations, not combinations, because order does matter: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; len(list(itertools.combinations(letters, 2)))
21
&amp;gt;&amp;gt;&amp;gt; len(list(itertools.permutations(letters, 2)))
42
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://pybit.es/itertools-examples.html"&gt;our post on itertools&lt;/a&gt;. See also Durmus' comment / solution here for an alternative using combinations ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First the helper generator to do the work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))  # &amp;gt;= 3.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates all permutation of 1, 2, 3, 4, 5, 6, and 7 letters.&lt;/p&gt;
&lt;p&gt;We store all those in permutations and then use a set operation again to get all valid dictionary words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def get_possible_dict_words(draw):
    permutations = [&amp;#39;&amp;#39;.join(word).lower() for word in _get_permutations_draw(draw)]
    return set(permutations) &amp;amp; set(DICTIONARY)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the calc_word_value and max_word_value methods from &lt;a href="http://pybit.es/codechallenge01.html"&gt;challenge 01&lt;/a&gt; to calculate which word has the most value. &lt;/p&gt;
&lt;p&gt;The rest is main() calling the methods and outputting (as was provided in the template).&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;We got a request in the comments for tests to verify the work. Good idea, they are &lt;a href="https://github.com/pybites/challenges/blob/master/02/test_game.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python test_game.py 
......
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in 0.056s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Its fun (addictive?) to play :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: T, I, I, G, T, T, L
Form a valid word: tig
Word chosen: TIG (value: 4)
Optimal word possible: gilt (value: 5)
You scored: 80.0
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: O, N, V, R, A, Z, H
Form a valid word: zar
Word chosen: ZAR (value: 12)
Optimal word possible: zonar (value: 14)
You scored: 85.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: E, P, A, E, I, O, A
Form a valid word: pi
Word chosen: PI (value: 4)
Optimal word possible: apio (value: 6)
You scored: 66.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: B, R, C, O, O, E, O
Form a valid word: broc
Not a valid dictionary word, try again
Form a valid word: f
One or more characters not in draw, try again
Form a valid word: bore
Word chosen: BORE (value: 6)
Optimal word possible: boce (value: 8)
You scored: 75.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 20 Jan 2017 09:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-20:codechallenge02_review.html</guid><category>codechallenges</category><category>code review</category><category>github</category><category>learning</category><category>game</category><category>scrabble</category><category>itertools</category></item><item><title>Code Challenge 02 - Word Values Part II - a simple game</title><link>http://pybit.es/codechallenge02.html</link><description>&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given a random set of 7 letters build the most valuable word&lt;/h3&gt;
&lt;p&gt;Using what we've learned &lt;a href="http://pybit.es/codechallenge01.html"&gt;the last challenge&lt;/a&gt; this week we build a simple Scrabble-like game (without board):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Letters drawn: G, A, R, Y, T, E, V
Form a valid word: gary  &amp;lt;&amp;lt; user input
Word chosen: GARY (value: 8)
Optimal word possible: GARVEY (value: 13)
You scored: 61.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;02
&lt;span class="nv"&gt;$ &lt;/span&gt;cp game-TEMPLATE.py game.py
&lt;span class="c"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;p&gt;Last time we provided unittests and a guiding template. We received feedback that this was a bit too stringent. Therefore we provide two templates this time: game-help.py and game-nohelp.py&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We load in the necessary data structures to focus on the game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Note that DICTIONARY is a set for O(1) lookups&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LETTER_VALUES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POUCH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw 7 random letters from POUCH.&lt;/p&gt;
&lt;p&gt;As said POUCH is given and contains a distribution of Scrabble letters so that the player gets enough vowels (equally drawing A-Z makes it extremely hard because you need more vowels to make words):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;C&amp;#39;,
&amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, ...]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the player to form a word with one or more of the 7 letters of the draw. Validate input for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1) all letters of word are in draw;
2) word is in DICTIONARY.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the word value and show it to the player.&lt;/p&gt;
&lt;p&gt;To focus on this challenge we re-use two methods from the previous challenge for this: calc_word_value and max_word_value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the optimal word (= max word value) checking all permutations of the 7 letters of the draw, cross-checking the DICTIONARY set for valid ones. This is a bit more advanced, but allows you to score the player (next).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show the player what the optimal word and its value is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give the player a score based on the previous steps, basically: player_score / optimal_score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus (not required)&lt;/h3&gt;
&lt;p&gt;The optimal solution calculation might be a bit difficult for some, that's why we stop here. But if you are feeling creative you might consider expanding this game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep scores in a shelve (file, db) and notify the player when a new record is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with hints and bonuses: hints cost x points, give a bonus of y points, for example when a 7 letter word is created (complete draw exhausted).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a simple web, mobile app or pygame.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 16 Jan 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-01-16:codechallenge02.html</guid><category>scrabble</category><category>codechallenges</category><category>github</category><category>fork</category><category>learning</category><category>game</category><category>itertools</category><category>random</category><category>sets</category></item><item><title>Code Challenge 01 - Word Values Part I - Review</title><link>http://pybit.es/codechallenge01_review.html</link><description>&lt;h2&gt;Thanks for coding with us!&lt;/h2&gt;
&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's so cool to see &lt;a href="https://github.com/pybites/challenges/network/members"&gt;many developers&lt;/a&gt; jump on this :) &lt;/p&gt;
&lt;p&gt;This is awesome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="awesome response on github, 70 forks as of this writing" src="http://pybit.es/images/awesome-response.png" /&gt;&lt;/p&gt;
&lt;p&gt;It's Friday so we review the code challenge of this week. We describe our learning, a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Process and learning&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Julian&lt;/h3&gt;
&lt;p&gt;It's funny, going into this challenge I actually thought it was going to be easy! I was wrong!
The concept was simple enough and I had a decent idea as to how I was going to write the program. I hit a wall however, when I realised I had to code my answer within the framework of the unittest. &lt;/p&gt;
&lt;p&gt;As a newbie programmer, having to almost "restrict" my code to work with the unittest was quite difficult.
Furthermore, working with the external data.py file also added a little complexity. I'm definitely used to having all data and variables located in the local file I'm working on.&lt;/p&gt;
&lt;p&gt;Probably the biggest pain point was trying to work with the LETTER_SCORES dict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LETTER_SCORES = {letter: score for score, letters in scrabble_scores
                              for letter in letters.split()}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The for loop within the dict threw me off completely and I spent what felt like hours trying to make sense of it. It wasn't until Bob expanded it out into multiple lines of code that it finally made sense.&lt;/p&gt;
&lt;p&gt;On the flip side, I was pleasantly surprised with myself when I got the load_words() function working. I recalled Bob's comment on my code that I could use 'with' (context manager) to open an external file. Doing this made it much simpler.&lt;/p&gt;
&lt;p&gt;Working on the max_word_value() function was equally as satisfying as it was much more familiar coding ... but that may not be a good thing.&lt;/p&gt;
&lt;p&gt;In the end I wasn't actually able to get the program working. Not my proudest moment but definitely an eye opener as to how much further I have to go with my code. I'll hopefully have time this weekend to take another look - maybe a fresh look after a day off will highlight something I missed earlier!&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/hobojoe1848/challenges/tree/master/01"&gt;here&lt;/a&gt; if you're interested! Be gentle!&lt;/p&gt;
&lt;p&gt;Going forward with these challenges, I think we'll try and shake it up a little. Not make it "mandatory" to code the program within the unittest framework which should allow us to get a more diverse code base from the community.&lt;/p&gt;
&lt;p&gt;Overall, while difficult for me and even frustrating at times, I definitely enjoyed the challenge. It forced me to learn to read code I'd never seen before and rethink the way I write it myself.&lt;/p&gt;
&lt;h2&gt;Possible solution and Python idioms&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Bob&lt;/h3&gt;
&lt;p&gt;This was a good exercise. As Julian said we might leave out unittests next time to make it less stringent and make up other requirements like max LOC. We also will provide two template files: beginner (more hand-holding) and advanced (almost blank file). You will see it on Monday ...&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/bbelderbos/challenges/blob/master/01/wordvalue.py"&gt;here&lt;/a&gt;. Some comments:&lt;/p&gt;
&lt;h4&gt;load_words()&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def load_words():
    with open(DICTIONARY) as f:
        return [word.strip() for word in f.read().split()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, "with" is the way to go to open files. Initially I had return f.read().split() but then I saw the comment of &lt;a href="http://pybit.es/codechallenge01.html"&gt;sesh00&lt;/a&gt;: he used a list comprehension to make sure each word had whitespace stripped which is a good approach.&lt;/p&gt;
&lt;h4&gt;calc_word_value(word)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def calc_word_value(word):
    return sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dictionary. You can access values by using letter keys as LETTER_SCORES['A'] etc, but what if there is a non-valid character? There were two words with '-' in it so they would cause a KeyError. Using the dict get() method you can give it a default value of 0. Safety first: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; 
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Christophe&lt;/span&gt;
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pierre&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jean-Christophe&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For another more verbose (cleaner?) way to write this see &lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scores = [LETTER_SCORES[letter] for letter in letters 
            if letter in LETTER_SCORES.keys()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I use sum() to add up all letter values. You can give it a list comprehension but also a generator which is best practice (lazy loading):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# sum with list comprehension
&amp;gt;&amp;gt;&amp;gt; sum([LETTER_SCORES.get(c.upper(), 0) for c in word])
31
# or with a generator, just drop the []
&amp;gt;&amp;gt;&amp;gt; sum(LETTER_SCORES.get(c.upper(), 0) for c in word)
31
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can totally write just a for loop and sum to a total variable. And as a beginner I encourage you to actually do this to get a feel for how an iterator works internally.&lt;/p&gt;
&lt;h4&gt;max_word_value(words)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def max_word_value(words=None):
    return max(words or load_words(), key=lambda w: calc_word_value(w))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might be advanced to a beginner. To pass the unittests you have to account for two scenarios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A word list is given, if not load the default dictionary, I do this in one statement with or, using default arg None for words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a criteria for max.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The max builtin calculates the max of an iterator, very convenient here. The cool thing is that it takes a key optional argument (like the sorted() builtin) which you can give a function to 'max on'. &lt;/p&gt;
&lt;p&gt;In this case I don't want to max on for example len of word, but on the word value, so we re-use calc_word_value() here. For more details on this I recommend reading &lt;a href="https://dbader.org/blog/python-min-max-and-nested-lists"&gt;this great article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PyBites digest of comments on Monday's challenge post&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="http://pybit.es/codechallenge01.html#disqus_thread"&gt;your comments&lt;/a&gt;. We are really stoked to learn about all these different approaches. Also you cannot read enough other developers' code, it's a great way to learn fast!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We already mentioned &lt;a href="https://github.com/sesh/challenges/blob/master/01/wordvalue.py"&gt;Sesh' solution&lt;/a&gt;, similar to ours, yet still some minor differences / improvements. Queston for the comments (anybody?): words=load_words() as default arg to max_word_value(), probably not a problem here, but doesn't that fall under the &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;Mutable Default Arguments gotcha&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ukaratay/challenges/blob/master/01/wordvalue.py"&gt;ukaratay solution&lt;/a&gt; is also similar, but he uses upper() on the word = 1 call instead my multiple calls for each char = better. Tiny details but they matter when you add them up and when things scale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;return sum(LETTER_SCORES.get(char, 0) for char in word.upper())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/alhart2015/challenges/blob/master/01/wordvalue.py"&gt;alhart2015 solution&lt;/a&gt; is a great addition, specially max_word_value() has a longer format, probably easier to read to people just starting out in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;check out this notebook&lt;/a&gt;, Jeffrey James shared a complete Pandas solution. The cool thing about this approach is that it calculates the score for each dictionary word and loads it into a Pandas dataframe which he uses to show us the relationship between word length and score, interesting. Well done and thanks Jeffrey!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Fri, 13 Jan 2017 12:40:00 +0100</pubDate><guid>tag:pybit.es,2017-01-13:codechallenge01_review.html</guid><category>codechallenges</category><category>code review</category><category>HN</category><category>github</category><category>learning</category><category>max</category><category>generators</category><category>scrabble</category><category>refactoring</category></item><item><title>Code Challenge 01 - Word Values Part I</title><link>http://pybit.es/codechallenge01.html</link><description>&lt;h2&gt;Welcome to PyBites Code Challenges&lt;/h2&gt;
&lt;p&gt;Starting today every Monday we release a code challenge here on our blog.
On Friday we publish one or more solutions.&lt;/p&gt;
&lt;p&gt;The goal is to have us and our readers work on the solution during the week.&lt;/p&gt;
&lt;p&gt;To keep it simple we don't accept pull-requests at this time.
Just &lt;a href="https://github.com/pybites/challenges"&gt;fork our repo&lt;/a&gt; and work on your solution locally.&lt;/p&gt;
&lt;p&gt;To have the tests pass import the right module, do this when you have a local clone of the fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;challenge_number&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;this &lt;span class="nv"&gt;week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 01&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cp name-template name.py
&lt;span class="c"&gt;# code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to share your solution just share your commit link in the comments of our Friday review post. 
(Monday post = questions / Friday post = solutions + reflection).&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;this link&lt;/a&gt; how to keep your fork in sync with our repo.&lt;/p&gt;
&lt;p&gt;Remember, we don't strive for the 'best' solution, it's not a competition.
We do of course strive to have good Pythonic solutions so any feedback is welcome, but do respect the newby / learner.
Again, learning more + better Python is the main objective. &lt;/p&gt;
&lt;p&gt;Finally we believe fixing code challenges is a very effective way to become a better programmer.&lt;/p&gt;
&lt;h2&gt;Ready for a code challenge? Read on ...&lt;/h2&gt;
&lt;p&gt;This week you will write a script to calculate the (language) dictionary word that would have the most value in Scrabble. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read in dictionary.txt (a copy of /usr/share/dict/words on my Mac) and calculate the word that has the most value in Scrabble based on LETTER_SCORES which is imported in wordvalue-template.py.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the full code challenge &lt;a href="https://github.com/pybites/challenges/tree/master/01"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be a two-part code challenge. Next week you will expand on this building a simple command line game. Something like giving a user a bunch of letters and let him/her create a high-value word (like Scrabble but without the board).&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges"&gt;Fork our repo&lt;/a&gt; and get coding ... have fun!&lt;/p&gt;
&lt;h2&gt;Like this idea?&lt;/h2&gt;
&lt;p&gt;Any feedback or comments are welcome below or &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;on HN&lt;/a&gt;. Thanks for trying!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Bob + Julian &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">PyBites</dc:creator><pubDate>Mon, 09 Jan 2017 09:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-09:codechallenge01.html</guid><category>scrabble</category><category>tdd</category><category>codechallenges</category><category>github</category><category>learning</category></item><item><title>Code Challenge Pilot - code review</title><link>http://pybit.es/challenge_pilot_codereview.html</link><description>&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;First of all we have to praise Julian for learning by challenge, &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;submitting his code to github&lt;/a&gt; for review, starting out as a coder this takes tremendous courage. Quick round of applause please ...&lt;/p&gt;
&lt;p&gt;The flip-side though is that he will learn super fast his way, he is on his way to become a Python ninja :)&lt;/p&gt;
&lt;p&gt;As described in &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;the previous article&lt;/a&gt; our first challenge was to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parse a copy of the loggedin &lt;a href="https://watchandcode.com/p/practical-javascript"&gt;practical JS course page&lt;/a&gt; calculating the total course time. We focussed on the html parsing, not scraping for now (we will use BeautifulSoup in a future post for sure!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted code is &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Refactoring 1.0 - making it more Pythonic&lt;/h2&gt;
&lt;p&gt;Enter the code review.&lt;/p&gt;
&lt;p&gt;Github's &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; lets you browse all the commits. This is very convenient and it shows the benefit (best practice) of making git commits as small as possible. This actually made it very easy to show all refactorings in chronological order, which I will do in a bit.&lt;/p&gt;
&lt;h3&gt;Before we dive in ...&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that starting 5a34e5a, I ran the script before each commit to see if my assert would work (regression). &lt;/p&gt;
&lt;p&gt;For convenience I use this shortcut in my .vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nmap ,p :w&amp;lt;CR&amp;gt;:!python3.6 %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love this shortcut. This way I can just press comma+p and it saves the script and runs it, this saves a lot of cycles as you do this over and over (run tests -&amp;gt; refactor -&amp;gt; run tests). &lt;/p&gt;
&lt;p&gt;Ah and yes, you &lt;a href="http://pybit.es/3.6_new.html"&gt;probably want to try 3.6 by now&lt;/a&gt; ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly below could be picky (sorry), but I just want to point out as many things as possible to get the most out of this exercise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again see the &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; or clone our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and go through it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log --oneline --reverse 66fb7c7fe..9876f968b
&lt;span class="nv"&gt;$ &lt;/span&gt;git show &amp;lt;commit-hash&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commit by commit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1f4dc534d43ec2c8582a890a15fb54486b58af39"&gt;1f4dc53 add jul challenge script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9dcbd27ed348a5d9da0f9e68e2164fcfb7a7a6cd"&gt;9dcbd27 added html to kata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First I added the script to our &lt;a href="https://github.com/pybites/blog_code/tree/master/katas"&gt;katas&lt;/a&gt; folder of our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and the copy+paste of the page content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/ce498d71e0316b2ecf7c4c9884fb988ba3a32c5d"&gt;ce498d7 add assert for regression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you refactor always have your tests at hand to make sure you don't mess anything up. This was just a small script so an assert was enough, whatever you use (unittest, pytest, ...) the tests need to perform fast, because you run them often (every step).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;assert str(total_hours) == &amp;#39;6.841944444444445&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/5a34e5a7d4ff1bf2251851aabc18c736a62aeecc"&gt;5a34e5a add calling code in main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I added the &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;Top-level script environment&lt;/a&gt; to prevent the prints to run if the module is imported: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if __name__ == &amp;quot;__main__&amp;quot;:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/dad9b5537a989a1aed02a61f685ead874e12794e"&gt;dad9b55 no need to pass file around, we have a constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The search_file() method was called with an argument called 'file', but the constant 'HTML_FILE' was already defined, so could just use that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9d682fa943bf3ab461b6f48dba50b646491b12e5"&gt;9d682fa extract time_regex into constant&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was defined in search_file, being a constant I moved it to the top of the file and used PEP8's uppercase convention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;TIME_REGEX = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/57334a65de1b8a01aa852f222141f9e36e0a558c"&gt;57334a6 use open in with block to auto-close file handle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open(HTML_FILE).read() was used without close(). Best practice for reading files is using a with block (aka &lt;a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"&gt;contextmanager&lt;/a&gt;): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;with open(HTML_FILE) as f:
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1147bd08424a1c638661bc840bf6851c8d579873"&gt;1147bd0 no need for range, can just loop over duration iterator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is probably an inherited C (or other language) style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No list indexing needed, in Python you can just iterate over a sequence very easily with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for mm_ss in durations:
    minutes, seconds = mm_ss.strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/bc6ee8a93a4f622687f8811ed571da1ef30c38c7"&gt;bc6ee8a can use shortcut += for summing&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum_minutes = sum_minutes + int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be shortened to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum_minutes += int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9ff89d123165167c0fde3f0163f1e54fca2f22c3"&gt;9ff89d1 better method name for getting all timestamps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I renamed method search_file() to get_all_timestamps() to better express what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f5db0134ec7e614e9992720fca5dea5cd15f2e12"&gt;f5db013 no need to predeclare time_list at module level&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_list = [] declaration at the top was redundant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;f862652 one return value from time_calculation, so convert all to seconds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_calculation() returned minutes and seconds, it's best practices to have one return value from a function, so I refactored it to count seconds. Of course I had to update the prints in &lt;strong&gt;main&lt;/strong&gt;, but this commit made the design cleaner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;752394b match method name last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Renamed time_calculation() to calc_duration() which I found a bit more concise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/026b9c545250247981382d4c31b6327b11113b94"&gt;026b9c5 update comments after last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deleted 'min(s)' (minutes) from comments as we went for second counting only since commit f862652.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e4fad918f34174d58889916a85cfe6972b3db467"&gt;e4fad91 strip comments as code is pretty self explanatory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decided to strip comments completely because the code expresses well what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/76d1b297ede0871fe285babe6e841dc532e62eaf"&gt;76d1b29 strivariable rename&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oops on the commit message. Renamed time_list to video_timings to better express what the variable stores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/d026a7f0c7999821e07b16a46255207e6ccd0da4"&gt;d026a7f do adding/summing on one line&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN
sum_seconds += int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was still happening twice, so made that a one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN + int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e45ce53e3407e25a648225829f2086e8a9020011"&gt;e45ce53 extract colon seperator into constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I see any literal values, either numeric or strings, I extract them into constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;MM_SS_SEP = &amp;#39;:&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9876f968b49745b599e4bc9716802677956c8b46"&gt;9876f96 removed whitespaces to comply with pep8 (used flake8 vim plugin)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lastly I ran flake8, which we mentioned &lt;a href="http://pybit.es/pep8.html"&gt;in our PEP8 article&lt;/a&gt;, to check for style violations, in this case only some whitespaces and a blank line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Julian, very well done on the challenge man, you are making good progress.&lt;/p&gt;
&lt;p&gt;I hope this inspires you and the readers to think about making code as Pythonic and clean as possible, because the extra time upfront saves a lot of time later on.&lt;/p&gt;
&lt;p&gt;Any feedback or questions use the comments below, or if code specific: use the comment box Github has for each commit. &lt;/p&gt;
&lt;p&gt;These refactorings are suggestions, I am learning too, so any improvements are welcome ...&lt;/p&gt;
&lt;h2&gt;About Code challenges&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;Julian explained&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We plan to do a code challenge here once a week. Stay tuned.&lt;/p&gt;
&lt;p&gt;If you like this subscribe below of follow us on &lt;a href="https://twitter.com/pybites"&gt;Twitter&lt;/a&gt;. Thanks for reading.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Thu, 05 Jan 2017 09:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-05:challenge_pilot_codereview.html</guid><category>codechallenges</category><category>refactoring</category><category>code review</category><category>bestpractices</category><category>pythonic</category><category>git</category><category>Github</category><category>git flow</category><category>vim</category><category>assert</category></item><item><title>Code Challenge Pilot - calculate total time JS course</title><link>http://pybit.es/js_time_scraper_ch.html</link><description>&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;p&gt;This will not only improve my Python and his code review skills but should also (hopefully!) provide you with something interesting or at least entertaining, to read.&lt;/p&gt;
&lt;p&gt;Feel free to give any feedback or improvements of your own in the comments below!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Bob discovered a free, online &lt;a href="https://watchandcode.com/courses/enrolled/practical-javascript"&gt;Javascript Course&lt;/a&gt; that he felt would be useful to us. On creating an account you're faced with the below course content list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JS Course Content Listing" src="images/js_course_screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;The problem is that while each module/video displays its own duration, there's no course total time listed anywhere.&lt;/p&gt;
&lt;p&gt;Enter the Challenge: Create a web scraper that parses the page and then calculates the total course time.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;My&lt;/em&gt; final code can be located &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;). Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Limitations and Complications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main content page is behind a login. How the heck was I supposed to automate a scraper to log into the site with my creds and then pull the page?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I manually right-clicked and selected 'Save As' (on Windows) to save the page as an html file but when I tried to parse the file with BeautifulSoup I consistently hit an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;I initially wanted to use BeautifulSoup for this but as I kept hitting the aforementioned error and was running out of time (sleep!) I decided to keep it simple, albeit a little manual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I highlighted the entire page and saved it as plain text into a file titled "content.html".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The program is to be created in the same directory as the content.html file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Moments and Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The program could have easily been a single, huge block of code but I decided it was best to split each 'job' into a different function. There are 2 functions in total:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Read in the HTML file and search it using my time regex
def search_file(file)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;#Strip out the brackets and the colon to calculate the mins and seconds
def time_calculation(durations)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Creating the time search regex. This was the real challenge for me! While I'd used regex before it was definitely a challenge to search for a time string. The complexity was in coding the regex to search for both single minutes and double digit minutes, eg: 7:43 and 10:43. (As the times are all within ()s on the page, it was easier to include the braces in the regex):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;) #Creating the regex
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Stripping away the unecessary bits so I could work with the raw numbers. I used the strip() and split() methods for this. Admittedly, I was stoked when I realised I could use them both in one line of code (it's the small wins). This was done within a for loop to iterate over the list created by the regex search:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#For loop to strip brackets/colon and assign the mins/seconds
for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;The program eventually worked! I was able to calculate that the course took roughly 6.8hrs to complete.&lt;/p&gt;
&lt;h2&gt;Thoughts and Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I was bummed I didn't actually get the traditional web scrape working at the time. I would like to figure out where I went wrong with that so I can use BeautifulSoup to properly scrape the content.html file. (I'd already found the css I needed to search damnit!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 30 lines of code in this program. I believe there are lines that can be refactored to do multiple assignments and calculations on a single line. Eg: The for loop that strips the brackets and colon also adds the mins and seconds - I'm sure it can be improved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion and Next Step&lt;/h2&gt;
&lt;p&gt;As annoyed as I got at certain points, I actually enjoyed this. Problem wise it's as simple as they come but it forced me to revisit the basics of regex and string manipulation.&lt;/p&gt;
&lt;p&gt;As I write this I'm getting github commit notifications of Bob refactoring and commenting so I know he's hard at work making my code as Pythonic as possible.
Tomorrow's post will be his feedback... go easy on me brother!&lt;/p&gt;
&lt;p&gt;(Again, find &lt;em&gt;my&lt;/em&gt; code for this challenge &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;. Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Wed, 04 Jan 2017 20:01:00 +0100</pubDate><guid>tag:pybit.es,2017-01-04:js_time_scraper_ch.html</guid><category>codechallenges</category><category>learning</category><category>python</category><category>beginners</category><category>code</category></item></channel></rss>