<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyBites</title><link>http://pybit.es/</link><description>Python code challenges, tutorials and news, one bite a day</description><atom:link href="http://pybit.es/feeds/tools.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 01 Feb 2017 11:30:00 +0100</lastBuildDate><item><title>Send Advanced Emails with Python MIME Submodules</title><link>http://pybit.es/python-MIME.html</link><description>&lt;p&gt;In my earlier post on &lt;a href="http://pybit.es/python-smtplib.html"&gt;sending basic emails with Python smtplib&lt;/a&gt; I outlined the bare minimum required to send an email with Python.&lt;/p&gt;
&lt;p&gt;While functional, it does however lack more advanced features which I'll touch on in this post. We'll be using the MIME email submodules to create a richer email.&lt;/p&gt;
&lt;h2&gt;What is MIME?&lt;/h2&gt;
&lt;p&gt;For those who are unaware, MIME (Multipurpose Internet Mail Extensions) is a standard that essentially makes emails more functional. As per the &lt;a href="https://en.wikipedia.org/wiki/MIME"&gt;Wikipedia Article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multipurpose Internet Mail Extensions (MIME) is an Internet standard that extends the format of email to support:
- Text in character sets other than ASCII
- Non-text attachments: audio, video, images, application programs etc.
- Message bodies with multiple parts
- Header information in non-ASCII character sets&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;You'll need to import &lt;em&gt;smtplib&lt;/em&gt; as expected but also the MIME submodules "MIMEMultipart" and "MIMEText":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data Entry&lt;/h2&gt;
&lt;p&gt;Next we'll add the missing header detail to the email. I aimed to make this as Pythonic as possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;from_addr = &amp;#39;pybitesblog@gmail.com&amp;#39;
to_addr = [&amp;#39;bob@rocks.com&amp;#39;, &amp;#39;julian_is@awesome.com&amp;#39;]
msg = MIMEMultipart()
msg[&amp;#39;From&amp;#39;] = from_addr
msg[&amp;#39;To&amp;#39;] = &amp;quot;, &amp;quot;.join(to_addr)
msg[&amp;#39;Subject&amp;#39;] = &amp;#39;Test Automation Email&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking that down line by line:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assign your from/sender email address to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assin your recipient address or addresses to a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign the MIMEMultipart function to variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your sender email address variable to the 'From' value in MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign your recipient addresses to the 'To' value in MIME. Note the .join function is used here to concatenate the email addresses with a comma.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify your Subject Line and add it to MIME.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now for the meat. Add the text for the body of your email and again add it to MIME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;body = &amp;quot;Hello Everyone!&amp;quot;

msg.attach(MIMEText(body, &amp;#39;plain&amp;#39;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've added the data in the body variable to MIMEText in plain text format. You can specify HTML if you wish.&lt;/p&gt;
&lt;h2&gt;Send the Email&lt;/h2&gt;
&lt;p&gt;I'll be reusing the code from the simple email article here with a small addition. First the standard code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server = smtplib.SMTP(&amp;#39;smtp.gmail.com&amp;#39;, 587) #Specify Gmail Mail server

smtp_server.ehlo() #Send mandatory &amp;#39;hello&amp;#39; message to SMTP server

smtp_server.starttls() #Start TLS Encryption as we&amp;#39;re not using SSL.

#Login to gmail: Account | Password
smtp_server.login(&amp;#39; pybitesblog@gmail.com &amp;#39;, &amp;#39; GMAIL APPLICATION PASSWORD &amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The additional code is in the sendmail function. We now need to specify the text that we're sending. That is, we take all of the data that was added to the MIMEMultipart function (&lt;em&gt;msg&lt;/em&gt; variable) and we use it to populate the email:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;text = msg.as_string()

#Compile email: From, To, Email body
smtp_server.sendmail(from_addr, to_addr, text)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, best practice, we close off the SMTP connection and in this case, print a message to indicate the email was sent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.quit()
print(&amp;#39;Email sent successfully&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using this framework you can start to send more and more detailed emails. MIME allows you to send attachments which opens all sorts of doors.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://docs.python.org/3/library/email-examples.html"&gt;Python 3 Docs on Email&lt;/a&gt; to see some other detailed examples. I like the idea of the HTML message with an alternative plain text version. Very cool!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Wed, 01 Feb 2017 11:30:00 +0100</pubDate><guid>tag:pybit.es,2017-02-01:python-MIME.html</guid><category>python</category><category>tips</category><category>tricks</category><category>code</category><category>pybites</category><category>email</category><category>automation</category><category>MIME</category></item><item><title>Send Emails with Python smtplib</title><link>http://pybit.es/python-smtplib.html</link><description>&lt;p&gt;I was recently given a &lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt; as a gift and figured it'd make a cool host for cron jobs. I've always wanted to set up an email notification service for myself so I started playing around with &lt;em&gt;smtplib&lt;/em&gt; in Python.&lt;/p&gt;
&lt;h2&gt;Set up an Application Password with Gmail&lt;/h2&gt;
&lt;p&gt;It was surprisingly simple to send a basic email using my Gmail account. The complexity came from Google's 2-step Verification security settings. If using Gmail, you'll need to &lt;a href="https://support.google.com/accounts/answer/185833?hl=en"&gt;set up an Application Password&lt;/a&gt; for the machine you're running your Py script from.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once generated, the App Password will be your Gmail Password for this script.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Sending a Basic Email&lt;/h2&gt;
&lt;p&gt;The first thing you should try is sending the simplest of emails. Just plain text.&lt;/p&gt;
&lt;p&gt;There are a few steps, which I'll detail one by one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import the smtplib module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using smtplib, specify the SMTP server and port you'll be accessing. In this example I'm using Gmail's servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smptlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SMTP server you're connecting to requires a sort of 'handshake' for the service to work properly. This is done using the .ehlo() function of smtplib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.ehlo()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As Google doesn't use SSL, we need to kick off TLS Encryption manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.starttls()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now for the login. Keep in mind at this point, you'll use the App Password you obtained earlier instead of your usual Gmail password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.login(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we send the actual email message. The first email address is the address you're emailing from, the second is the recipient.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.sendmail(&amp;#39;pybitesblog@gmail.com&amp;#39;, &amp;#39;recipient@gmail.com&amp;#39;, &amp;#39;Subject: Happy Australia Day!\nHi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Things to note in the above. The \n is mandatory. It's what separates your Subject line from the body of the email. Note: if you're running this in IDLE, when the email is sent successfully, you'll see '{}' characters appear as the return message. If part of a script, you can always add a print statement or other to show this instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, disconnect from the SMTP server when complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;smtp_server.quit()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we're done! Here's the/my final code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;App Password&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pybitesblog@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;recipient@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Subject: Happy Australia Day!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Hi Everyone! Happy Australia Day! Cheers, Julian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;smtp_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Email sent successfully&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Clearly this is as basic as it gets. Moving forward you'll want the ability to send more detailed emails with some essence of formatting.&lt;/p&gt;
&lt;p&gt;To do this you'll need to import the MIME (Multipurpose Internet Mail Extensions) modules into your script.&lt;/p&gt;
&lt;p&gt;I want to expand on this current email example and will do so my next post. It also allows us to make the code a little more Pythonic!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 26 Jan 2017 19:25:00 +0100</pubDate><guid>tag:pybit.es,2017-01-26:python-smtplib.html</guid><category>python</category><category>tips</category><category>tricks</category><category>code</category><category>pybites</category><category>email</category><category>automation</category></item><item><title>List of Awesome Python Resources</title><link>http://pybit.es/awesome_python_resources.html</link><description>&lt;p&gt;One of the best feelings is when you stumble across content that is so helpful and exciting you just want to dance.&lt;/p&gt;
&lt;p&gt;Our latest discovery: &lt;a href="https://github.com/vinta/awesome-python"&gt;An incredibly well populated list of Python resources&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Awesome Python&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Awesome Python&lt;/em&gt; is a detailed list of Python frameworks, libraries, software and other resources, ranging from Cryptography and Command-line Tools to Machine Learning (Bob!) and alternative Package Repos!&lt;/p&gt;
&lt;p&gt;If you haven't by now, I suggest you Star this github repo or Fork it yourself. The repo is the backend for the website: &lt;a href="http://awesome-python.com"&gt;http://awesome-python.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;My Picks&lt;/h2&gt;
&lt;p&gt;I've only just scratched the surface of the content here but I already have a few favourites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nvbn/thefuck"&gt;&lt;strong&gt;thefuck&lt;/strong&gt;&lt;/a&gt;: Don't mind the name! This is a super handy CLI tool that will intelligently correct your previous cli command if you get it wrong. All you do is type the F bomb and it'll automatically correct your command. Check out the readme to see a demo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/a&gt;: I've been wanting to get into Python web frameworks for a while. Flask is going to be my... route (pun intended!) in. Adding this to my "to-learn" list!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/vinta/awesome-python#job-scheduler"&gt;&lt;strong&gt;Job Scheduler Options&lt;/strong&gt;&lt;/a&gt;: Cron was all I had regarding scheduling. Seeing this category on &lt;em&gt;awesome-python&lt;/em&gt; made me smile. I'm looking forward to checking each of these options out to see which one works best for me. Python everything!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Your Picks?&lt;/h2&gt;
&lt;p&gt;Just these three alone will keep me busy for a while. The GUI entries also intrigue me as I'd love to see how you can use Python to make a nice GUI.&lt;/p&gt;
&lt;p&gt;So much to learn! Check the list out and let us know what interests you the most. Feel free to share if you have any other cool tools that aren't listed on the site!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python.&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Tue, 17 Jan 2017 00:01:00 +0100</pubDate><guid>tag:pybit.es,2017-01-17:awesome_python_resources.html</guid><category>python</category><category>tips</category><category>tricks</category><category>resources</category><category>flask</category><category>cron</category><category>tools</category></item><item><title>Create a Simple Web Scraper with BeautifulSoup4</title><link>http://pybit.es/simplewebscraper.html</link><description>&lt;p&gt;I absolutely loved the idea of web scraping when Bob explained what it was (it sounded so spy-like and hackery!). It did however sound like something that, coding-wise, was completely out of my grasp. Once I dove in and tried to create one though I realised it was actually quite simple!&lt;/p&gt;
&lt;h2&gt;Concept&lt;/h2&gt;
&lt;p&gt;Create a web scraper that probes a site for the latest headlines.&lt;/p&gt;
&lt;p&gt;For my example, I'm going to scrape &lt;a href="http://wowhead.com"&gt;wowhead.com&lt;/a&gt;, a World of Warcraft database site, for their latest news headlines.&lt;/p&gt;
&lt;p&gt;Head to the &lt;em&gt;Wowhead&lt;/em&gt; page and you'll see their home page is just a series of news/blog posts. What we want to do is pull the title of each blog post and output it to text.&lt;/p&gt;
&lt;p&gt;(You can follow along with this or, of course, you can use your own site).&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Decide on the site to scrape.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;Create a venv&lt;/a&gt; to run all of this up in. I created a directory called "wowhead" for this and created the venv in that:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# pwd
wowhead
# ls
venv    wowhead_scraper.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;pip install bs4 requests (Install the BeautifulSoup4 (bs4) and Requests modules)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Code&lt;/h2&gt;
&lt;p&gt;The final code for this simple scraper can be found in the &lt;a href="https://github.com/pybites/blog_code"&gt;PyBites Code Repo&lt;/a&gt;, subdirectory &lt;a href="https://github.com/pybites/blog_code/tree/master/BeautifulSoup"&gt;BeautifulSoup&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I've lumped everything under the main() function. This is a really simple program and I wanted to keep it as readable as possible, thus it's not all split into different functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;After the initial code setup of importing modules and defining main, the first task is to grab a copy of the site's html file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;URL = &amp;quot;http://www.wowhead.com&amp;quot;
header_list = []

def main():
    raw_site_page = requests.get(URL)
    raw_site_page.raise_for_status()  #Confirm site was pulled. Error if not
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;get&lt;/em&gt; function of the requests module allows us to pull the HTML data from the site. We assign this data to the variable &lt;em&gt;raw_site_page&lt;/em&gt;. (This is known as the &lt;strong&gt;response&lt;/strong&gt; object).&lt;/p&gt;
&lt;p&gt;As the comment implies, the &lt;em&gt;.raise_for_status()&lt;/em&gt; function checks to see if the data was pulled successfully. If, for example, your URL is incorrect, this will error your program out and tell you about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Next, Beautiful Soup fun:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;soup = bs4.BeautifulSoup(raw_site_page.text, &amp;#39;html.parser&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code takes the Response object and reads it as plain text. BS4 parses it with the html parser and creates a &lt;strong&gt;Soup Object&lt;/strong&gt; which we're assigning to the variable &lt;em&gt;soup&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now the tricky part:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to use the &lt;em&gt;.select()&lt;/em&gt; function within BS4 to find what we want in the site HTML code. This is where you'll need to view the page source of the site (&lt;a href="http://testingfreak.com/inspect-element-in-firefox-chrome-or-ie-browsers/"&gt;or use Inspect&lt;/a&gt;!) to find something unique about the data you want to pull.&lt;/p&gt;
&lt;p&gt;You can see that I've specified the CSS Element ".heading-size-1". On the &lt;em&gt;Wowhead&lt;/em&gt; page I found that each post heading contained this element and that it was unique to them as well.&lt;/p&gt;
&lt;p&gt;We then take this selected data and create &lt;em&gt;html_header_list&lt;/em&gt; with it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've added a for loop to print the contents of the list. This is where I got caught the first time. Run the program and you'll see something similar to this (showing first line only):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python3 wowhead_scraper.py 
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;heading-size-1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/patch-7-1-5-survival-guide&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's happening here is that I'm not only just getting the header of the post but also the URL assigned to by the "a href" HTML tag. We don't need this data for this exercise.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could use regex to strop the URLs out but BS4 makes it easier. We can grab just the plain text used within the CSS element using .getText():&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;html_header_list = soup.select(&amp;#39;.heading-size-1&amp;#39;)
    for headers in html_header_list:
        header_list.append(headers.getText())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using .getText() we can then pull the plain text and append it to the &lt;em&gt;header_list&lt;/em&gt; list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now if we iterate over &lt;em&gt;header_list&lt;/em&gt; we see just the data we want!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for headers in header_list:
        print(headers)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;$ python3 wowhead_scraper.py 
Patch 7.1.5 Survival Guide: Class Guides, New Legendaries, Brawler&amp;#39;s Guild, Artifact Knowledge Catch Up and More!
Official Patch Notes for World of Warcraft 7.1.5
Kirin Tor Quest Fix, World Quest Reset in 7.1.5, Live Developer Q&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;A Thursday
The Story of Aviana - Lore Collaboration with Nobbel87
All The Demon Hunter Class and Legendary Changes in Patch 7.1.5
Wowhead Weekly #106 and Blizzard Gear Shop Diablo Sale
$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More examples (Bob)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/scrabble_distribution.py"&gt;Here&lt;/a&gt; is another example how to scrape &lt;a href="http://scrabblewizard.com/scrabble-tile-distribution/"&gt;scrabblewizard.com&lt;/a&gt; to parse the html table that has the Scrabble tile distribution and load it into a data structure (list of named tuples).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bobbelderbos.com/2016/12/code-kata/"&gt;Titans books kata&lt;/a&gt; also used BeautifulSoup to scrape the page, see code &lt;a href="https://github.com/pybites/blog_code/blob/master/BeautifulSoup/titans_books.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Areas for Expansion&lt;/h2&gt;
&lt;p&gt;Again, this is web scraping at its simplest. There are heaps of improvements and additions that can be made with these coming to mind right away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull the URL for each header and output that alongside the title.&lt;/li&gt;
&lt;li&gt;Automate the script to run (daily?) and store the output.&lt;/li&gt;
&lt;li&gt;Have the output emailed to you along with links to each post.&lt;/li&gt;
&lt;li&gt;Store the Request object in a local file so we don't have to keep making an HTML request every time we run the program.&lt;/li&gt;
&lt;li&gt;Store post headings in an external file to allow us to only send notifications when there's a &lt;em&gt;new&lt;/em&gt; post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a pretty satisfying project for me. Web scraping has endless possibilities - you just need to figure out what you want and from where!&lt;/p&gt;
&lt;p&gt;This example is as simple as they come but hopefully now you can see just how easy it really is.&lt;/p&gt;
&lt;p&gt;Oh and if anyone tries to say, "Isn't that what the RSS feed or Subscribe button is for?", ignore them. This is &lt;em&gt;way&lt;/em&gt; more satisfying!&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Wed, 11 Jan 2017 13:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-11:simplewebscraper.html</guid><category>python</category><category>tips</category><category>tricks</category><category>code</category><category>pybites</category><category>beautifulsoup</category><category>bs4</category><category>webscraping</category><category>namedtuple</category></item><item><title>Copy and Paste with Pyperclip</title><link>http://pybit.es/pyperclip.html</link><description>&lt;p&gt;A quick and easy one for you today.&lt;/p&gt;
&lt;p&gt;While I was working through &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; (review &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;here&lt;/a&gt;) I experienced a few "this is AMAZING!" moments. One of which was when I discovered the Pyperclip module.&lt;/p&gt;
&lt;h2&gt;What is Pyperclip?&lt;/h2&gt;
&lt;p&gt;Pyperclip is a module you can import that allows you to copy and paste to and from the clipboard on your computer. It does this through the use of two functions: copy() and paste()... go figure!&lt;/p&gt;
&lt;p&gt;It's simple but man did it blow my mind!&lt;/p&gt;
&lt;h2&gt;Why so Awesome?!&lt;/h2&gt;
&lt;p&gt;Well...&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was still super new to Python so the idea that I could interact with the user to that level was insane to me. It was a new way of inputting data without actually asking for traditional "type this and hit enter" input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was exactly what I was looking for at the time! I wanted to automate the pasting of lists I had copied to the clipboard for a small tool I was writing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The exercise in &lt;em&gt;Automate the Boring Stuff&lt;/em&gt; had you paste() text from the clipboard into the program (ie, read in), manipulate said text, then copy() it back to the clipboard. In a split second you could insert a '*' in front of every line in a list! This opened my mind to a whole new way of thinking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Okay enough talk. Let's get to it. Installation first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#pip install pyperclip
#pip list
pip (9.0.1)
pyperclip (1.5.27)
setuptools (28.8.0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we import it into our code and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyperclip&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pyperclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;This is copied to the clipboard.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Be warned though. Pyperclip copies and pastes just like anything else. That is, it doesn't get exclusive rights to the clipboard. The text you copy to the clipboard has every chance of being overwritten by anything else that happens to copy after your command has run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above example we copied to the clipboard and then instantly pasted. In most situations you'll want to paste what the &lt;em&gt;user&lt;/em&gt; has on their clipboard then manipulate that.&lt;/p&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;The author of the tool (Al Sweigart) shows some more use cases in &lt;a href="https://automatetheboringstuff.com/chapter6/"&gt;chapter 6&lt;/a&gt; of &lt;a href="http://pybit.es/automate_the_boring_stuff_review.html"&gt;Automate the Boring Stuff&lt;/a&gt;, for example how to add bullets to wiki markup:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bulletPointAdder.py script will get the text from the clipboard, add a star and space to the beginning of each line, and then paste this new text to the clipboard. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course the possibilities are endless. You could for example make a script that retrieves a link from the clipboard (I mean one you copied previously), retrieve the metadata for that link scraping it, and copying an enriched string (link + metadata) back to the clipboard. You could use this for example to (semi)auto-create posts to social media. You would use pyperclip for the get/put from/to clipboard.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pyperclip really opened my eyes to the power of Python. Direct interaction with the user is awesome. &lt;/p&gt;
&lt;p&gt;However, it is scary to think just how easy it is to write to and from the users clipboard without their knowledge. These functions (as per anything) can be called without any user knowledge whatsoever. In a fraction of a second we can paste the output of their clipboard to a file of our choosing! It's creepy to think of how easily this can be used maliciously!&lt;/p&gt;
&lt;p&gt;That's coding though I guess! &lt;a href="https://youtu.be/b23wrRfy7SM?t=12"&gt;With great power...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Fri, 06 Jan 2017 12:00:00 +0100</pubDate><guid>tag:pybit.es,2017-01-06:pyperclip.html</guid><category>python</category><category>tips</category><category>tricks</category><category>code</category><category>pybites</category></item><item><title>Automate Tweeting: how to build a Twitterbot</title><link>http://pybit.es/automate-twitter.html</link><description>&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I re-used my Twitter bot script of &lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;How to create a simple Twitter bot with Python&lt;/a&gt;. The main goal was to auto-tweet each new post of our blog, but while I was at it I decided to 'watch' a couple of feeds more. Follow &lt;a href="https://twitter.com/pybites"&gt;@pybites&lt;/a&gt; to get our updates and other good Python news / content ...&lt;/p&gt;
&lt;h1&gt;Getting ready&lt;/h1&gt;
&lt;p&gt;To auto-post to Twitter you need to get a Consumer Key/Secret and Access Token (Secret) from &lt;a href="https://apps.twitter.com"&gt;https://apps.twitter.com&lt;/a&gt;, my &lt;a href="http://bobbelderbos.com/2016/06/twitter-bot/"&gt;previous post&lt;/a&gt; explains this in more detail (it's pretty easy).&lt;/p&gt;
&lt;h2&gt;Feeds&lt;/h2&gt;
&lt;p&gt;Probably the best site to follow Python news feeds is &lt;a href="http://planetpython.org/"&gt;Planet Python&lt;/a&gt;, yet for this exercise I found reposting &lt;a href="http://planetpython.org/titles_only.html"&gt;20+ new links&lt;/a&gt; a day too much (not another spam bot please!), so I decided to watch these 7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# more feeds 
http://pybit.es/feeds/all.rss.xml
https://talkpython.fm/episodes/rss
https://pythonbytes.fm/episodes/rss
https://dbader.org/rss
https://www.codementor.io/python/tutorial/feed
http://feeds.feedburner.com/PythonInsider
http://www.weeklypython.chat/feed/
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wanted to include &lt;a href="http://www.pythonweekly.com"&gt;Python Weekly&lt;/a&gt;, but could not find an RSS feed, probably because it's an email service. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need to say it: &lt;a href="https://talkpython.fm/"&gt;Talk Python To Me&lt;/a&gt; is awesome, a podcast every Python developer should listen to!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Code and install instructions (if you want to re-use this) are &lt;a href="https://github.com/pybites/blog_code/tree/master/twitter_bot"&gt;on Github&lt;/a&gt;. Basically I parse the feeds file above, use &lt;a href="https://pypi.python.org/pypi/feedparser"&gt;feedparser&lt;/a&gt; to get the articles for each feed that were published less than 24 hours ago, and use &lt;a href="http://www.tweepy.org"&gt;tweepy&lt;/a&gt; to post these to Twitter. &lt;/p&gt;
&lt;p&gt;I hide config.py in .gitignore and provide a blank config.py-example under version control. This is to hide the Twitter key/token stuff. As I run this in a daily cronjob, I turned on &lt;a href="https://docs.python.org/3.6/library/logging.html"&gt;logging&lt;/a&gt; for debugging.&lt;/p&gt;
&lt;p&gt;All together pretty impressive that you can do all this in just 67 LOC, mainly because we use &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Env / dependencies&lt;/h2&gt;
&lt;p&gt;I developed this in a &lt;a href="http://pybit.es/the-beauty-of-virtualenv.html"&gt;virtual environment&lt;/a&gt;, so a good practice I adopted is to ship the code with &lt;a href="https://github.com/pybites/blog_code/blob/master/twitter_bot/requirements.txt"&gt;a requirements file&lt;/a&gt; which I obtained with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(venv) $ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can get this script running simply by cloning my env:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv venv &lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[1] I was going to say: use pyvenv instead of virtualenv, but &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html"&gt;since 3.6&lt;/a&gt; the recommended way is &lt;a href="https://docs.python.org/dev/whatsnew/3.6.html#id7"&gt;python3 -m venv&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Here is a filter of this morning's run where we caught our last post, a new Talk Python podcast episode and a nice new post from Dan Bader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# grep posted pybites_twitter.log 
04:55:54 root         DEBUG    posted status Learning from Python mistakes http://pybit.es/py-mistakes.html #python to twitter
04:55:57 root         DEBUG    posted status #91 Top 10 Data Science Stories of 2016 https://talkpython.fm/episodes/show/91/top-10-data-science-stories-of-2016 #python to twitter
04:56:00 root         DEBUG    posted status The Difference Between “is” and “==” in Python https://dbader.org/blog/difference-between-is-and-equals-in-python #python to twitter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Automating Twitter :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="auto-tweets" src="http://pybit.es/images/auto-tweets.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Logging all-in&lt;/h2&gt;
&lt;p&gt;Another cool thing about the &lt;a href="https://docs.python.org/3.6/library/logging.html"&gt;logging module&lt;/a&gt; is that you get the imported packages logging for free. The following entries in my log files were not added by the code I wrote, they came from tweepy and/or feedparser and/or their dependencies!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# more pybites_twitter.log |cut -d&amp;#39; &amp;#39; -f2|sort|uniq -c |sort -nr
...
     15 requests_oauthlib.oauth1_auth  
     15 oauthlib.oauth1.rfc5849
      6 requests.packages.urllib3.connectionpool
      3 tweepy.binder
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Daily cronjob on server. I needed to export the site-packages path defined in PYTHONPATH:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0 2 * * * export PYTHONPATH=/path/to/python3.5/site-packages &amp;amp;&amp;amp; cd /path/to/twitter_bot &amp;amp;&amp;amp; /path/to/python3.5 tweetbot.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: checkout if &lt;a href="https://docs.python.org/3.6/library/sched.html"&gt;Python's sched&lt;/a&gt; is a better alternative?&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, &lt;a href="https://pypi.python.org"&gt;using PyPI&lt;/a&gt; you save yourself a lot of coding (= time).&lt;/p&gt;
&lt;p&gt;In just 67 LOC I could built a complete Twitterbot that will auto-post our new blog posts as well as some other good Python blogs and podcasts. We might add a few more feeds but this will do for starters.&lt;/p&gt;
&lt;p&gt;Tests?! Yeah I know ... as I am writing this I am adding some tests using (learning) &lt;a href="http://doc.pytest.org/en/latest/"&gt;pytest&lt;/a&gt; (I used unittest so far). I will blog about this framework in an upcoming post ...&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Any suggestion of feedback use the comments below. Thanks for reading.&lt;/p&gt;
&lt;p&gt;And to get our latest posts and other good Python content follow &lt;a href="https://twitter.com/pybites"&gt;@pybites&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Thu, 29 Dec 2016 01:28:00 +0100</pubDate><guid>tag:pybit.es,2016-12-29:automate-twitter.html</guid><category>twitterapi</category><category>tweepy</category><category>feedparser</category><category>rss</category><category>logging</category><category>podcasts</category><category>virtualenv</category><category>pyvenv</category><category>venv</category><category>news</category><category>3.6</category></item><item><title>How to create a nice-looking HTML page of your Kindle book highlights (notes)</title><link>http://pybit.es/kindle-json-to-html.html</link><description>&lt;h2&gt;Kindle notes&lt;/h2&gt;
&lt;p&gt;I was looking at an effective way to organize my Kindle highlights. I started looking at parsing the Kindle's My Clippings.txt file. However I had not much luck with existing PyPi modules and it is a bit cumbersome to always have to manually copy it via USB cable.&lt;/p&gt;
&lt;h2&gt;Starting point: Cloud + Bookcision&lt;/h2&gt;
&lt;p&gt;Then I found a much better starting point: &lt;a href="https://kindle.amazon.com"&gt;https://kindle.amazon.com&lt;/a&gt; = cloud. OK, this only works for Kindle purchased books, but using Amazon's &lt;a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=200911660"&gt;Whispersync&lt;/a&gt; really makes this convenient. Also, the Kindle site lets you filter / adjust your highlights and notes before exporting. &lt;/p&gt;
&lt;p&gt;For export I use the nice &lt;a href="http://www.norbauer.com/bookcision/"&gt;Bookcision JS bookmarklet&lt;/a&gt; which - when used in Chrome - gives you the ability to dowload the highlights JSON format.&lt;/p&gt;
&lt;h2&gt;JSON =&amp;gt; HTML&lt;/h2&gt;
&lt;p&gt;I wrote a script to convert the Bookcision JSON download into a static HTML page (for blog use, inspired by &lt;a href="https://sivers.org/book"&gt;Sivers&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/blog_code/tree/master/kindle_notes"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use json.loads(fh) to convert JSON into dict: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def load_json(json_file):
    with open(json_file) as f:
        return json.loads(f.read())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/string.html#template-strings"&gt;Template strings&lt;/a&gt;: in &lt;a href="https://github.com/pybites/blog_code/blob/master/kindle_notes/templates.py"&gt;templates.py&lt;/a&gt; PAGE defines the whole page, I use embedded CSS to make this a standalone solution. QUOTE defines a list item (highlight). Variables are defined with $ so: $title, $author, etc. In the &lt;a href="https://github.com/pybites/blog_code/blob/master/kindle_notes/kindle_json2html.py"&gt;main script&lt;/a&gt; I can substitute these variable placeholders with a dict: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def get_highlights(highlights):
    for hl in highlights:
        yield QUOTE.safe_substitute({
            &amp;#39;text&amp;#39; : hl[&amp;#39;text&amp;#39;],
            &amp;#39;note&amp;#39; : &amp;#39; / note: &amp;#39; + hl[&amp;#39;note&amp;#39;] if hl[&amp;#39;note&amp;#39;] else &amp;#39;&amp;#39;,
            &amp;#39;url&amp;#39; : hl[&amp;#39;location&amp;#39;][&amp;#39;url&amp;#39;],
            &amp;#39;location&amp;#39;: hl[&amp;#39;location&amp;#39;][&amp;#39;value&amp;#39;],
        })
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the 'yield' makes get_highlights() a generator. If this is new, check out &lt;a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do"&gt;this SO thread&lt;/a&gt; about Iterables -&amp;gt; Generators -&amp;gt; Yield [1]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use list() to consume all generator's values in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;highlights = get_highlights(content[&amp;#39;highlights&amp;#39;])
...
...
    &amp;#39;content&amp;#39;: &amp;#39;\n&amp;#39;.join(list(highlights)),
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can give the script one or more JSON files simply by using a slice on sys.argv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for json_file in sys.argv[1:]:
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So you can batch process JSON downloads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls *json
anything-you-want.json  arnold.json     choose-yourself.json    the-circle.json

&lt;span class="nv"&gt;$ &lt;/span&gt;python kindle_json2html.py *json
anything-you-want.html created
arnold.html created
choose-yourself.html created
the-circle.html created
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here is what an output looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="resulting html page" src="http://pybit.es/images/example-book-html.png" /&gt;&lt;/p&gt;
&lt;p&gt;As the HTML contains everything you can just copy it to your blog, &lt;a href="http://bobbelderbos.com/books/ego-is-the-enemy.html"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;
&lt;p&gt;[1] Generators save memory by not materializing the values of an iterable in memory = better performance. Here we don't really need that, yet I stil find the yield syntax more elegant (it's shorter) than building and returning a local collection (list).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Tue, 27 Dec 2016 00:10:00 +0100</pubDate><guid>tag:pybit.es,2016-12-27:kindle-json-to-html.html</guid><category>kindle</category><category>Template strings</category><category>json</category><category>html</category><category>books</category><category>bookcision</category><category>generators</category><category></category></item><item><title>Get a weekly digest from a Pelican blog</title><link>http://pybit.es/blog-digest.html</link><description>&lt;h2&gt;Prep work&lt;/h2&gt;
&lt;p&gt;We built this blog in Pelican, adding this in pelicanconf.py adds an RSS feed:&lt;/p&gt;
&lt;p&gt;FEED_RSS = 'feeds/all.rss.xml'&lt;/p&gt;
&lt;p&gt;And voila, after pushing this change we have &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;our RSS feed&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Script (use PyPi!)&lt;/h2&gt;
&lt;p&gt;The script is &lt;a href="https://github.com/pybites/blog_code/tree/master/pybites_digest"&gt;on github&lt;/a&gt; in our &lt;a href="https://github.com/pybites/blog_code"&gt;new blog repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No need to re-invent the wheel, PyPI (Python Package Index) has so much good stuff, feedparser is just what we need. It can take both a remote as well as local xml file, so you don't even need requests. &lt;/p&gt;
&lt;p&gt;This single line parses the feed into a comprehensive data structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;feed = feedparser.parse(xml)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which you can then easily consume: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for article in feed[&amp;#39;entries&amp;#39;]:
    # ... filtering
    yield article
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing I had to add was some timestamp conversations/calculations to go x days back (the returned feed data has a convenient &lt;a href="https://docs.python.org/3.5/library/time.html#time.struct_time"&gt;time.struct_time field&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Mail digest as txt/html in a cronjob&lt;/h2&gt;
&lt;p&gt;I left this for sendmail which accepts a mailheader, see &lt;a href="http://stackoverflow.com/questions/24010230/mailx-send-html-message"&gt;here&lt;/a&gt;. So this is my weekly cronjob:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# html email 
0 7 * * 6 cat pybites_header &amp;lt;(python3 /path/to/pybites_digest/digest.py 7 1) | sendmail -t

# text version for copy+paste into social media (no need to cat header file)
10 7 * * 6 python3 /path/to/pybites_digest/digest.py 7 | mailx -s &amp;quot;Weekly PyBites digest (txt ed)&amp;quot; &amp;lt;email&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First arg is "days back" = 7 = one week / 2nd arg = html True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might need to do a export PYTHONPATH=/path/to/python3.x/site-packages if you installed Python3 in your $HOME on a shared hosting provider. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The '&amp;lt;()' syntax is a nice way in Unix to join in output from a subprocess.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Don't miss any post&lt;/h2&gt;
&lt;p&gt;If you want to receive these weekly digests please subscribe to our blog or join our &lt;a href="https://www.facebook.com/groups/1305028816183522/"&gt;FB group&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob</dc:creator><pubDate>Sat, 24 Dec 2016 15:40:00 +0100</pubDate><guid>tag:pybit.es,2016-12-24:blog-digest.html</guid><category>pelican</category><category>feedparser</category><category>rss</category></item><item><title>The Beauty of Python Virtualenvs</title><link>http://pybit.es/the-beauty-of-virtualenv.html</link><description>&lt;p&gt;Ever heard of a Python virtualenv? No? Neither had I, until I discovered them while following a video course on Python Flask.&lt;/p&gt;
&lt;p&gt;A virtualenv (AKA venv) is essentially a Virtual Machine (VM) or sandbox environment that runs an independent and untouched Python environment.
When you create and activate the venv you no longer have access to the main Python environment running on your system.&lt;/p&gt;
&lt;p&gt;The problem programmers have is that it can be hard to isolate problems in code when their primary environment is cluttered with imported modules and the like.
Best practice would be to create a venv within your project and use it to run your project.&lt;/p&gt;
&lt;h2&gt;Step by Step&lt;/h2&gt;
&lt;p&gt;Let's create a venv called "awesome-test". You'd preferably run the following commands in your project root dir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# python3 -m venv awesome-test
# ls
awesome-test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;In Python 3, virtualenvs come installed by default. In Python 2.7 you install them with pip install virtualenv.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step is to activate the venv.
Activating the venv puts you into a standalone Python instance that has pretty much nothing installed by default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# cd awesome-test
# ls
bin     include     lib     pyvenv.cfg
#
# source bin/activate
(awesome-test) #
(awesome-test) # echo YAY!
YAY!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;(awesome-test)&lt;/em&gt; tag preceding your shell prompt indicates you're now in the venv.
Now list out the modules installed in this python instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# pip list
pip (9.0.1)
setuptools (28.8.0)
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you've been using Python already, you'll know that your main env would have a boat load of modules installed. It's nice to be able to run from a clean slate when desiging new code!&lt;/p&gt;
&lt;p&gt;You can now play around and install whatever the heck you want without having to worry about corrupting or screwing up your primary environment. All modules installed in this venv will remain local to the venv.&lt;/p&gt;
&lt;p&gt;When you're done using the venv you then exit (deactivate) it using the deactivate command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(awesome-test) # deactivate
# 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: All of changes you made in the venv will NOT be lost. It's all stored safely within the venv.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The seasoned veteran out there will surely read this and call me a noob... and they'd be right! It's exactly why I'm so stoked to have discovered venvs!&lt;/p&gt;
&lt;p&gt;If you're not using virtualenvs yet, install the package and give it a whirl.&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian</dc:creator><pubDate>Thu, 22 Dec 2016 22:11:00 +0100</pubDate><guid>tag:pybit.es,2016-12-22:the-beauty-of-virtualenv.html</guid><category>python</category><category>pip</category><category>virtualenv</category><category>venv</category></item><item><title>How to get PyBites up and running on your machine</title><link>http://pybit.es/install-me.html</link><description>&lt;p&gt;This is also a useful ref for future collaborators ...&lt;/p&gt;
&lt;p&gt;We're open source right? ;)&lt;/p&gt;
&lt;h2&gt;Pybites install guide&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# we have a src, output and theme (Flex) repo, use --recursive to get all
$ git clone --recursive git@github.com:pybites/pybites.github.io-src pybites
$ cd pybites

# set up env and install dependencies
$ virtualenv venv (might need: virtualenv -p python3 venv)
$ source venv/bin/activate
$ pip install -r requirements.txt

# add some content
$ cd content
$ vi new-blog-post.md ; wq!

# check changes on localhost
$ cd ..
$ make html &amp;amp;&amp;amp; make serve

# push this new content to the parent -src repo
$ git add . 
$ git commit -m &amp;quot;my new blog post&amp;quot;
$ git push

# push the static blog change to the child -io repo
# wait: this is a duplicate step, I don&amp;#39;t like duplication!
# ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we have 2 repos: -src for code, -io for generated static content, ideally we want to automate the publishing to -io, so we can just focus on the main repo (-src). &lt;/p&gt;
&lt;p&gt;Here is where &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;git hooks&lt;/a&gt; come into play. cd into .git/hooks and add below script, name it "pre-push", update your WORKING_DIR and chmod 755 it ...&lt;/p&gt;
&lt;p&gt;UPDATE: we abondonded this hook, because it led to some conflicts / unnecessary work, not worth automating this step. We push manually to -src / -io these days. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pybites</dc:creator><pubDate>Tue, 20 Dec 2016 10:40:00 +0100</pubDate><guid>tag:pybit.es,2016-12-20:install-me.html</guid><category>pelican</category><category>publishing</category><category>github</category><category>pip</category><category>virtualenv</category><category>git</category></item></channel></rss>