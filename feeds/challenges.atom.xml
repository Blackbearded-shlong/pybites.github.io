<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyBites - Challenges</title><link href="https://pybit.es/" rel="alternate"></link><link href="https://pybit.es/feeds/challenges.atom.xml" rel="self"></link><id>https://pybit.es/</id><updated>2017-07-11T11:00:00+02:00</updated><entry><title>Code Challenge 27 - PRAW: The Python Reddit API Wrapper</title><link href="https://pybit.es/codechallenge27.html" rel="alternate"></link><published>2017-07-11T11:00:00+02:00</published><updated>2017-07-11T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-11:/codechallenge27.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Love or hate Reddit, it has a lot of good data to work with. This week we have you write an app of your choice using the Reddit API. Have fun!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;First of all thanks &lt;a href="https://github.com/shibasisp"&gt;shibasisp&lt;/a&gt; for raising &lt;a href="https://github.com/pybites/challenges/issues/42"&gt;the issue&lt;/a&gt;. We like the 2 examples you provided so we post them here: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch one challenge from easy, one from Intermediate and one hard from r/dailyprogrammer and shows it in the console. (PyBites: definitely something we could use!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A program that would fetch 10 (or so) news items from r/news and sort them in decreasing order of upvotes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More ideas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fetch a user's history, &lt;a href="http://alan-wright.com/programming/tutorial/python/2014/03/09/praw-tutorial/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build a Reddit Bot, &lt;a href="http://pythonforengineers.com/build-a-reddit-bot-part-1/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do some data analysis, for example: build word clouds, &lt;a href="http://www.randalolson.com/2013/03/01/fun-with-the-python-reddit-api-wrapper-and-word-clouds/"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even do a bit of sentiment analysis of a comment thread using something like &lt;a href="https://pybit.es/codechallenge07_review.html"&gt;textblob&lt;/a&gt; or the &lt;a href="http://www.nltk.org"&gt;Natural Language Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But these are just examples. Feel free to build anything. The goal is to sharpen your coding skills. If you scratch your own itch even better (last week's &lt;a href="https://pybit.es/codechallenge26_review.html"&gt;Pomodori Tracker&lt;/a&gt; for example is something we use on a daily basis now).&lt;/p&gt;
&lt;h3&gt;Further resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://praw.readthedocs.io/en/latest/"&gt;PRAW docs&lt;/a&gt; - probably your number one goto. The easiest way to get PRAW running is to &lt;a href="https://pybit.es/the-beauty-of-virtualenv.html"&gt;create a virtual env&lt;/a&gt; and do a &lt;code&gt;pip install praw&lt;/code&gt; and follow the docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/reddit/reddit/wiki/API"&gt;Reddit API resources page&lt;/a&gt; - info on OAuth / API limits / links to other wrapper modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Please share&lt;/h3&gt;
&lt;p&gt;While you're at it, if you like this challenge upvote it &lt;a href="https://redd.it/6ml3hv"&gt;on Reddit&lt;/a&gt; or retweet it on &lt;a href="https://twitter.com/pybites/status/884702973795987458"&gt;Twitter&lt;/a&gt;. The more people coding with us == more possible PR submissions for our review == the more we all learn from this!&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="reddit"></category><category term="API"></category><category term="PRAW"></category><category term="news"></category><category term="dailyprogrammer"></category><category term="data"></category><category term="data analysis"></category><category term="textblob"></category><category term="bot"></category><category term="word clouds"></category><category term="nltk"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI - Review</title><link href="https://pybit.es/codechallenge26_review.html" rel="alternate"></link><published>2017-07-10T11:30:00+02:00</published><updated>2017-07-10T11:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-10:/codechallenge26_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge26.html"&gt;Create a Simple Python GUI&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/bbelderbos"&gt;bbelderbos&lt;/a&gt; made a &lt;em&gt;Reading Progress Pomodori Tracker GUI&lt;/em&gt; inspired by the article: &lt;a href="https://kimschlesinger.com/blog/read-more.html"&gt;How to Read More&lt;/a&gt;. It uses &lt;a href="http://pythonhosted.org/easygui/"&gt;easygui&lt;/a&gt; and &lt;a href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. For more info, see &lt;a href="https://github.com/pybites/challenges/tree/community/26/bbelderbos"&gt;the README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pomodori app" src="https://pybit.es/images/pomodori-app2.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; continued his &lt;a href="https://pybit.es/guest-pytrack-app.html"&gt;&lt;em&gt;pyTrack&lt;/em&gt;&lt;/a&gt; project wrapping a GUI around it using &lt;a href="https://docs.python.org/3/library/tkinter.html#module-tkinter"&gt;tkinter&lt;/a&gt;. Nice addition, will make it more usable. See &lt;a href="https://github.com/pybites/challenges/tree/community/26/clamytoe"&gt;the README&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pytrack gui" src="https://pybit.es/images/pytrack-gui.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for our new challenge tomorrow ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. We can always update our review posts with new PRs.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="GUI"></category><category term="tkinter"></category><category term="easygui"></category><category term="matplotlib"></category><category term="pyTrack"></category><category term="pygame"></category></entry><entry><title>Code Challenge 26 - Create a Simple Python GUI</title><link href="https://pybit.es/codechallenge26.html" rel="alternate"></link><published>2017-07-04T20:30:00+02:00</published><updated>2017-07-04T20:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-04:/codechallenge26.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it’s about time we shared the spotlight with GUIs. This week let’s take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! Web apps tend to get all the love so it’s about time we shared the spotlight with GUIs. This week let’s take our first dive as a PyBites Community into Python GUIs!&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;We’re keeping this simple as this will be the first foray into GUIs for a lot of you (us included). All we’re asking you to do is create a simple GUI. Done!&lt;/p&gt;
&lt;p&gt;You can use whatever framework or toolkit that floats your boat, just be creative and come up with a plain old GUI screen.&lt;/p&gt;
&lt;p&gt;You could use an image as a backdrop with some overlays or even create your own type of Game “Main Menu” screen. The choice is yours.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;We imagine that this may be a bit too simple for some of you, or may just be quicker to achieve than you thought. If that’s the case, why not add some functionality to the GUI? Consider this a bonus objective - not mandatory in the least.&lt;/p&gt;
&lt;p&gt;For example, with the Game Main Menu screen, you could make a “Credits” button that then links to another screen which scrolls through fictional names.&lt;/p&gt;
&lt;p&gt;Create a stopwatch GUI that actually has timing functionality. How about a calculator?&lt;/p&gt;
&lt;p&gt;Whatever you decide, create a working GUI with added functionality and earn extra kudos.&lt;/p&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The two main toolkits that come to mind are &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; and &lt;a href="http://pygame.org/"&gt;PyGame&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out this comprehensive &lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;list of Frameworks/Toolkits&lt;/a&gt; to get started.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="beginners"></category><category term="GUI"></category><category term="frameworks"></category><category term="toolkits"></category><category term="tkinter"></category><category term="pygame"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies - Review</title><link href="https://pybit.es/codechallenge25_review.html" rel="alternate"></link><published>2017-07-03T11:20:00+02:00</published><updated>2017-07-03T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-07-03:/codechallenge25_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge25.html"&gt;Notification Service of Now Playing and Upcoming Movies&lt;/a&gt; code challenge. &lt;/p&gt;
&lt;h3&gt;The Movie Database (TMDb)&lt;/h3&gt;
&lt;p&gt;This challenge we focused on &lt;a href="https://www.themoviedb.org/documentation/api"&gt;TMDb's API&lt;/a&gt; to send html emails of movies / tv series. We decided to query 4 API endpoints: now playing movies, upcoming movies, popular TV series, and on-the-air TV series. &lt;/p&gt;
&lt;p&gt;We used 2 shelves for caching: movie info and items sent (to avoid duplicates in the mails). We also got to play with decorators and classes. We used &lt;a href="https://pypi.python.org/pypi/tmdbsimple"&gt;tmdbsimple&lt;/a&gt; to interface with TMDb's API.&lt;/p&gt;
&lt;p&gt;We followed &lt;a href="https://pybit.es/python-packaging.html"&gt;what we learned about packaging&lt;/a&gt; to structure our modules. Having a notifications package now makes it easier to add a Twitter bot later on for example.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href="https://github.com/pybites/challenges/tree/community/25/bbelderbos"&gt;here&lt;/a&gt; and this is a screenshot of part of the notification email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="upcoming movies" src="https://pybit.es/images/upcoming-movies.png"&gt;&lt;/p&gt;
&lt;p&gt;We did not have time to build a front-end to add filters. We did start a login system in Flask but ran out of time. I think this would be a nice exercise for us learning Django. To be continued ...&lt;/p&gt;
&lt;h3&gt;PRs&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/santiagobenitez"&gt;santiagobenitez&lt;/a&gt;: a single script allowing to filter on genre, year and vote average, using &lt;code&gt;argparse&lt;/code&gt;. It uses &lt;a href="https://www.mailgun.com/"&gt;mailgun&lt;/a&gt; - "The Email Service For Developers" - for emailing.&lt;/p&gt;
&lt;p&gt;His script demonstrates that it's not necessary to use a API wrapper package. He uses &lt;code&gt;requests&lt;/code&gt; which leads to compact code like: &lt;code&gt;movies_resp = requests.get(upcoming_movies_url, params=query_params)&lt;/code&gt; to query TMDb's API.&lt;/p&gt;
&lt;p&gt;You can checkout the code &lt;a href="https://github.com/pybites/challenges/blob/community/25/santiagobenitez/movies.py"&gt;here&lt;/a&gt;. We read in the PR: "This is my first ever python code ..." - really? Good job! &lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;This was a challenge to sink your teeth in, there were many options, lot to code. This week we try to keep it simpler making the challenge smaller, not necessarily easier. We will also change topics a bit to do something entirely different: build a simple GUI app. Stay tuned ...&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="apis"></category><category term="argparse"></category><category term="requests"></category><category term="mailgun"></category></entry><entry><title>Code Challenge 25 - Notification Service of Now Playing and Upcoming Movies</title><link href="https://pybit.es/codechallenge25.html" rel="alternate"></link><published>2017-06-26T13:40:00+02:00</published><updated>2017-06-26T13:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge25.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! What movies are in theaters now or just came out on your favorite streaming service? What are upcoming movies, when will they be released? Can I keep track of all new humor movies? Or what about that specific actor or director? Having a notification service around movies seems an interesting, fun and useful code challenge to us.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: find a resource that updates with now playing and/or upcoming movies and consume it. Make a simple notification mechanism. We think an email would be best, but you could also try a bot of some kind (Twitter, Slack, ...). You are more into series? That's fine too. You could for example make a notification service around air dates of TV shows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: add command line switches to the script to filter on things like genre, director, actor, country, rating, streaming service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: make a subscription service web app where the filters are check boxes and subscribers get customized emails based on their stored preferences.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A few resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google &lt;em&gt;now playing/upcoming movies/series&lt;/em&gt; and you get a ton of resources. Just a few examples: &lt;a href="http://www.fandango.com/moviesintheaters"&gt;Fadango&lt;/a&gt;, &lt;a href="http://www.imdb.com/movies-coming-soon/"&gt;Imdb&lt;/a&gt;, &lt;a href="https://www.rottentomatoes.com/browse/upcoming/"&gt;Rotten tomatoes&lt;/a&gt;, etc. For series you could use &lt;a href="http://www.airdates.tv/"&gt;airdates.tv&lt;/a&gt; for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the resource has an API we recommend using it. One nice API for example is &lt;a href="https://www.themoviedb.org/?language=en"&gt;The Movie DB&lt;/a&gt;. Another open database you could use is &lt;a href="http://thetvdb.com/"&gt;TheTVDB.com&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to make a bot, we did a few, just search &lt;a href="https://pybit.es/pages/articles.html"&gt;our articles&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="movies"></category><category term="series"></category><category term="digest"></category><category term="email"></category><category term="themoviedb"></category><category term="imdb"></category><category term="omdb"></category><category term="apis"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class - Review</title><link href="https://pybit.es/codechallenge24_review.html" rel="alternate"></link><published>2017-06-26T10:00:00+02:00</published><updated>2017-06-26T10:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-26:/codechallenge24_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge24.html"&gt;Use Dunder / Special Methods to Enrich a Class&lt;/a&gt; code challenge we coupled to &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;our guest post&lt;/a&gt; on Dan Bader's blog.&lt;/p&gt;
&lt;h3&gt;Account class&lt;/h3&gt;
&lt;p&gt;First of all you can follow along with the code in the article &lt;a href="https://github.com/pybites/dunders"&gt;here&lt;/a&gt; (class and notebook). One thing we learned from the comments on the article is that __reversed__ should reverse the normal iteration. So newest to oldest, not by transaction amount (&lt;a href="https://github.com/pybites/dunders/commit/fced4f1f9a22270eb57bf3342289568e5ed7f113"&gt;fix&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Submissions&lt;/h3&gt;
&lt;p&gt;As there were no PR submissions other than ours we keep it short. &lt;/p&gt;
&lt;p&gt;We made a &lt;a href="https://github.com/pybites/challenges/tree/community/24/bbelderbos"&gt;Developer class&lt;/a&gt; pretty similar to the Account class example. &lt;/p&gt;
&lt;p&gt;Funny fact is it was meant for our new &lt;a href="https://github.com/pybites/karmabot"&gt;Karma Bot&lt;/a&gt; but &lt;a href="https://pybit.es/slack-karma-bot.html"&gt;we implementing it without using dunders&lt;/a&gt;! So it is good to note that you don't always need them. &lt;/p&gt;
&lt;p&gt;Even a word of caution is warranted as pointed out by &lt;em&gt;_seemethere&lt;/em&gt;  on the article's &lt;a href="https://www.reddit.com/r/Python/comments/6ih6cj/enriching_your_python_classes_with_dunder_magic/"&gt;Reddit thread&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would say that you should be careful with magic methods.&lt;/p&gt;
&lt;p&gt;On one hand they can be extremely useful and extend your objects and on the other hand they can make using your library very difficult and hard to understand.&lt;/p&gt;
&lt;p&gt;Use them where you feel as though they make sense and not just because it would be cool to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Useful tool, powerful and elegant, but use wisely.&lt;/p&gt;
&lt;h3&gt;Next&lt;/h3&gt;
&lt;p&gt;Stay tuned for this week's code challenge where we get you to code up a weekly digest email of now playing/ upcoming movies or series.&lt;/p&gt;
&lt;p&gt;By the way there is no deadline to these challenges, you can start any challenge at any time. &lt;/p&gt;
&lt;p&gt;Just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Code Challenge 24 - Use Dunder / Special Methods to Enrich a Class</title><link href="https://pybit.es/codechallenge24.html" rel="alternate"></link><published>2017-06-20T09:50:00+02:00</published><updated>2017-06-20T09:50:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-20:/codechallenge24.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! We wrote an article for Dan Bader's Python blog: &lt;a href="https://dbader.org/blog/python-dunder-methods"&gt;Enriching Your Python Classes With Dunder (Magic, Special) Methods&lt;/a&gt;. We hope you like it. To put dunders into practice we dedicate this week's code challenge to it.&lt;/p&gt;
&lt;h2&gt;What Are Dunder Methods?&lt;/h2&gt;
&lt;p&gt;To quote from our guest post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Python, special methods are a set of predefined methods you can use to enrich your classes. They are easy to recognize because they start and end with double underscores, for example &lt;code&gt;__init__&lt;/code&gt; or &lt;code&gt;__str__&lt;/code&gt;. .... This elegant design is known as the Python data model and lets developers tap into rich language features like sequences, iteration, operator overloading, attribute access, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: take an existing class you wrote or write one from scratch (other than Account), implementing at least construction, object representation and iteration using special methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate to Advanced: implement one or more of the other language features discussed in the article: operator overloading, method invocation, context management. And/or look at the &lt;a href="https://docs.python.org/3/reference/datamodel.html"&gt;data model documentation&lt;/a&gt; and try to implement one or more dunders not discussed in the article: attribute access, metaclasses or coroutines for example. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus: write some tests to verify the dunders you have implemented behave as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;New PR template&lt;/h3&gt;
&lt;p&gt;Note that when you do a PR you should see a short template asking for some meta data. We implemented that &lt;a href="https://pybit.es/codechallenge23_review.html"&gt;as part of code challenge 23&lt;/a&gt; to track our challenges and over time enrich our &lt;a href="https://pybit.es/pages/challenges.html"&gt;Challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="dunders"></category><category term="special methods"></category><category term="magic methods"></category><category term="classes"></category><category term="polymorphism"></category><category term="operator overloading"></category><category term="guest"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API - Review</title><link href="https://pybit.es/codechallenge23_review.html" rel="alternate"></link><published>2017-06-18T21:32:00+02:00</published><updated>2017-06-18T21:32:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-18:/codechallenge23_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge23.html"&gt;Challenge Estimated Time API&lt;/a&gt;. This was a cool challenge and we implemented it using Github's awesome platform and &lt;a href="https://developer.github.com/v3/"&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;More than just parsing data&lt;/h3&gt;
&lt;p&gt;This challenge was two in one: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We had to think about how to get data from our challenge takers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We had to code up the processing of this data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first point took us a bit of brainstorming, but we stumbled upon &lt;a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/"&gt;Github's PR template methodology&lt;/a&gt; we &lt;a href="https://github.com/pybites/challenges/commit/614b080a16da0b53187ebc93fd95239d18621c68"&gt;happily embraced&lt;/a&gt; (yeah "Simple is better than complex").&lt;/p&gt;
&lt;p&gt;The cool thing about this is that it puts the template in the comment field when you want to submit a PR:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template upon PR" src="https://pybit.es/images/pr-template1.png"&gt;&lt;/p&gt;
&lt;p&gt;Of course you can just nuke the template, but we think this is the best we can get: the folks that do PRs are probably in the best position to provide input on these metrics. Secondly if you provide a Google doc a click is an extra step. Doing it this way it's part of the process you're already following.&lt;/p&gt;
&lt;p&gt;Example of a filled in template in the PR submission: &lt;/p&gt;
&lt;p&gt;&lt;img alt="PR template filled in" src="https://pybit.es/images/pr-template2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Github API&lt;/h3&gt;
&lt;p&gt;For interacting with the Github API we used the &lt;a href="https://github.com/PyGithub/PyGithub"&gt;PyGithub&lt;/a&gt; package which made this pretty easy (although it took some inspection of the various GH API endpoint objects to get to the relevant data).&lt;/p&gt;
&lt;p&gt;The code: in &lt;a href="https://github.com/pybites/challenges/blob/community/23/bbelderbos/challenge_stats.py"&gt;challenge_stats.py&lt;/a&gt; we get &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; object with &lt;code&gt;get_challenge_repo&lt;/code&gt;. From that we parse out the submissions with &lt;code&gt;get_submissions&lt;/code&gt; in which we loop through all PRs: &lt;code&gt;for pr in challenge_repo.get_pulls('all')&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To get the code challenge number we cannot rely on the PR title. Looking at the PR files we see that they are like: &lt;em&gt;challenge_number/GH_USER/filename&lt;/em&gt; (e.g. &lt;em&gt;23/bbelderbos/challenge_stats.py&lt;/em&gt;) so we parse it from there.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;_parse_template_response&lt;/code&gt; helper we parse the new feedback template with the help of &lt;a href="https://pybit.es/mastering-regex.html"&gt;some regex&lt;/a&gt;. We use a &lt;code&gt;defaultdict(dict)&lt;/code&gt; to store user responses per challenge number. The advantages are: we don't have to initialize keys, and user responses are uniquified this way.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;We only just used the template ourselves so we only have one response :)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;pprint&lt;/code&gt; we can see the structure of the submissions defaultdict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python challenge_stats.py
defaultdict&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;class &lt;span class="s1"&gt;&amp;#39;dict&amp;#39;&lt;/span&gt;&amp;gt;,
            &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;23&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bbelderbos&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;completed&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;difficulty_level&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;estimated_time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,
                                &lt;span class="s1"&gt;&amp;#39;i_stretched&amp;#39;&lt;/span&gt;: True,
                                &lt;span class="s1"&gt;&amp;#39;other_feedback&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;another test&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's where we leave it for now. This will be a handy script to get recorded stats of all PR submissions. When we have enough data, we can write some more code to parse these metrics and show (anonymous) averages on &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;PR: PyTrack&lt;/h3&gt;
&lt;p&gt;We got a nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt;: &lt;em&gt;PyTrack&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A simple project/task time tracker for Python 3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/tree/community/23/clamytoe"&gt;on community branch&lt;/a&gt; | &lt;a href="https://github.com/clamytoe/pyTrack/"&gt;original repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To quote the excellent Readme documentation: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Helps you keep track of how much time you spend on your projects and tasks. A sqlite database is used to track your time logs, and it is kept simple by only implementing as few commands as needed to get a full featured application. You can add/remove multiple projects, start/stop tracking any of them, or completely reset the database to start with a clean slate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We like how this works as a stopwatch, just stop and start to track a project, and it stores all timings in a DB. &lt;/p&gt;
&lt;p&gt;It uses click for command line interface, maya for datetime parsing, and peewee for ORM, check out the code if you want to learn about these packages. &lt;/p&gt;
&lt;p&gt;Another nice aspect is that Matin refactored this into a package.&lt;/p&gt;
&lt;h3&gt;Thanks for joining&lt;/h3&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way!&lt;/p&gt;
&lt;p&gt;You can start any challenge at any time, just follow &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt; and start coding. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="PyGithub"></category><category term="PR template"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category><category term="packaging"></category><category term="peewee"></category><category term="click"></category><category term="maya"></category></entry><entry><title>Code Challenge 23 - Challenge Estimated Time API</title><link href="https://pybit.es/codechallenge23.html" rel="alternate"></link><published>2017-06-13T11:20:00+02:00</published><updated>2017-06-13T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-13:/codechallenge23.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will give you the opportunity to enhance our challenge platform by creating a simple API to track how much time our challenges take (and possibly other metadata).&lt;/p&gt;
&lt;p&gt;Why? To quote one of our challenge takers: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just wanted to say thanks for accepting my PR last week. My first one! I also have a request for the challenges. One of the reasons I am doing these challenges is to improve how efficiently I can write code. At the moment I have a timer on from starting up my venv to the end of unit testing. I'm recording these times each week to see if I improve. I was wondering if you could put a suggested time in the challenge readme. Almost like the 'suggested reading time' Medium have on their articles. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And we got similar inqueries. We saw that adding reading times to our articles was something our audience really liked. Now challenges take a lot more investment of one's time than reading an article, so it does make sense to work on this feature. &lt;/p&gt;
&lt;p&gt;Estimating the time it takes to do a code challenge however is inherently difficult. People have different levels of experience and the the &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;open nature&lt;/a&gt; of our challenges allows for different levels of effort.&lt;/p&gt;
&lt;p&gt;At least as we get some indication from an increasing amount of participants we can average the data making &lt;a href="https://pybit.es/pages/challenges.html"&gt;our challenges page&lt;/a&gt; more informative.&lt;/p&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic: make a simple class or API to track and persistently save (e.g. SQLite, Google docs) challenge estimated times (minutes). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate: allow the user to save more attributes about the challenges: difficulty level (1-10), rating (1-5), could complete (True/False).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced: authenticate with the &lt;a href="https://developer.github.com/v3/"&gt;Github API&lt;/a&gt; so we only get real user data. This makes sense because challenge participants == GH users. This also allows you to add validation: user to enter data once per challenge and CRUD: user being able to update what he/she entered. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced part II: another idea we really like is making a private Slack for our community and participants could enter this meta data into a dedicated channel. If you like this option you could code something up using the &lt;a href="https://api.slack.com/"&gt;Slack API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual you are free to pick the tools you want: Flask, Django, ..., or just vanilla Python. &lt;/p&gt;
&lt;h2&gt;Make our code challenges better!&lt;/h2&gt;
&lt;p&gt;We challenge you to try to finish all 3 levels providing a complete solution for our PyBites community. Note this could be an integral part of our challenges platform moving forward! Pretty exciting, no?&lt;/p&gt;
&lt;p&gt;The best solution not only gets featured on our weekly review, but also on the &lt;a href="https://pybit.es/pages/challenges.html"&gt;challenges page&lt;/a&gt; (one of the most visited page on our blog). That is, when it collected enough data we are happy integrating it.&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;Here are some similar topics you can reference while taking this challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask is one way to do this, we wrote this article some time ago: &lt;a href="https://pybit.es/simple-flask-api.html"&gt;How To Build a Simple API with Flask and Unit Test it&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A similar tracking app we wrote: &lt;a href="https://pybit.es/flask-api-part2.html"&gt;Simple API Part 2 - Building a Deep Work Logger with Flask, Slack and Google Docs&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is similar to &lt;a href="https://pybit.es/codechallenge08.html"&gt;Code Challenge 08 - House Inventory Tracker&lt;/a&gt;, reviewed &lt;a href="https://pybit.es/codechallenge08_review.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you go the Slack route you can check out: &lt;a href="https://pybit.es/simple-chatbot.html"&gt;How to Build a Simple Slack Bot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="APIs"></category><category term="Github"></category><category term="Slack"></category><category term="Flask"></category><category term="tracking"></category><category term="meta"></category><category term="data"></category><category term="platform"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper - Review</title><link href="https://pybit.es/codechallenge22_review.html" rel="alternate"></link><published>2017-06-12T13:00:00+02:00</published><updated>2017-06-12T13:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-12:/codechallenge22_review.html</id><summary type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review last week's &lt;a href="http://pybit.es/codechallenge22.html"&gt;Packt free ebook code challenge&lt;/a&gt;. We really scratched our own itch building both a notification service and an ebook download manager.&lt;/p&gt;
&lt;p&gt;First of all we were a tad disappointed not being able to automate the whole thing. Packt's &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;free-learning link&lt;/a&gt; requires a "I'm not a robot" captcha to be solved. We are not the only ones &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning/issues/51"&gt;hitting this wall&lt;/a&gt;. &lt;a href="https://2captcha.com/recaptchav2_eng_instruction"&gt;2captcha&lt;/a&gt; provies a possible way around it, but we didn't go there. There was still a lot of room to build cool/useful stuff:&lt;/p&gt;
&lt;h2&gt;Packt Daily Notification Email&lt;/h2&gt;
&lt;p&gt;We wrote a script to get a daily html email of the free html book, the amount of hh:mm before it expires, and adding &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;Pybonacci's affiliation link&lt;/a&gt; (to sponsor Python Spain).&lt;/p&gt;
&lt;p&gt;Here is how it looks: &lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-notifier" src="https://pybit.es/images/packt-notifier.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/076"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Packt Ebook Download Manager&lt;/h2&gt;
&lt;p&gt;We also made a script to manage downloaded/purchased Packt ebooks. It uses requests session (detailed &lt;a href="https://pybit.es/requests-session.html"&gt;here&lt;/a&gt;) to login/access/download books. We use BeautifulSoup for html parsing. Here you can see it in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python packt.py
PACKT DOWNLOAD MANAGER

Logging in
Retrieving books

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: dta
No matches, try again

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: data
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Data Mining with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; R Data Visualization Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Data Analysis with R &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ASP.NET Data Presentation Controls Essentials &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Implementing Splunk: Big Data Reporting and Development &lt;span class="k"&gt;for&lt;/span&gt; Operational Intelligence &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/21201/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/21201/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-data-mining-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: python
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Expert Python Programming - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Modern Python Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python GUI Programming Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; What You Need to Know about Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Raspberry Pi Cookbook &lt;span class="k"&gt;for&lt;/span&gt; Python Programmers &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Python Application Development &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning Robotics Using Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
...
many more &lt;span class="o"&gt;(&lt;/span&gt;thanks Packt!&lt;span class="o"&gt;)&lt;/span&gt;
...
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/25257/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/25257/mobi
Saving to /Users/bbelderb/Documents/books/Packt/expert-python-programming-second-edition.mobi
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;22&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/20125/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/20125/pdf
Saving to /Users/bbelderb/Documents/books/Packt/functional-python-programming.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: postgres
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; PostgreSQL &lt;span class="m"&gt;9&lt;/span&gt; Admin Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Learning PostgreSQL &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/22041/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/22041/pdf
Saving to /Users/bbelderb/Documents/books/Packt/learning-postgresql.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/6088/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: c
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: science
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Data Science Cookbook &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n

Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: machine
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Practical Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with R - Second Edition &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Machine Learning with Spark &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Python Machine Learning &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; Building Machine Learning Systems with Python &lt;span class="o"&gt;[&lt;/span&gt;eBook&lt;span class="o"&gt;]&lt;/span&gt;
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;6&lt;/span&gt;
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: f
Wrong input, please try again
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/pdf
&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/epub
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; https://www.packtpub.com/ebook_download/11703/mobi
Choose url &lt;span class="o"&gt;(&lt;/span&gt;c to cancel&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
Downloading https://www.packtpub.com/ebook_download/11703/pdf
Saving to /Users/bbelderb/Documents/books/Packt/building-machine-learning-systems-with-python.pdf
Choose book &lt;span class="o"&gt;(&lt;/span&gt;n &lt;span class="k"&gt;for&lt;/span&gt; new search&lt;span class="o"&gt;)&lt;/span&gt;: n
Seach &lt;span class="k"&gt;for&lt;/span&gt; a book &lt;span class="o"&gt;(&lt;/span&gt;q &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: q
Bye
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on the file system (some downloads were already there):&lt;/p&gt;
&lt;p&gt;&lt;img alt="packt-dl-manager" src="https://pybit.es/images/packt-dl-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;Code is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/072"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: if you want to do login with Selenium, we covered that &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/066"&gt;in our 100 Days Challenge too&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PacktScraper&lt;/h2&gt;
&lt;p&gt;We got a nice PR from &lt;a href="http://github.com/wonderfulboyx"&gt;wonderfulboyx&lt;/a&gt; scraping the free ebook site and offering email and tweet notification options, all modular and configurable with configparser. Check it out &lt;a href="https://github.com/pybites/challenges/tree/community/22/wonderfulboyx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Great work is coming out of these challenges, we are humbled and stoked creating our PyBites community this way. Thanks for joining.&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch - see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Code Challenge 22 - Packt Free Ebook Web Scraper</title><link href="https://pybit.es/codechallenge22.html" rel="alternate"></link><published>2017-06-05T11:20:00+02:00</published><updated>2017-06-05T11:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge22.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will do some web scraping of Packt's daily free ebook, sending out daily notifications. This week we even have a unique opportunity to sponsor the Python Community, read on ... and happy coding!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding :)&lt;/p&gt;
&lt;p&gt;This week we will do some web scraping. As you might know &lt;a href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt; gives away a free ebook &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;every (!) single day&lt;/a&gt;. In this challenge you will scrape that page and send out a notification to never miss an interesting title.&lt;/p&gt;
&lt;h2&gt;Sponsor the Python Community&lt;/h2&gt;
&lt;p&gt;But it gets better: the guys from &lt;a href="https://pybonacci.es/"&gt;Pybonacci&lt;/a&gt; (great Spanish Python science blog) partnered up with Packt:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Pybonacci"&gt;@Pybonacci&lt;/a&gt; Inviting you to participate in our free eBook initiative next week, including a donation to a tech charity of your choice.&lt;/p&gt;&amp;mdash; Packt (@PacktPub) &lt;a href="https://twitter.com/PacktPub/status/870223070027550720"&gt;June 1, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Packt will donate up till 1000 bucks ($ 1 per free ebook download) to a Python related non-profit (more info &lt;a href="https://pybonacci.es/2017/06/03/donaciones-gracias-a-packtpub/#en"&gt;here&lt;/a&gt;, you can vote for the non-profit &lt;a href="https://twitter.com/Pybonacci/status/870943704500056065"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So taking this challenge you get to promote the awesome Python community, isn't that cool?&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is to make a script that scrapes &lt;a href="https://www.packtpub.com/packt/offers/free-learning"&gt;the free learning link&lt;/a&gt; every day for meta data about the book (title, description, cover, promo time left).&lt;/p&gt;
&lt;p&gt;Then have the script share this info together with this affiliation link: &lt;a href="https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals"&gt;https://www.packtpub.com/packt/offers/free-learning?utm_source=Pybonacci&amp;amp;utm_medium=referral&amp;amp;utm_campaign=FreeLearning2017CharityReferrals&lt;/a&gt; to your favorite channel: email, Twitter, Facebook, reddit, slack, etc.&lt;/p&gt;
&lt;p&gt;That's it for the basic requirements. You probably want to put this in OS cron or you can use Dan Bader's &lt;a href="https://schedule.readthedocs.io/"&gt;schedule package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the web scraping you could use &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt; or &lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt; for example. We did an article &lt;a href="https://pybit.es/simplewebscraper.html"&gt;on the former&lt;/a&gt; and used it &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/055"&gt;in our 100days Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;If you really want to challenge yourself, you could have the script login to your Packt account and click the 'Claim Your Free eBook', making it fully automated. It might not be easy because they use a &lt;a href="https://en.wikipedia.org/wiki/CAPTCHA"&gt;CAPTCHA&lt;/a&gt;, but hey we like a good challenge, right? It would definitely be a useful tool and a good skill to add.&lt;/p&gt;
&lt;p&gt;Not sure where to start? Check out &lt;a href="https://github.com/igbt6/Packt-Publishing-Free-Learning"&gt;this repo&lt;/a&gt; (Github is your friend!). They used &lt;a href="http://docs.python-requests.org/en/master/user/advanced/#session-objects"&gt;Requests / Session&lt;/a&gt; to do this.&lt;/p&gt;
&lt;p&gt;You could also look at &lt;a href="http://selenium-python.readthedocs.io/"&gt;Selenium&lt;/a&gt; (here is &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/066/packt.py"&gt;some 100days code&lt;/a&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking.&lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="webscraping"></category><category term="BeautifulSoup"></category><category term="Selenium"></category><category term="Packt"></category><category term="Pybonacci"></category><category term="ebooks"></category><category term="community"></category><category term="automation"></category><category term="sponsoring"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App - Review</title><link href="https://pybit.es/codechallenge21_review.html" rel="alternate"></link><published>2017-06-05T11:15:00+02:00</published><updated>2017-06-05T11:15:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-06-05:/codechallenge21_review.html</id><summary type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article we review this week's &lt;a href="http://pybit.es/codechallenge21.html"&gt;code challenge #21&lt;/a&gt; for which we got some nice PRs.&lt;/p&gt;
&lt;p&gt;This was a relatively easy challenge but building it out to something cool had its challenge. We are stoked to receive solutions with similar functionality yet using different technologies.&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;We merged 4 PRs onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;Community branch&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Martin made &lt;a href="https://github.com/pybites/challenges/tree/community/21/clamytoe"&gt;a nice app&lt;/a&gt; for iPhone use with Pythonista 3. We really like how you guys provide screenshots and other meta data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dante made a cool Flask app: &lt;a href="https://github.com/pybites/challenges/tree/community/21/dseptem/wattapp"&gt;wattapp&lt;/a&gt;. Features include: simple interface, history of energy consumption and an option to clear items. Check it out to learn about useful Flask extensions like Flask-SQLAlchemy and Flask-WTF for forms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we got some Django! Wonderfulboyx made an energy app that lets us add devices and companies, then do the calculation based on inputs. It also saves the history. It's hosted &lt;a href="http://wonderfulboyx.pythonanywhere.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyBites: we made a simple &lt;a href="https://github.com/pybites/challenges/tree/community/21/bbelderbos"&gt;cli app&lt;/a&gt; that loads in real data from the web: kwh per country and estimated wattages per device (parsing this was a challenge, html tables arg!). It's not done yet, we still need to cache the data and write some more tests. We found out that energy in expensive in Spain!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourselves by taking our challenges (we do too!). Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;When we merge your work onto our Challenges branch the PR auto-closes but you can still add comments to it. For new revisions, just open a new PR.&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="electricity"></category><category term="Flask"></category><category term="Django"></category><category term="cli"></category><category term="data"></category><category term="BeautifulSoup"></category><category term="Python Anywhere"></category><category term="Pythonista 3"></category></entry><entry><title>Code Challenge 21 - Electricity Cost Calculation App</title><link href="https://pybit.es/codechallenge21.html" rel="alternate"></link><published>2017-05-29T11:00:00+02:00</published><updated>2017-05-29T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge21.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A smooth sea never made a skilled sailor. - Franklin D. Roosevelt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will get you to create a simple app to calculate the monetary cost of using an electrical device. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;The challenge is simple. We want you to create an app that will allow you to calculate the hourly cost of running an electrical device.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;App will allow a user to enter the wattage consumption of a device (eg, a 20w light globe) and a cost per kilowatt hour (kWh). kWh being the unit of measurement the electric company charges by.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app will then return the cost of running the device for 1 hour.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the absolute baseline for beginners. We recommend you continue with the Bonus Features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Features:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To make it interesting, see if you can complete the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make this a web app using the framework of your choice. It’d look great in a browser!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow a user to enter in how many hours they want to use the device for and have this factored into your cost result (eg, Using a 20w globe at 50 cents per kWh for 10 hours).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use persistent storage (sqlite, shelf, etc) to store all queries to the app and have the ability to print this stored data back to the user when requested.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don’t want to make it a web app, see if you can construct a GUI using &lt;a href="https://wiki.python.org/moin/TkInter"&gt;TkInter&lt;/a&gt; or other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
Consider this a half specific, half open ended challenge. There’s an intentional, specific goal here but how you get there is up to you. If you’re a newbie and it takes time, feel free to leave this as a CLI based app.&lt;/p&gt;
&lt;p&gt;It doesn’t matter how great it looks, only that you were challenged along the way and learned something!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="calculation"></category><category term="math"></category><category term="electricity"></category><category term="beginner"></category><category term="GUI"></category><category term="TkInter"></category><category term="Flask"></category><category term="newquote"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun - Review</title><link href="https://pybit.es/codechallenge20_review.html" rel="alternate"></link><published>2017-05-29T09:00:00+02:00</published><updated>2017-05-29T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-29:/codechallenge20_review.html</id><summary type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's review time again. Wow: &lt;a href="http://pybit.es/codechallenge20.html"&gt;challenge #20&lt;/a&gt; already! We can't believe we have worked through so many already. We also keep receiving amazing PRs, awesome!&lt;/p&gt;
&lt;h2&gt;Submissions&lt;/h2&gt;
&lt;p&gt;This was a great challenge. We got to play with OOP and learned a couple of things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Julian: exploring inheritance using the character class system in the World of Warcraft, see &lt;a href="https://github.com/pybites/challenges/blob/community/20/hobojoe1848/warlock_class.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bob: a book/video task planner that sends a weekly SMS (Twilio API) with material to consume, see &lt;a href="https://github.com/pybites/challenges/tree/community/20/bbelderbos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://pybit.es/special-100days.html"&gt;100DaysOfCode&lt;/a&gt;: simple Karma app using inheritance and playing with dunder methods, see &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/058/karma.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dseptem"&gt;Dante&lt;/a&gt;: Rooms framework (including unittests, nice!), Readme:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rooms is a humble and simple Framework to create adventure games with Python. A player has an inventory and moves between Rooms, interacting with Actors. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ python rooms.py

    ...
    ...
    This normal looking room has a weird guy standing against the wall

    -=-

    Here I see a weird guy that I don&amp;#39;t know. he looks friendly..

    Actions:
    1) Talk to the friendly weird guy I don&amp;#39;t know
    2) Inventory

    Exits:
    3) A place with a strange aura

    Choose your action / exit: 1

    Take this botato, use is wisely!

    Received 1 Holy Botato!

    ...
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Everytime a PR comes in we cheer with joy, humbled by the fact we see you are stretching yourself by taking our challenges. Keep up the good work, the stuff you are building is amazing!&lt;/p&gt;
&lt;p&gt;Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="dunder"></category><category term="games"></category><category term="adventure"></category><category term="warcraft"></category><category term="Twilio"></category><category term="karma"></category><category term="Rooms"></category></entry><entry><title>Code Challenge 20 - Object Oriented Programming Fun</title><link href="https://pybit.es/codechallenge20.html" rel="alternate"></link><published>2017-05-22T15:10:00+02:00</published><updated>2017-05-22T15:10:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge20.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we will let you experiment with Object Oriented Programming, an important skill and fundamental building block of (everthing-is-an-object) Python. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;If you are new to OOP you might want to checkout &lt;a href="http://pybit.es/oop-primer.html"&gt;our primer tutorial&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class with a constructor (__init__ = object setup code, e.g. defining instance variables) and at least two methods. To relive PyCon you could have a generic Session class, but use any concept you like (Employee, Car, Person, Animal, Account, Notebook, etc). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a subclass that inherits from the parent class. For example you could let (Lightning)Talk, KeyNote and Workshop be subclasses (inherit from) Session. Other examples: Employee - Manager / Developer, Car - Toyota, Account - SavingsAccount ... you get the idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define another class for use in the initial (sub)class. So for the PyCon Session example you could pull in a bunch of Person (Developer) objects that joined it. This &lt;a href="http://www.amazon.com/dp/1784398780/?tag=pyb0f-20"&gt;Python OOP book&lt;/a&gt; has an example of a Notebook class to which Note objects are getting added. Or you could model a Blog with Posts, Tags, Categories, Comments. The possibilities are endless. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another (more fun) option that could be a good fit for OOP is developing a simple game with different Characters (Monsters, Heros, maybe Princesses even?) and Places they go, each class (blueprint) defining its own state (attributes) and behaviors (methods).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We hope you follow along so far. For the more experienced coders among us, get bonus credits if you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apart from Inheritance implement Polymorphism and Encapsulation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use one or more class and/or static methods. You could have a class variable keep track of the number of instances of the class for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;investigate and use Abstract base classes (= ABCs, see also our &lt;a href="http://pybit.es/oop-primer.html"&gt;OOP primer&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement special (aka "dunder" aka "magic") methods which we covered &lt;a href="http://pybit.es/python-data-model.html"&gt;here&lt;/a&gt;, at least __str__ and __repr__ &lt;/p&gt;
&lt;p&gt;To get an idea of the difference between these two and a list of dunder methods on a typical Python object run this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;2017-05-22 12:16:08.816364&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;datetime.datetime(2017, 5, 22, 12, 16, 8, 816364)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not sure if we should go down the route of multiple inheritance but it is possible if you have a use case. You can use __mro__ to figure out the inheritance order.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="OOP"></category><category term="object oriented"></category><category term="inheritance"></category><category term="encapsulation"></category><category term="polymorphism"></category><category term="dunder"></category><category term="games"></category><category term="ABCs"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API - Review</title><link href="https://pybit.es/codechallenge19_review.html" rel="alternate"></link><published>2017-05-22T15:00:00+02:00</published><updated>2017-05-22T15:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-22:/codechallenge19_review.html</id><summary type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week was pretty busy due to PyCon, but what an amazing conference! A lot to absorb which we will digest in the upcoming articles. First our regular schedule though: review of &lt;a href="http://pybit.es/codechallenge19.html"&gt;last week's challenge&lt;/a&gt;: post to your favorite API. &lt;/p&gt;
&lt;h2&gt;PyCon&lt;/h2&gt;
&lt;p&gt;Before we dive in just to say we are absolutely stoked about the positive feedback we got engaging with fellow Pythonistas at PyCon this week! People got excited about the code challenges: the fact it stretches fellow programmers and the way they can submit their work via PR. So we definitely keep using this format for now. Do reach out though if you have any feedback or want to submit a code challenge / share your ideas, they are more than welcome. Thanks. &lt;/p&gt;
&lt;h2&gt;Our solutions&lt;/h2&gt;
&lt;p&gt;Here are some scripts that POST to APIs all taken from our &lt;a href="https://github.com/pybites/100DaysOfCode"&gt;100 Days of Code repo&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This week's contribution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facebook API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/007/"&gt;a script to automatically post to our FB group&lt;/a&gt; which uses the &lt;a href="https://github.com/mobolic/facebook-sdk"&gt;facebook-sdk package&lt;/a&gt; and &lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt; which is neat to create command line interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previously featured:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Twitter API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/053/"&gt;script to (daily) auto-tweet our 100 Days of Code progress&lt;/a&gt; (&lt;a href="http://pybit.es/100days-autotweet.html"&gt;article&lt;/a&gt;). If you are curious about Twitter bots, you might want to check out &lt;a href="http://pybit.es/automate-twitter.html"&gt;our article&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/866346450699001856"&gt;this poster&lt;/a&gt; spotted at PyCon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slack API: &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/020/"&gt;post to Slack upon each domain mention on Twitter&lt;/a&gt; (&lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;article&lt;/a&gt;). We also have &lt;a href="http://pybit.es/simple-chatbot.html"&gt;an article&lt;/a&gt; on how to build a Slack bot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We initially wanted to look at the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify&lt;/a&gt; or &lt;a href="https://developers.google.com/youtube/"&gt;YouTube&lt;/a&gt; API but we lacked the time. We will update this article when we get around it. Or maybe it's a nice one for you to contribute?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;This week we will dive into Object Oriented Programming. We will set up a nice free-form challenge to let you experiment with classes, inheritance and more. Stay tuned ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now is better than never.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We hope you are having fun with these challenges. Remember there is no deadline, you can PR your code anytime. Just remember to isolate (branch) your changes and submit against our Community branch (as per instructions).&lt;/p&gt;
&lt;p&gt;Come code with us forking &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt;. Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="POST"></category><category term="Twitter"></category><category term="Facebook"></category></entry><entry><title>Code Challenge 19 - Post to Your Favorite API</title><link href="https://pybit.es/codechallenge19.html" rel="alternate"></link><published>2017-05-15T13:31:00+02:00</published><updated>2017-05-15T13:31:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge19.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week part 2 of APIs: post to your favorite API. Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge success&lt;/a&gt;, we have a part 2 this week where we will let you post to your favorite API. &lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data. The difference with last time is that you actually have to edit your account by doing one or more POST requests. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post (periodic) updates to your favorite social media platform. We really like the Twitter API (see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;), but you could use Facebook, Linkedin, Pinterest, Instagram, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create playlists of your favorite music with the &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you like books, playing with the &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/046"&gt;Goodreads API last week&lt;/a&gt;, pushing books to your shelve(s) is something this API supports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;Google APIs&lt;/a&gt;: send an email, add a calendar invite, add a file to Google drive, to name a few. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push a new article/ post to reddit Python or LearnPython using &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a list of your favorite movies with &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with the &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, etc etc ... be creative, scratch your own itch!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still searching for APIs? Last time we linked to these two resources: &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;fun APIs to play with (reddit thread)&lt;/a&gt; and &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="API"></category><category term="Twitter"></category><category term="Facebook"></category><category term="TheMovieDB"></category><category term="Spotify"></category><category term="Goodreads"></category><category term="Reddit"></category><category term="Google"></category><category term="POST"></category></entry><entry><title>Code Challenge 18 - Get Recommendations - Review</title><link href="https://pybit.es/codechallenge18_review.html" rel="alternate"></link><published>2017-05-15T11:37:00+02:00</published><updated>2017-05-15T11:37:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-15:/codechallenge18_review.html</id><summary type="html">&lt;p&gt;Before moving onto the new challenge let's review &lt;a href="http://pybit.es/codechallenge18.html"&gt;last week's challenge&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week we aimed at &lt;a href="http://pybit.es/codechallenge18.html"&gt;Getting Recommendations From Twitter Influencers&lt;/a&gt;. It required a bit more work and knowledge than anticipated so we leave it pending/working for now. We were also pretty busy last week.&lt;/p&gt;
&lt;p&gt;We did fiddle with the Goodreads API managing to get a user authorized (oauth) and pull their friends' updates. We only need to parse the output and probably filter "books read" with a rating of &amp;gt;= 4 (out of 5). Some code to get you started &lt;a href="https://github.com/pybites/challenges/tree/solutions/18"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another thing we'd like to build at some point is getting Netflix recommendations (digest email) because there is just too much to watch. Netflix does not have an API anymore though :( - Twitter has &lt;a href="https://twitter.com/search?q=netflix%20recommend&amp;amp;src=typd"&gt;a lot of Netflix tweets&lt;/a&gt; but the challenge is the free text (spam) and filtering out the exact show name. &lt;a href="https://parrotread.com/"&gt;Parrotread&lt;/a&gt; managed to do it for books so there must be a way. To be continued ... &lt;/p&gt;
&lt;p&gt;So building a recommendation engine takes more (structured) data and ML skills. We found some good resources to get started: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/grahamjenson/list_of_recommender_systems"&gt;List of Recommender Systems&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ML starter book: &lt;a href="http://www.amazon.com/dp/1449369413/?tag=pyb0f-20"&gt;Introduction to Machine Learning with Python: A Guide for Data Scientists&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the making: Manning's &lt;a href="https://www.manning.com/books/practical-recommender-systems"&gt;Practical Recommender Systems&lt;/a&gt;. You can download a free chapter and &lt;a href="https://github.com/practical-recommender-systems"&gt;source&lt;/a&gt; is already up and seems to use an interesting data set: &lt;a href="https://github.com/sidooms/MovieTweetings"&gt;MovieTweetings&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Challenges don't have deadlines so we will refer back to this one when we learned more about recommendation engines. Let us know if you made further progress on this one.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This week we have another nice free-form challenge for you: after last time's &lt;a href="http://pybit.es/codechallenge16.html"&gt;API challenge&lt;/a&gt; success, we have a part 2 this week where we will let you post to your favorite API. Standby as we post the challenge in a bit ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="books"></category><category term="Goodreads"></category><category term="API"></category><category term="oauth"></category><category term="Manning"></category><category term="Machine Learning"></category><category term="Netflix"></category><category term="recommendation engine"></category><category term="Parrotread"></category><category term="recommender system"></category></entry><entry><title>Code Challenge 18 - Get Recommendations</title><link href="https://pybit.es/codechallenge18.html" rel="alternate"></link><published>2017-05-08T09:30:00+02:00</published><updated>2017-05-08T09:30:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-08:/codechallenge18.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll do another API exercise: you will parse your Twitter feed searching for book / movie / music / you-name-it recommendations. Can you create a simple &lt;a href="https://parrotread.com"&gt;ParrotRead&lt;/a&gt;? Enjoy&lt;/p&gt;
&lt;p&gt;Ah what if you don't have or like Twitter?! Feel free to use any social media site where you can parse updates from people you follow or respect. Or use your favorite service, for example &lt;a href="https://www.goodreads.com/"&gt;Goodreads&lt;/a&gt; in case of books.&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app and put the key/secret in a private (not under version control) config file or store them in env variables (os.environ). Again if using another API, follow similar steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install &lt;a href="https://twython.readthedocs.io/en/latest/"&gt;Twython&lt;/a&gt;, &lt;a href="http://www.tweepy.org/"&gt;Tweepy&lt;/a&gt; or your favorite Twitter API module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the updates from your followers. If you don't follow a lot of people you could also work with a set of predefined Twitter handles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Come up with a way to identify recommendations of your choice (books / movies / music / whatever you like).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want recommendations, so check if the updates are positive (check &lt;a href="http://pybit.es/codechallenge07_review.html"&gt;this challenge&lt;/a&gt; where we used TextBlob, however use any tool you want).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Optional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go beyond stdout by notifying the user either by tweet (already using the Twitter API so should be easy) or email (cache the results).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tie this into a simple Flask app / front-end, &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/038"&gt;here&lt;/a&gt; is some code to get Twitter login working in Flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it more intelligent. Ask the user for his/her preferences upfront and use an algorithm (k-means clustering maybe?) to make relevant recommendations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). We will feature your PRs in our end-of-the-week challenge review (&lt;a href="http://pybit.es/pages/challenges.html"&gt;previous editions&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Twitter"></category><category term="books"></category><category term="recommendations"></category><category term="API"></category><category term="TextBlob"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast - Review</title><link href="https://pybit.es/codechallenge17_review.html" rel="alternate"></link><published>2017-05-07T23:59:00+02:00</published><updated>2017-05-07T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-07:/codechallenge17_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge17.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge17.html"&gt;Never Miss a Good Podcast&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Wow, this challenge led to some great learning! We got 3 Pull Requests (PRs) which we just merged into our Community branch. Don't want to miss your favorite podcast anymore? Here are some solutions that get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/clamytoe"&gt;clamytoe&lt;/a&gt; built "Podcaster" providing a rich command line interface. Really nice documentation (lot of screenshots) in his README. It uses SQLAlchemy for the back-end and click for the CLI interface (good reminder we need to check this module out!). Another nice feature is that it lets you download episodes. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/clamytoe"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/cverna"&gt;cverna&lt;/a&gt; wrote a script that fetches the feed of podcastinit.com (keep it Python!) - all nicely done in one script using sqlite3 and feedparser. Cron is done at the OS level (/etc/cron.weekly). Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/cverna"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jhervas"&gt;jhervas&lt;/a&gt; wrote "Personal Podcast Assistant": a script that will manage a database with your favorite podcasts, notifying you by email when it finds new podcasts. It uses the schedule module for cron (schedule.every().wednesday.at("10:52").do(main) - nice). The script even tries to install the required packages. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/jhervas"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used feedparser to parse a podcast feed which can be given with the --feed option. We also used SQLAlchemy to keep track of episodes and status (done = emailed out). We also print some stats at the bottom of each mail (e.g. "Podcast consumption stats: 0.9% done [1 of 111]"). We tried to make the code modular (package) and wrote some tests. Code is &lt;a href="https://github.com/pybites/challenges/tree/community/17/bbelderbos"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best way to learn is to play around with these projects doing a git pull of the Community branch.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again we really enjoyed these nice solutions and we are pumped to deliver more challenges so you can learn by building cool stuff.&lt;/p&gt;
&lt;p&gt;Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category><category term="review"></category></entry><entry><title>Code Challenge 17 - Never Miss a Good Podcast</title><link href="https://pybit.es/codechallenge17.html" rel="alternate"></link><published>2017-05-01T11:00:00+02:00</published><updated>2017-05-01T11:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-05-01:/codechallenge17.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you import a Podcast feed, store it in SQLite, and email unplayed episodes at a regular interval. Inspiration &lt;a href="https://twitter.com/clickdroid/status/857245545185722368"&gt;here&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Of course &lt;a href="https://talkpython.fm/"&gt;Talk Python&lt;/a&gt; is a good use case or &lt;a href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;another Python Podcast&lt;/a&gt;, but take any podcast you want. &lt;/p&gt;
&lt;p&gt;We want to keep the challenges as open as possible: &lt;a href="http://pybit.es/pages/challenges.html"&gt;last two times&lt;/a&gt; that worked pretty well, and &lt;a href="https://twitter.com/pybites/status/857520323956289536"&gt;our poll on Twitter&lt;/a&gt; showed the same:&lt;/p&gt;
&lt;p&gt;&lt;img alt="our challenge poll" src="https://pybit.es/images/poll_result.png"&gt;&lt;/p&gt;
&lt;p&gt;However even free form needs some structure to talk the same language. That's why we'd like you to try the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pick your favorite podcast and find its feed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can probably use &lt;a href="https://pypi.python.org/pypi/feedparser"&gt;feedparser&lt;/a&gt; to easily parse the feed. Don't re-invent the wheel here, use &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the data into SQLite or some other &lt;a href="https://docs.python.org/3.6/library/persistence.html"&gt;persistence form&lt;/a&gt;. We recommend the &lt;a href="https://docs.python.org/3.6/library/sqlite3.html"&gt;sqlite3&lt;/a&gt; module though: it is stdlib and easy to use. For starters we recommend &lt;a href="http://sebastianraschka.com/Articles/2014_sqlite_in_python_tutorial.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episodes as unplayed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to email from your env. We wrote about this &lt;a href="http://pybit.es/python-smtplib.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/python-MIME.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure out how to use cronjob in your env or do it with Python (see &lt;a href="https://docs.python.org/3.6/library/sched.html"&gt;sched&lt;/a&gt; or &lt;a href="https://github.com/dbader/schedule"&gt;schedule&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up one or two jobs to: A) send a daily (or weekly) email with podcast link(s) for you to consume, and B) update the DB with new episodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the episode(s) as played (done) in the DB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As this is code challenge towards a podcast challenge ("listen all episodes of podcast x"), show some stats in each email, for example: "x % done (y out of z)".&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. &lt;/p&gt;
&lt;p&gt;This doc also provides you with instructions how you can submit your code to our community branch via a Pull Request (PR). Cool PRs will be featured in our end-of-the-week challenge review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="podcast"></category><category term="feedparser"></category><category term="SQLite"></category><category term="sqlite3"></category><category term="mail"></category><category term="cron"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API - Review</title><link href="https://pybit.es/codechallenge16_review.html" rel="alternate"></link><published>2017-04-30T23:59:00+02:00</published><updated>2017-04-30T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-30:/codechallenge16_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge16.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge16.html"&gt;Query Your Favorite API&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;PyBites&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;As I discussed in my &lt;a href="http://pybit.es/learn-by-doing.html"&gt;post this week&lt;/a&gt; about learning Python, this code challenge was pretty much directed at me.&lt;/p&gt;
&lt;p&gt;Going into this one, I'd never accessed an API in my life!&lt;/p&gt;
&lt;p&gt;I spent the entire week playing around with different APIs but primarily the World of Warcraft and Gmail APIs.&lt;/p&gt;
&lt;p&gt;The work with the Gmail API was great learning but essentially a bust when it came to having a working script. I had an idea in mind as to what I wanted from it but I just wasn't able to get it done.&lt;/p&gt;
&lt;p&gt;I did have a little more success with the &lt;a href="http://wowwiki.wikia.com/wiki/World_of_Warcraft_API"&gt;World of Warcraft API&lt;/a&gt; however. I'm sure it means nothing to most of you reading this but I was able to pull down data about my player character and have it presented in a readable format. (JSON was also new to me!).&lt;/p&gt;
&lt;p&gt;The code for this is &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/027"&gt;here&lt;/a&gt;. As it was my first API attempt, it is definitely quite simplistic. The intention is to wrap it all up such that I can recreate my character profile locally.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I used various APIs this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I combined the Twitter and Slack API in my article of this week: &lt;a href="http://pybit.es/twitter-monitor-slack-notify.html"&gt;How to Write a Simple Slack Bot to Monitor Your Brand on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For our 100 days challenge I created &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/026"&gt;an interactive script to query the OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the challenge I really wanted to make a start migrating &lt;a href="http://fbreadinglist.com/"&gt;fbreadinglist&lt;/a&gt; from PHP to Python. As it uses the &lt;a href="https://developers.google.com/books/"&gt;Google Books API&lt;/a&gt; it was a good fit for this challenge. I completed the autocomplete feature using the same JS, but Python/Flask for the back-end:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 1" src="https://pybit.es/images/pcc16_googlebooks1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you select a title it redirects to a page where it pulls more details from the Google Books API (buttons not yet implemented):&lt;/p&gt;
&lt;p&gt;&lt;img alt="google books autocomplete 2" src="https://pybit.es/images/pcc16_googlebooks2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We got 2 cool Pull Requests. We are really stoked you submit code to our repo. Good work folks, keep up the momentum!&lt;/p&gt;
&lt;h3&gt;Clamytoe&lt;/h3&gt;
&lt;p&gt;Martin submitted a cool project called &lt;a href="https://github.com/clamytoe/Github-Profiler"&gt;GitHub-Profiler&lt;/a&gt; where he queries the Github API for a given user, entering 'pybites' it generates this nice page, awesome:&lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 1" src="https://pybit.es/images/pcc16_clamytoe1.png"&gt;&lt;/p&gt;
&lt;p&gt;If bio and repos was not enough, scrolling towards the end it also lists gists: &lt;/p&gt;
&lt;p&gt;&lt;img alt="github api 2" src="https://pybit.es/images/pcc16_clamytoe2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/clamytoe"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Dseptem&lt;/h3&gt;
&lt;p&gt;Another usage of APIs we got from Dante who used the &lt;a href="http://forismatic.com/en/api/"&gt;Forismatic API&lt;/a&gt; to pull random quotes. The author's bio gets crawled from Wikipedia, really nice:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 1" src="https://pybit.es/images/pcc16_dseptem1.png"&gt;&lt;/p&gt;
&lt;p&gt;When you hit "Another Quote!" the page refreshes and shows another random quote and its author + bio:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Forismatic api 2" src="https://pybit.es/images/pcc16_dseptem2.png"&gt;&lt;/p&gt;
&lt;p&gt;Code merged &lt;a href="https://github.com/pybites/challenges/tree/community/16/dseptem"&gt;on our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="APIs"></category><category term="Github"></category><category term="Google"></category><category term="books"></category><category term="Warcraft"></category><category term="quotes"></category><category term="Wikipedia"></category><category term="Forismatic"></category></entry><entry><title>Code Challenge 16 - Query Your Favorite API</title><link href="https://pybit.es/codechallenge16.html" rel="alternate"></link><published>2017-04-24T00:01:00+02:00</published><updated>2017-04-24T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-24:/codechallenge16.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we'll let you play with Web APIs. They are fun to fiddle with and great for learning and building cool things.&lt;/p&gt;
&lt;p&gt;We are eager to see what you come up with. If you want to share your work please do so &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;via our new PR proc&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We keep it free-form so you can go wild on consuming your favorite service(s) / data.&lt;/p&gt;
&lt;p&gt;Lack inspiration? Here are some ideas to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a Twitter digest or search for recommended books by your followers (we used the &lt;a href="https://dev.twitter.com/rest/public"&gt;Twitter API&lt;/a&gt; before, see &lt;a href="http://pybit.es/codechallenge04_review.html"&gt;here&lt;/a&gt;, &lt;a href="http://pybit.es/100days-autotweet.html"&gt;here&lt;/a&gt;, and &lt;a href="http://pybit.es/automate-twitter.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a Slack bot, for example to monitor Twitter (we will post an article this week how!). We have used the Slack API before, see &lt;a href="http://pybit.es/flask-api-part2.html"&gt;here&lt;/a&gt; and &lt;a href="http://pybit.es/simple-chatbot.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a notification email of series being aired this week, using &lt;a href="http://thetvdb.com"&gt;TheTVDB&lt;/a&gt; and/or movies premieres using &lt;a href="https://www.themoviedb.org/?language=en"&gt;TheMovieDB API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull a bunch of movie metadata using &lt;a href="http://www.omdbapi.com/"&gt;OMDb API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check reddit for useful (Python) threads using the &lt;a href="https://www.reddit.com/dev/api"&gt;their API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull your music playlists / metadata from &lt;a href="https://developer.spotify.com/web-api/"&gt;Spotify API&lt;/a&gt; / &lt;a href="https://developers.soundcloud.com/docs/api/guide"&gt;Soundcloud API&lt;/a&gt; / &lt;a href="https://developers.google.com/youtube/"&gt;YouTube API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Republish your Instagram photos to your blog &lt;a href="https://www.instagram.com/developer/"&gt;via their API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump your friends' birthdays in your own DB using the &lt;a href="https://developers.facebook.com/"&gt;Facebook API&lt;/a&gt;. The FB API is huge, ranging from FB login to leveraging their powerful &lt;a href="https://developers.facebook.com/docs/graph-api"&gt;Graph API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do cool stuff with Google APIs: e.g. calendar, books, drive, Gmail, translate, Youtube, &lt;a href="https://developers.google.com/apis-explorer/#p/"&gt;wow they really have a lot&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS with &lt;a href="https://www.twilio.com/"&gt;Twilio API&lt;/a&gt;, you probably have seen &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;this awesome example&lt;/a&gt; some weeks ago? If not, check it out!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query the weather via &lt;a href="https://openweathermap.org/api"&gt;OpenWeatherMap&lt;/a&gt; (example &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Still searching ideas? Check out &lt;a href="https://www.reddit.com/r/webdev/comments/3wrswc/what_are_some_fun_apis_to_play_with/"&gt;this thread&lt;/a&gt; or &lt;a href="https://www.programmableweb.com/apis"&gt;programmableweb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using one API is cool, combining two is even more powerful (e.g. Twitter + Slack, Google + FB, or whatever combination). There are so many options here, we probably reserve another challenge to do more of this (if you like it).&lt;/p&gt;
&lt;p&gt;If you are going to call an API repeatedly while developing you might want to consider &lt;a href="http://pybit.es/requests-cache.html"&gt;a library like Requests-cache&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="APIs"></category><category term="movies"></category><category term="music"></category><category term="Slack"></category><category term="Twitter"></category><category term="weather"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App - Review</title><link href="https://pybit.es/codechallenge15_review.html" rel="alternate"></link><published>2017-04-22T17:20:00+02:00</published><updated>2017-04-22T17:20:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-22:/codechallenge15_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge15.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge15.html"&gt;Create a Simple Flask App&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;This was one of the best challenges so far. We have 3 cool apps to show today.&lt;/p&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;This has to have been one of the most satisfying projects of my life. Why? Because, for the first time I successfully coded up an application with a front end, a back end &lt;em&gt;and&lt;/em&gt; persistent storage!&lt;/p&gt;
&lt;p&gt;&lt;img alt="julian's meal tracker" src="https://pybit.es/images/meal-tracker.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first thing you'll notice is that the page looks like it's straight out of the early 90's. (My CSS/Bootstrap game isn't very strong yet so settle down). I figured it was more important to get the app side working first. Styling can and will be improved later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is a very simple program that asks you for the last thing you ate and drank and tracks it in a database. You can then print out the "meal history" (ie, dump of the db) on another web page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is run within an &lt;em&gt;app.py&lt;/em&gt; file. I can definitely go back and refactor this code to be more Pythonic. For example, I control the connection to the sqlite db using a &lt;em&gt;with&lt;/em&gt; statement. You can see this statement occur three times in the program which is way too much repetition for my liking!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most difficult thing to get right was the passing of the data from the form back to the Python script for storage. The difficulty was more in wrapping my head around how this worked as I wasn't 100% across the whole HTTP GET and POST methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point of learning: In my &lt;em&gt;def index()&lt;/em&gt; function, the first load of the web page causes the return value to be passed to the page straight away. The entire if statement isn't processed &lt;strong&gt;until the POST request is made by submitting the form&lt;/strong&gt;. (Figuring this out was like reaching enlightenment).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I spent an entire evening this week learning sqlite3 just for this challenge. Totally worth it. If you don't know it already, do it. It's a wonderful way of storing data! It's also super handy being able to view the .db file in the SQLite DB browser to sanity check your app is doing what it's supposed to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I used a &lt;em&gt;lot&lt;/em&gt; of different resources to learn this.(Shameless plug alert!): I used our existing &lt;a href="http://pybit.es/tag/flask.html"&gt;PyBites Articles on Flask&lt;/a&gt; for the most part but also &lt;a href="https://www.youtube.com/watch?v=DIcpEg77gdE"&gt;this great video on Flask&lt;/a&gt; by the Miguel Grinberg.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: I can't wait to continue work on this app. The next step will be refactoring and finishing some UX features (eg: a return button on the second page) and then to get this running on Heroku or AWS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/meal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I scratched my own itch building a reading planner using &lt;a href="http://flask-sqlalchemy.pocoo.org/2.1/"&gt;Flask-SQLAlchemy&lt;/a&gt; and copied the PureCSS from &lt;a href="http://pybit.es/flask-simple-weather-app.html"&gt;my previous app&lt;/a&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="bob's reading planner" src="https://pybit.es/images/reading-planner.png"&gt;&lt;/p&gt;
&lt;p&gt;This was a great exercise using SQLAlchemy and made me more confident to rewrite &lt;a href="http://fbreadinglist.com/"&gt;My Reading List&lt;/a&gt; (PHP) using an ORM, be it Flask or Django.&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/solutions/15/reading_planner"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think this was one of the best challenges so far and I am happy to see that our code challenges trigger people to really practice and learn, building awesome stuff. Which brings us on:&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;We had a really nice PR from &lt;a href="https://github.com/clamytoe"&gt;clamytoe (Martin)&lt;/a&gt; who built a "no frills task manager that's really intuitive and simple to use." - under the covers it uses Flask-SQLAlchemy and some very nice styling using Bootstrap. Here is us using his nice app:&lt;/p&gt;
&lt;p&gt;&lt;img alt="martin's task manager" src="https://pybit.es/images/task-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;The code for this project is &lt;a href="https://github.com/pybites/challenges/tree/community/15/clamytoe"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="Flask"></category><category term="task manager"></category><category term="reading planner"></category><category term="meal history"></category></entry><entry><title>Code Challenge 15 - Create a Simple Flask App</title><link href="https://pybit.es/codechallenge15.html" rel="alternate"></link><published>2017-04-17T08:40:00+02:00</published><updated>2017-04-17T08:40:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-17:/codechallenge15.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we’re going to get down and dirty with Python Flask. Flask is becoming a hot skill to have up your sleeve. We’re all in with learning it so figure it’s about time we had a challenge on it! Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we’re going to get down and dirty with Python Flask. Flask is becoming a hot skill to have in your arsenal so we figure it’s about time we had a challenge on it! Enjoy!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;We decided to split the challenge into two parts given how time consuming this may be for some. If you can manage it, go for the bonus too!&lt;/p&gt;
&lt;p&gt;The base requirement: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Flask web app that allows you to enter data via a web form&lt;/li&gt;
&lt;li&gt;Data should then be displayed in some way (on the same page or on another page)&lt;/li&gt;
&lt;li&gt;Data should be persistent. It’s up to you how you store the data, as long as it’s persistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow the stored data to be manipulated (deleted, edited).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example use case for this could be a To-Do list app.&lt;/p&gt;
&lt;p&gt;This is an open ended challenge. There are very few requirements and many possibilities! It doesn’t have to look pretty, as long as the functionality is there. Have fun with it, learning Flask can be incredibly satisfying!&lt;/p&gt;
&lt;h2&gt;What is Flask?&lt;/h2&gt;
&lt;p&gt;As we discussed in our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt; last week, it’s a web framework to allow you to create Python web applications.&lt;/p&gt;
&lt;p&gt;For this challenge you should definitely have some HTML (and CSS) experience. It’ll definitely make things easier.&lt;/p&gt;
&lt;h2&gt;Helpful Resources&lt;/h2&gt;
&lt;p&gt;To help with your learning, here are some resources that should get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/beginning-flask.html"&gt;beginner Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our &lt;a href="http://pybit.es/flask-for-loop.html"&gt;Printing Dicts with Flask article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This great (working!) simple &lt;a href="https://github.com/mikicaivosevic/flask-simple-todo"&gt;Flask to-do list app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bob’s &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/013"&gt;Weather Compare App Code&lt;/a&gt; (post coming soon!)&lt;/li&gt;
&lt;li&gt;The offical &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;Flask documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This &lt;a href="https://www.youtube.com/watch?v=ZVGwqnjOKjk&amp;amp;list=PL6gx4Cwl9DGDi9F_slcQK7knjtO8TUvUs"&gt;beginner video series&lt;/a&gt; from &lt;em&gt;The New Boston&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If you're serious about learning Flask and Python web development checkout &lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt;, they have top-notch material on this subject.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. We updated this doc with additional instructions how to submit your solution to our community branch (and end-of-the-week review) via a Pull Request (PR).&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="flask"></category><category term="todo"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators - Review</title><link href="https://pybit.es/codechallenge14_review.html" rel="alternate"></link><published>2017-04-15T01:00:00+02:00</published><updated>2017-04-15T01:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-15:/codechallenge14_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge14.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge14.html"&gt;Write DRY Code With Decorators&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;Getting our hands on decorators we enriched our Python toolkit!  This one was also a lot of fun. See our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/14/decorator-pb.py"&gt;here&lt;/a&gt;. We did a simple timeit one and a more complex mute_exception one. For the latter we needed this week's article: &lt;a href="http://pybit.es/decorator-optional-argument.html"&gt;How to Write a Decorator with an Optional Argument?&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Some other things we learned: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Know the stdlib. Part of what makes these decorators useful is knowing about time, random, the @wraps decorator, partial, the awesome logging module, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we sensed using optional arguments made the mute_exception more versatile. You can run it in various ways: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@mute_exception                                    # works: no args provided = takes defaults (no reraise, returns None)
@mute_exception(reraise=True)                      # works: raises the ZeroDivisionError = crash
@mute_exception(reraise=False, default_return=0)   # works: does not reraise ZeroDivisionError and returns 0 in that case
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used f-strings! We are on Python 3.6 now so we just could no longer resist the temptation :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our &lt;a href="http://pybit.es/vim-tricks.html"&gt;Flake 8 Check Vim shortcut&lt;/a&gt; pays off: the code is more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep reading other blogs and books. We based these decorators on &lt;a href="https://www.blog.pythonlibrary.org/2016/06/09/python-how-to-create-an-exception-logging-decorator/"&gt;How to Create an Exception Logging Decorator&lt;/a&gt; and the almighty &lt;a href="https://www.amazon.com/dp/1449340377/?tag=pyb0f-20"&gt;Python Cookbook, Third edition&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Output 2 stacked decorators&lt;/h2&gt;
&lt;p&gt;When you run our solution it will print (fake) timings and mute/log the ZeroDivisionError exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python decorator-pb.py

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.755037784576416
div &lt;span class="m"&gt;1&lt;/span&gt;/4 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.25

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.763498067855835
div &lt;span class="m"&gt;2&lt;/span&gt;/5 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.4

div of args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; took &lt;span class="m"&gt;0&lt;/span&gt;.09057903289794922
div &lt;span class="m"&gt;3&lt;/span&gt;/0 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program did not crash by the divide by 0, logging the exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail decorators.log
...
...
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:36 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         DEBUG    div called &lt;span class="k"&gt;for&lt;/span&gt; args &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;00&lt;/span&gt;:58:37 root         ERROR    div raised exception ZeroDivisionError &lt;span class="k"&gt;for&lt;/span&gt; args: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;But there is more ... we got a &lt;a href="https://github.com/pybites/challenges/blob/community/14/decorator-clamytoe.py"&gt;nice PR&lt;/a&gt; with two other cool decorators: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boxit - a decorator to draw a box around text&lt;/li&gt;
&lt;li&gt;hashit - a decorator to securely hash passwords (using passlib)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Up&lt;/h2&gt;
&lt;p&gt;As you might have noticed (&lt;a href="http://pybit.es/beginning-flask.html"&gt;here&lt;/a&gt; and &lt;a href="https://twitter.com/pybites/status/851896144594583552"&gt;here&lt;/a&gt;) we are learning Flask so we thought it would be a great topic for our next challenge coming Monday. Stay tuned ...&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Code Challenge 14 - Write DRY Code With Decorators</title><link href="https://pybit.es/codechallenge14.html" rel="alternate"></link><published>2017-04-10T09:00:00+02:00</published><updated>2017-04-10T09:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-10:/codechallenge14.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! This week we let you practice with decorators, a nice way to abstract away common functionality. It allows you to alter the behavior of a callable without modifying the callable itself. We agree with Dan Bader that 'understanding decorators is a milestone for any serious Python programmer.' Enjoy!&lt;/p&gt;
&lt;h2&gt;What is a decorator?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated. (&lt;a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator"&gt;wiki&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's basically a wrapper and it is a &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;common design pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are new to this concept we recommend Dan's nice walk-through he published last week: &lt;a href="https://dbader.org/blog/python-decorators"&gt;Python Decorators: A Step-By-Step Introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another great article is RealPython's &lt;a href="https://realpython.com/blog/python/primer-on-python-decorators/"&gt;Primer on Python Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Roll your own!&lt;/h2&gt;
&lt;p&gt;In this week's challenge we invite you to come up with useful decorators for yourself or the greater community. We have included &lt;a href="https://github.com/pybites/challenges/tree/master/14/"&gt;a bit of material&lt;/a&gt; in our repo to get started. &lt;/p&gt;
&lt;p&gt;Tomorrow we will post an article on how to write decorators that take optional arguments. This caused us some pain, but we got it working. It might be useful to write more flexible decorators. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Getting ready&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h2&gt;Archive&lt;/h2&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="decorators"></category><category term="design patterns"></category><category term="DRY"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors - Review</title><link href="https://pybit.es/codechallenge13_review.html" rel="alternate"></link><published>2017-04-08T23:59:00+02:00</published><updated>2017-04-08T23:59:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-08:/codechallenge13_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge13.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge13.html"&gt;Highest Rated Movie Directors&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/13/directors.py"&gt;here&lt;/a&gt;. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In get_movies_by_director() we use csv.DictReader to parse the csv file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(MOVIE_DATA) as f:
    for line in csv.DictReader(f):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict(list) for our initial parsing of movies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m = Movie(title=movie, year=year, score=score)
directors[director].append(m)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_average_scores() returns a directors dict via a dict comprehension (note the &lt;a href="https://github.com/pybites/challenges/commit/959acf258a99730b732eb0915aa2088adf11e143"&gt;subtle refactoring&lt;/a&gt;, glad we had our tests), where keys are (director, mean score) and values their movies. We only take directors with at least MIN_MOVIES.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Although Python3 has statistics.mean we rolled our own (_calc_mean) because we first extract the score from the Movie namedtupe and added rounding (although that should maybe go in the print_results function). &lt;/p&gt;
&lt;p&gt;Next time we would use statistics.mean, because the more you leverage the stdlib the better. These considerations happen when coding, reviewing your and others code, good learning. &lt;/p&gt;
&lt;p&gt;Although movies should not be 0 we are defensive by never allowing the denominator to be 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / max(1, len(ratings))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could also write: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mean = sum(ratings) / len(ratings) if ratings else 0
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print_results() then prints the desired output. The enumerate is handy to get the sequence numbers for the top NUM_TOP_DIRECTORS directors. You can give it a start with a 2nd argument, 1 in this case. &lt;/p&gt;
&lt;p&gt;We used zfill before to print 01 / 02 etc., but found out that &lt;a href="https://github.com/pybites/challenges/commit/72b4642e24058758530ea463cbd3c0fbe2dfce1d"&gt;you can tackle this in the format syntax&lt;/a&gt;. We might refactor all these formats to use F-string, it would make this a lot cleaner :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again it was nice to work on this code having tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_directors.py
tests pass
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODOs&lt;/h2&gt;
&lt;p&gt;We realized during the challenge that you could also solve this with SQL or Pandas. We will update the solutions branch when we get around this. It would be nice to give it a try. Of course if you took these (or other) approaches feel free to share your solution &lt;a href="https://github.com/pybites/challenges/compare"&gt;opening a PR against our community branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here is &lt;a href="https://github.com/pybites/challenges/blob/community/13/directors-atakume.py"&gt;another solution by atakume&lt;/a&gt; we merged in our community branch. What we like about this solution is the use of itertools.groupby, doing the sorting outside the print_results function, and the second namedtuple which adds readability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Filmography = namedtuple(&amp;#39;Filmography&amp;#39;, &amp;#39;director movies avg_score&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week we will let you play with decorators, a great feature for writing DRY, reusable code. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="imdb"></category><category term="sort"></category><category term="namedtuples"></category><category term="defaultdict"></category></entry><entry><title>Code Challenge 13 - Highest Rated Movie Directors</title><link href="https://pybit.es/codechallenge13.html" rel="alternate"></link><published>2017-04-03T00:25:00+02:00</published><updated>2017-04-03T00:25:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-03:/codechallenge13.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's (&lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;), we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's &lt;a href="http://pybit.es/codechallenge12.html"&gt;tictactoe game&lt;/a&gt;, we'd like to sharpen your data analysis skills this week by parsing a movie data set in search for highest rated directors. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;There is this great ML article &lt;a href="https://blog.nycdatascience.com/student-works/machine-learning/movie-rating-prediction/"&gt;Predict Movie Rating&lt;/a&gt;. In this week's code challenge we use its data set to get the 20 highest rated directors based on their average movie IMDB ratings.&lt;/p&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As mentioned in the article the dataset is &lt;a href="https://raw.githubusercontent.com/sundeepblue/movie_rating_prediction/master/movie_metadata.csv"&gt;here&lt;/a&gt;, but we provided a copy in the repo's 13/ subfolder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse the movie_metadata.csv, using csv.DictReader you get a bunch of OrderedDicts from which you only need the following k,v pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OrderedDict([...
            (&amp;#39;director_name&amp;#39;, &amp;#39;Lawrence Kasdan&amp;#39;),   
            ...
            (&amp;#39;movie_title&amp;#39;, &amp;#39;Mumford\xa0&amp;#39;),
            ...
            (&amp;#39;title_year&amp;#39;, &amp;#39;1999&amp;#39;),
            ...
            (&amp;#39;imdb_score&amp;#39;, &amp;#39;6.9&amp;#39;),
            ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only consider directors with a minimum of 4 movies, otherwise you get misrepresentative data. However going to min 5 movies we miss Sergio Leone :(&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take movies of year &amp;gt;= 1960.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the top 20 highest rated directors with their movies ordered desc on rating.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look something like this (indeed some awesome movies here!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python directors.py

&lt;span class="m"&gt;01&lt;/span&gt;. Sergio Leone                                         &lt;span class="m"&gt;8&lt;/span&gt;.5
------------------------------------------------------------
&lt;span class="m"&gt;1966&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Good, the Bad and the Ugly                     &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;1968&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in the West                       &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1984&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Once Upon a Time in America                        &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;1964&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; A Fistful of Dollars                               &lt;span class="m"&gt;8&lt;/span&gt;.0

&lt;span class="m"&gt;02&lt;/span&gt;. Christopher Nolan                                    &lt;span class="m"&gt;8&lt;/span&gt;.4
------------------------------------------------------------
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight                                    &lt;span class="m"&gt;9&lt;/span&gt;.0
&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inception                                          &lt;span class="m"&gt;8&lt;/span&gt;.8
&lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Interstellar                                       &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Dark Knight Rises                              &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2006&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Prestige                                       &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Memento                                            &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;2005&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Batman Begins                                      &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2002&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Insomnia                                           &lt;span class="m"&gt;7&lt;/span&gt;.2

&lt;span class="m"&gt;03&lt;/span&gt;. Hayao Miyazaki                                       &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;2001&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Spirited Away                                      &lt;span class="m"&gt;8&lt;/span&gt;.6
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Princess Mononoke                                  &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Howl&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Moving Castle                               &lt;span class="m"&gt;8&lt;/span&gt;.2
&lt;span class="m"&gt;2008&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Ponyo                                              &lt;span class="m"&gt;7&lt;/span&gt;.7

&lt;span class="m"&gt;04&lt;/span&gt;. Quentin Tarantino                                    &lt;span class="m"&gt;8&lt;/span&gt;.2
------------------------------------------------------------
&lt;span class="m"&gt;1994&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Pulp Fiction                                       &lt;span class="m"&gt;8&lt;/span&gt;.9
&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Django Unchained                                   &lt;span class="m"&gt;8&lt;/span&gt;.5
&lt;span class="m"&gt;1992&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Reservoir Dogs                                     &lt;span class="m"&gt;8&lt;/span&gt;.4
&lt;span class="m"&gt;2009&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Inglourious Basterds                               &lt;span class="m"&gt;8&lt;/span&gt;.3
&lt;span class="m"&gt;2003&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;1&lt;/span&gt;                                  &lt;span class="m"&gt;8&lt;/span&gt;.1
&lt;span class="m"&gt;2004&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Kill Bill: Vol. &lt;span class="m"&gt;2&lt;/span&gt;                                  &lt;span class="m"&gt;8&lt;/span&gt;.0
&lt;span class="m"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; The Hateful Eight                                  &lt;span class="m"&gt;7&lt;/span&gt;.9
&lt;span class="m"&gt;1997&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Jackie Brown                                       &lt;span class="m"&gt;7&lt;/span&gt;.5

...
&lt;span class="m"&gt;16&lt;/span&gt; more
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We included &lt;a href="https://github.com/pybites/challenges/tree/master/13/directors-template.py"&gt;a template&lt;/a&gt; but maybe you want to code this up from scratch and/or use your favorite power tools (Pandas, SQL, etc.)&lt;/p&gt;
&lt;p&gt;We also included &lt;a href="https://github.com/pybites/challenges/blob/master/13/test_directors.py"&gt;some tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt; and link to it in our end-of-the-week review.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="data analysis"></category><category term="movies"></category><category term="rating"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game - Review</title><link href="https://pybit.es/codechallenge12_review.html" rel="alternate"></link><published>2017-04-01T17:00:00+02:00</published><updated>2017-04-01T17:00:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-04-01:/codechallenge12_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge12.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge12.html"&gt;Build a Tic-tac-toe Game&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution and learning&lt;/h2&gt;
&lt;p&gt;You can find our solution &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. This was great learning! Here are some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We went for the AI opponent to play against. Not sure if it is unbeatable, but it has some 'intelligence' because it knows when to win, block you or take the next best moves (more on this later). We need to know a score for each position which we calculate by counting the number of times each position is in a winning combination:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WINNING_COMBINATIONS = (
    (7, 8, 9), (4, 5, 6), (1, 2, 3),
    (7, 4, 1), (8, 5, 2), (9, 6, 3),
    (1, 5, 9), (7, 5, 3),
)

POSITION_VALUES = Counter(
    itertools.chain(*WINNING_COMBINATIONS)
)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like Hangman, you have to keep state, so a class worked best for us and it is important to use a suitable data structure: a list of key numbers in the order of a typical key pad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VALID_POSITIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;Simple tictactoe game, board positions are like keyboard&lt;/span&gt;
&lt;span class="s1"&gt;                7 8 9&lt;/span&gt;
&lt;span class="s1"&gt;                4 5 6&lt;/span&gt;
&lt;span class="s1"&gt;                1 2 3&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kd"&gt;@clear_screen&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;        {} | {} | {}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;4&lt;/span&gt;:&lt;span class="kt"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;1&lt;/span&gt;:&lt;span class="kt"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator is probably overkill but we use print(game) in two places so we did not want to duplicate code nor did we feel it was pure to clear the screen as part of __str__ (OK maybe we exaggerated, but the &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator&lt;/a&gt; is a useful feature you probably end up using!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probably the most important method is to determine if there is a win state. is_win() loops over all winning combinations and if there is not a DEFAULT (_) in the 3 positions and they are of the same ('O' or 'X') we have a win:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def is_win(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = set([self.board[a], self.board[b], self.board[c]])
        if DEFAULT not in combo_vals and len(combo_vals) == 1:
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under main we drive the interface. It is one of the few times we choose a "for / else" construct, which some advice against. However here we liked it because there is a clear use case: if we break out of the for loop we have a win, else we ended performing all max 9 turns/moves, so we enter the for's else = game ends in 'draw'. The advantage of this approach is that we did not have to calculate the 'draw' scenario. We separated computer vs manual into 2 methods: ai_move() and manual_move():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while True:
    game = TicTacToe()

    turns = itertools.cycle([first, second])
    print(game)
    for _ in VALID_POSITIONS:
        player = next(turns)
        if player == COMPUTER:
            game.ai_move()
        else:
            game.manual_move()
        print(game)
        if game.is_win():
            print(&amp;#39;Player {} wins&amp;#39;.format(player))
            break
    else:  # for / else is frowned upon, I do like it here though!
        print(&amp;#39;Draw&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The AI bit was the most interesting part. We went not as far as the full 8 steps in &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;tictactoe's strategy&lt;/a&gt;, yet this will give you a bit of challenge. The computer checks first if it can win (end) the game, then if the player can win, if so prevent (block) that. If none of these two situations, it takes the best next move based on the before mentioned POSITION_VALUES which is a counter so its most_common() method returns most valuable positions first. Splitting this in multiple methods makes it easier maintainable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def ai_move(self):
    self._win_or_block() or self._take_best_next_free_pos()

def _win_or_block(self):
    for combo in WINNING_COMBINATIONS:
        a, b, c = combo
        combo_vals = [self.board[a], self.board[b], self.board[c]]
        # can only use unitiated positions
        if DEFAULT not in combo_vals:
            continue
        if combo_vals.count(COMPUTER) == 2:
            return self._update_board(combo, combo_vals)
        if combo_vals.count(PLAYER) == 2:
            return self._update_board(combo, combo_vals)
    return False

def _take_best_next_free_pos(self):
    for pos, _ in POSITION_VALUES.most_common():
        if self.board[pos] == DEFAULT:
            self.board[pos] = COMPUTER
            return True
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again our full solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/12/tictactoe.py"&gt;here&lt;/a&gt;. Let us know if you have any questions or if you spot anything we could have done better.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Here are some other ways to do it: from our &lt;a href="https://github.com/pybites/challenges/blob/community/12/tictactoe-atakume.py"&gt;community branch&lt;/a&gt; (remember you can submit code by PR!) and &lt;a href="https://redd.it/61o56j"&gt;via reddit comment&lt;/a&gt;). Reading other solutions to the same problem (as well as coding styles) is a great way to learn.&lt;/p&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Next week you will train your data analysis skills by parsing a movie data set. It will be fun :)&lt;/p&gt;
&lt;p&gt;We hope you are enjoying these challenges, learning along the way. Let us know &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;if you have any issue&lt;/a&gt; and/or &lt;a href="mailto:pybitesblog@gmail.com"&gt;contact us&lt;/a&gt; if you want to submit a cool challenge. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>Code Challenge 12 - Build a Tic-tac-toe Game</title><link href="https://pybit.es/codechallenge12.html" rel="alternate"></link><published>2017-03-27T00:01:00+02:00</published><updated>2017-03-27T00:01:00+02:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-27:/codechallenge12.html</id><summary type="html">&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! After last week's conceptual challenge (&lt;a href="http://pybit.es/codechallenge11.html"&gt;generators&lt;/a&gt;), we'd like to challenge you this week to build &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe"&gt;Tic-tac-toe&lt;/a&gt;. Every time we do games (previously &lt;a href="http://pybit.es/codechallenge02.html"&gt;Word Values&lt;/a&gt; and &lt;a href="http://pybit.es/codechallenge10.html"&gt;Hangman&lt;/a&gt;) we learn a lot. Enjoy and we review solutions end of this week.&lt;/p&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;Build a command line app where you can play against a friend or the computer. We recommend the latter to do some AI: to intelligently respond to player's moves (see &lt;a href="https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy"&gt;Strategy&lt;/a&gt;). Maybe you can add game levels to avoid the machine to be 'too smart' (see &lt;a href="https://www.google.es/search?q=tictactoe&amp;amp;oq=tictactoe"&gt;Google widget&lt;/a&gt; for example). &lt;/p&gt;
&lt;p&gt;For the best UX it's probably easiest to number the board like the keyboard's number pad: 7-8-9, 4-5-6, 1-2-3. We provided &lt;a href="https://github.com/pybites/challenges/blob/master/12/tictactoe-template.py"&gt;a template&lt;/a&gt; with some guidance, but maybe you want to start from scratch (let us know what works best for you ...)&lt;/p&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; how to fork &lt;a href="https://github.com/pybites/challenges"&gt;our challenges repo&lt;/a&gt; to get cracking. If you want to share your solution do &lt;a href="https://github.com/pybites/challenges/compare"&gt;a PR&lt;/a&gt; and we will add it to &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;our community branch&lt;/a&gt;. We will feature creative solutions and learning in our review post.&lt;/p&gt;
&lt;h3&gt;Archive&lt;/h3&gt;
&lt;p&gt;You can find all our code challenges so far &lt;a href="http://pybit.es/pages/challenges.html"&gt;here&lt;/a&gt;. If you have ideas for a future challenge or find any issues, please &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least: there is no best solution, only learning more and better Python. Good luck!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="tictactoe"></category><category term="AI"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit - Review</title><link href="https://pybit.es/codechallenge11_review.html" rel="alternate"></link><published>2017-03-25T09:10:00+01:00</published><updated>2017-03-25T09:10:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-25:/codechallenge11_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge11.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the code challenge of this week: &lt;a href="http://pybit.es/codechallenge11.html"&gt;Generators for Fun and Profit&lt;/a&gt;. It's never late to join, just &lt;a href="https://github.com/pybites/challenges"&gt;fork us&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Our solution + learning&lt;/h2&gt;
&lt;p&gt;This was a pretty easy one, yet showing a powerful way to start thinking about generators as pipelines that can be plugged into each other.&lt;/p&gt;
&lt;p&gt;Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/11/generators.py"&gt;here&lt;/a&gt;. A couple of notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here you see the 'plugged into each other' part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../*/*.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iglob returns an iterator which yields the paths matching a pathname pattern, glob returns a list, also fine because we are not dealing with a lot of directories. You can also use os.walk but when you have a clear pattern (i)glob is less code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use yield from (&amp;gt;= 3.3) which saves a for loop (shorter).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/codechallenge03_review.html"&gt;seen before&lt;/a&gt; use collections.Counter, it's hard to beat short- and conciseness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def gen_count(modules):
    yield from Counter(modules).most_common()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use grouping to capture the match as discussed in &lt;a href="http://pybit.es/mastering-regex.html"&gt;our regex article&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# retrieves what&amp;#39;s matched in parenthesis&lt;/span&gt;

&lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^import (\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Community branch&lt;/h2&gt;
&lt;p&gt;We got our first solution PR which we merged onto our &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;community branch&lt;/a&gt;. This is a nice way to get credit and help our community learn more. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges/blob/community/11/generators-atakume.py"&gt;The solution&lt;/a&gt; was pretty similar to ours. One nice addition was to sort manually on both values and keys, most_common only sorts by values. Also the regex part was slightly different stripping off import with re.sub. It is nice to see different solutions to the same problem, you learn more.&lt;/p&gt;
&lt;h2&gt;next(Challenges)&lt;/h2&gt;
&lt;p&gt;Next week we do another game, so we expect some more complexity and variety in solutions. Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Do you like these challenges?&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying this. If we can do anything better or you have ideas please &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us. See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="yield"></category><category term="Counter"></category><category term="glob"></category><category term="regex"></category></entry><entry><title>Code Challenge 11 - Generators for Fun and Profit</title><link href="https://pybit.es/codechallenge11.html" rel="alternate"></link><published>2017-03-20T09:00:00+01:00</published><updated>2017-03-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-20:/codechallenge11.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them in our new challenge. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;There is nothing like a challenge to bring out the best in man. - Sean Connery&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;After &lt;a href="http://pybit.es/generators.html"&gt;last week's article on generators&lt;/a&gt; we will get you to practice a bit more with them.&lt;/p&gt;
&lt;p&gt;Inspired by David Beazley's &lt;a href="http://www.dabeaz.com/generators/"&gt;Generator Tricks for Systems Programmers&lt;/a&gt; we ask you to turn the following unix pipeline into Python code using generators. To get a bunch of .py files you can use our challenges repo you cloned. Or use a project of your own. &lt;/p&gt;
&lt;p&gt;Note that in our experience one subprocess is not necessarily one generator, for example 'sort|uniq|sort' can be easily combined into one, as well as 'grep|sed'. See &lt;a href="https://github.com/pybites/challenges/blob/master/11/generators-template.py"&gt;our template&lt;/a&gt; if you need guidance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assuming you pulled our challenges master and are in our 11/ subdirectory &lt;/span&gt;
&lt;span class="c1"&gt;# code this unix pipeline into Python using generators &lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;../*/*&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/import //g&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not familiar yet with Unix pipeline? It's pretty well explained &lt;a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges (UPDATES)&lt;/h3&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL doc&lt;/a&gt; which should contain everything you need to get up and running (any issue, please open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;).&lt;/p&gt;
&lt;h4&gt;Update I) Forking&lt;/h4&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR (Pull Request)). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h4&gt;Update II) Submit your Solution&lt;/h4&gt;
&lt;p&gt;We made &lt;a href="https://github.com/pybites/challenges/tree/community"&gt;a new 'community' branch&lt;/a&gt;. Another way to get credit is to submit your code via &lt;a href="https://github.com/pybites/challenges/compare"&gt;a new PR&lt;/a&gt;. We do not merge anything on our master or solutions branches, but if you ping us this way we add your solution to our new community branch (as filename 'topic-GHuser.py') and feature it in &lt;a href="http://pybit.es/pages/challenges.html"&gt;our review&lt;/a&gt; if it taught us something cool.&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt;, open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And last but not least: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="generators"></category><category term="unix"></category><category term="newquote"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game - Review</title><link href="https://pybit.es/codechallenge10_review.html" rel="alternate"></link><published>2017-03-18T18:00:00+01:00</published><updated>2017-03-18T18:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-18:/codechallenge10_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge10.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution and learning&lt;/h2&gt;
&lt;p&gt;First of all it is great to see &lt;a href="https://github.com/pybites/challenges/network"&gt;more people working on our challenges&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Games are challenging, we learned quite a bit from this one. We also saw better ways of doing things. Our solution is &lt;a href="https://github.com/pybites/challenges/blob/solutions/10/hangman-pb.py"&gt;here&lt;/a&gt;. A summary what we learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We used a class to keep state. We used two lists for secret and guessed_word. Looking at it now self.secret_word should probably be a tuple (inmutable). Handling non-ASCII in the constructor made the rest easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.secret_word = list(word.lower())
self.guessed_word = [PLACEHOLDER if c in ASCII else c
                    for c in self.secret_word]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We could probably save the extra self.num_wrong_guesses variable by just popping states of the HANG_GRAPHICS list (or use the hang_graphics() generator directly). It's a real eye opener how you pick up these kind of improvements from reading each other's code. If you pick up one habit from our challenges let it be to &lt;em&gt;start reading source&lt;/em&gt;. As somebody remarked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I like seeing the other solutions. There are definitely small things that I could have done better/more pythonically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was also fascinating to see that there are various ways to accomplish this task: to check for a win, you can compare guess with secret. We took another approach by checking for absense of PLACEHOLDER (_) in the self.guessed_word list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small details. For example we had a debug flag while developing, and we used the __str__ dunder to build up a string representation of the object. What was new though was that you can use it with 'self' as well, as in '.format(self)'. Small tricks you only pick up by actually practicing. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI: we saw other solutions clearing the screen after each guess, and showing the ASCII constant (alphabet) with guesses stripped out, bit more GUI like. Nice. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We saw an try/except block wrapped around 'input = raw_input' to support Python 2 and 3. We will study 2vs3 in more detail next week ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Process update around Forking&lt;/h2&gt;
&lt;p&gt;We got some feedback that Forks don't lead to activity on your Github profile. One of our followers was so nice to update &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;our INSTALL&lt;/a&gt; (via PR). Maybe you want to use the workaround under III. if the credit thing is an issue for you. See &lt;a href="https://github.com/pybites/challenges/issues/2"&gt;issue #2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We hope you are enjoying these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to &lt;a href="https://github.com/pybites/challenges/issues/new"&gt;open a new issue&lt;/a&gt; or reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="forks"></category><category term="dunder"></category></entry><entry><title>Code Challenge 10 - Build a Hangman Game</title><link href="https://pybit.es/codechallenge10.html" rel="alternate"></link><published>2017-03-13T00:32:00+01:00</published><updated>2017-03-13T00:32:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-13:/codechallenge10.html</id><summary type="html">&lt;p&gt;A new week, a new 'bite' of Python coding! This week we will build a Hangman game. Good luck and have fun.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi Pythonistas, a new week, a new 'bite' of Python coding! &lt;/p&gt;
&lt;p&gt;This week we are going to code the well-known &lt;a href="http://www.wikihow.com/Play-Hangman"&gt;Hangman game&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We think this is a nice challenge because you have to think about design, iteration, working with various data structures, keep state (class?), etc. &lt;/p&gt;
&lt;p&gt;We provide you with some graphs and the topic will be movies: you get a top 100 of movies in a text file and code to load them into your program. &lt;/p&gt;
&lt;p&gt;For the rest we kept the template pretty empty to not force you too much into one direction.&lt;/p&gt;
&lt;p&gt;Of course if you have questions use the comments below. End of this week we discuss our solution and we hope we all learn a lot from each other.&lt;/p&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use persistence to keep track of scores (invent your own system) and report when the user breaks a new record.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We focus on the logic so command line is the required interface, however if you like to wrap this into a GUI, feel free ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;To keep it 'DRY' we abstracted the instructions out into an INSTALL.md page in our repo, see &lt;a href="https://github.com/pybites/challenges/blob/master/INSTALL.md"&gt;here&lt;/a&gt;. New or returning visitor, you should have all you need to get up and running.&lt;/p&gt;
&lt;p&gt;And remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;h3&gt;Code Challenges Archive&lt;/h3&gt;
&lt;p&gt;See &lt;a href="http://pybit.es/pages/challenges.html"&gt;this page&lt;/a&gt; for all code challenges so far, if you have an interesting one you'd like to see featured &lt;a href="http://pybit.es/pages/about.html"&gt;contact us&lt;/a&gt; or open a &lt;a href="https://github.com/pybites/challenges/issues"&gt;GH Issue&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob and Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="game"></category><category term="hangman"></category><category term="movies"></category><category term="github"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers - Review</title><link href="https://pybit.es/codechallenge09_review.html" rel="alternate"></link><published>2017-03-11T09:00:00+01:00</published><updated>2017-03-11T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-11:/codechallenge09_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge09.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;Admittedly, when Bob and I discussed this challenge, I was a little intimidated. I'd never actually dealt with any of these concepts before! That said, I'm so glad we put this one out there!&lt;/p&gt;
&lt;p&gt;If it wasn't for the challenge, I wouldn't have learned nearly as much as I did.&lt;/p&gt;
&lt;p&gt;Given my current job role, I decided that it'd be fun to try and wrap a context manager around SSH functionality. This was a perfect choice given you need to specifically call .close() to close off the SSH session. If not, it just stays open indefinitely (or until timeout).&lt;/p&gt;
&lt;p&gt;All up, I had to solidify my understanding of generators, context managers and ssh within Python.
In a venv, I installed the &lt;a href="http://www.paramiko.org/"&gt;paramiko SSH package&lt;/a&gt; and went from there.&lt;/p&gt;
&lt;p&gt;After figuring out how to get the SSH connection going, I then spent the time bundling it all up within the context manager. &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan Bader's post&lt;/a&gt;; the &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;pep-0343 doc&lt;/a&gt; and a few Googled questions on Stack Overflow helped sort me out.&lt;/p&gt;
&lt;p&gt;See the full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_ssh.py"&gt;here&lt;/a&gt;. Not only does it work, but I'm also now using at home with my NAS!&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;This was a nice challenge. I got inspired by the DB rollback example of &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I wanted to see if I could use some existing code so I re-used the &lt;a href="https://github.com/pybites/blog_code/blob/master/flaskapi/test_app.py"&gt;test code&lt;/a&gt; of my &lt;a href="http://pybit.es/simple-flask-api.html"&gt;Simple Flask API article&lt;/a&gt;. Just as an exercise, in real life I actually like the setUp/tearDown sandwich unittest already provides. &lt;/p&gt;
&lt;p&gt;What I really liked was that I got to think about different ways to implement this: &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb_class.py"&gt;class&lt;/a&gt; vs &lt;a href="https://github.com/pybites/challenges/blob/solutions/09/with_testdb.py"&gt;contextmanager&lt;/a&gt;. All this experimentation led to some good learning.&lt;/p&gt;
&lt;p&gt;And I got to use pytest which I really want to explore further :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) [bbelderb@macbook 09 (solutions)]$ pytest with_tes*
=== test session starts ===
...

with_testdb.py ..
with_testdb_class.py ..

=== 4 passed in 0.01 seconds ===
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="with"></category><category term="contextmanagers"></category><category term="Paramiko"></category><category term="pytest"></category></entry><entry><title>Code Challenge 09 - The With Statement and Context Managers</title><link href="https://pybit.es/codechallenge09.html" rel="alternate"></link><published>2017-03-06T09:50:00+01:00</published><updated>2017-03-06T09:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-06:/codechallenge09.html</id><summary type="html">&lt;p&gt;A new week, more coding! This week we have a free form exercise. This week you will implement your own Context Manager (= support with on your object).&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! &lt;/p&gt;
&lt;p&gt;This week we have a free form exercise. After reading &lt;a href="https://dbader.org/blog/python-context-managers-and-with-statement"&gt;Dan's great article on the with statement&lt;/a&gt; we thought it would be cool to ask our PyBites community to come up with creative uses of the with statement. This week you get to implement your own Context Manager.&lt;/p&gt;
&lt;p&gt;You can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define a class implementing the __enter__ and __exit__ methods. Dan shows an Indenter class as example in his article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the nice &lt;a href="https://docs.python.org/3.6/library/contextlib.html#contextlib.contextmanager"&gt;@contextmanager decorator&lt;/a&gt; shortcut. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;h3&gt;Other resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.6/reference/compound_stmts.html#with"&gt;with statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343 -- The "with" Statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/contextlib.html"&gt;contextlib — Utilities for with-statement contexts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/"&gt;Python with Context Managers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If beginner you might need to read up on some more advanced concepts: &lt;a href="https://wiki.python.org/moin/Generators"&gt;Generators&lt;/a&gt; and &lt;a href="https://wiki.python.org/moin/PythonDecorators"&gt;Decorators&lt;/a&gt;, also covered in chapters 3 and 7 of the &lt;a href="http://book.pythontips.com/en/latest/index.html"&gt;Python tips book&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 09
# open withlove.py (just a blank file for this challenge)
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="with"></category><category term="contextlib"></category><category term="contextmanagers"></category><category term="decorators"></category><category term="generators"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker - Review</title><link href="https://pybit.es/codechallenge08_review.html" rel="alternate"></link><published>2017-03-05T09:00:00+01:00</published><updated>2017-03-05T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-03-05:/codechallenge08_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge08.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;h3&gt;Julian&lt;/h3&gt;
&lt;p&gt;The simplicity of this challenge is what made it fun for me. The challenge was in deciding how to store and manage the data in the most effective (and hopefully Pythonic!) way.&lt;/p&gt;
&lt;p&gt;I decided to go with multiple dicts: dicts for each room and then one main dict for the list of rooms.&lt;/p&gt;
&lt;p&gt;Code wise, the challenge was to then properly list out the required keys and values of each dict when required. I did this using nested for loops in the &lt;em&gt;print_contents()&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;I also added in a quick function to get the value of each room in total. It was satisfying seeing the result of sum(v.values()) appear! See output below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_julian.py

Study
computer: &lt;span class="nv"&gt;$1200&lt;/span&gt;
lg flatron monitor: &lt;span class="nv"&gt;$300&lt;/span&gt;
samsung monitor: &lt;span class="nv"&gt;$500&lt;/span&gt;
desk: &lt;span class="nv"&gt;$400&lt;/span&gt;
guitar: &lt;span class="nv"&gt;$500&lt;/span&gt;

Living Room
couch: &lt;span class="nv"&gt;$1000&lt;/span&gt;
tv: &lt;span class="nv"&gt;$3000&lt;/span&gt;
playstation: &lt;span class="nv"&gt;$500&lt;/span&gt;
speakers: &lt;span class="nv"&gt;$600&lt;/span&gt;
beanbag: &lt;span class="nv"&gt;$30&lt;/span&gt;

Master Bedroom
bed: &lt;span class="nv"&gt;$400&lt;/span&gt;
mattress: &lt;span class="nv"&gt;$1000&lt;/span&gt;
chair: &lt;span class="nv"&gt;$180&lt;/span&gt;
drawers: &lt;span class="nv"&gt;$250&lt;/span&gt;
lamp: &lt;span class="nv"&gt;$20&lt;/span&gt;

Totals:
Study: &lt;span class="nv"&gt;$2900&lt;/span&gt;
Living Room: &lt;span class="nv"&gt;$5130&lt;/span&gt;
Master Bedroom: &lt;span class="nv"&gt;$1850&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_julian.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bob&lt;/h3&gt;
&lt;p&gt;I had fun making an interactive version for this. This forced me to think about user input validation: name of item is required, value requires an int.
There might be a bit repetition in resulting &lt;em&gt;get_name&lt;/em&gt; and &lt;em&gt;get_value&lt;/em&gt;, they both ask for user input, yet do different validations. 
Maybe something to wrap in a validation class ...&lt;/p&gt;
&lt;p&gt;Nice constructs I could use: defaultdict, namedtuple and format printing.&lt;/p&gt;
&lt;p&gt;Before I would have mixed calculation and printing, now I isolating the summing in &lt;em&gt;calc_totals&lt;/em&gt; function which makes it a bit cleaner. 
See output below - I changed the NUM_ITEMS constant to 2 for shorter output (could make it a command line arg ...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python inventory_bob.py

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room study:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: monitor
- Enter the value of the item: &lt;span class="m"&gt;200&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: laptop
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room living_room:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: sofa
- Enter the value of the item: &lt;span class="m"&gt;600&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: tv
- Enter the value of the item: &lt;span class="m"&gt;500&lt;/span&gt;

Entering items &lt;span class="k"&gt;for&lt;/span&gt; room master_bedroom:

* Item &lt;span class="c1"&gt;#1:&lt;/span&gt;
- Enter the name of the item: bed
- Enter the value of the item: &lt;span class="m"&gt;1000&lt;/span&gt;
* Item &lt;span class="c1"&gt;#2:&lt;/span&gt;
- Enter the name of the item: couch
- Enter the value of the item: &lt;span class="m"&gt;400&lt;/span&gt;

* Room: study
monitor        :   &lt;span class="m"&gt;200&lt;/span&gt;
laptop         :  &lt;span class="m"&gt;1000&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1200&lt;/span&gt;

* Room: living_room
sofa           :   &lt;span class="m"&gt;600&lt;/span&gt;
tv             :   &lt;span class="m"&gt;500&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1100&lt;/span&gt;

* Room: master_bedroom
bed            :  &lt;span class="m"&gt;1000&lt;/span&gt;
couch          :   &lt;span class="m"&gt;400&lt;/span&gt;
--
Subtotal       :  &lt;span class="m"&gt;1400&lt;/span&gt;

----
Total          :  &lt;span class="m"&gt;3700&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code &lt;a href="https://github.com/pybites/challenges/blob/solutions/08/inventory_bob.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bonus: simple API&lt;/h3&gt;
&lt;p&gt;This was also a good occasion to make a simple API with Flask, which we practiced &lt;a href="http://pybit.es/simple-flask-api.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;p&gt;See you next week ...&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="inventory"></category><category term="Flask"></category><category term="APIs"></category><category term="data structures"></category></entry><entry><title>Code Challenge 08 - House Inventory Tracker</title><link href="https://pybit.es/codechallenge08.html" rel="alternate"></link><published>2017-02-27T00:01:00+01:00</published><updated>2017-02-27T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-27:/codechallenge08.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will create an app to keep track of a house inventory.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A new week, time for some coding! Here's the idea - we're keeping it simple.&lt;/p&gt;
&lt;p&gt;Having home and contents insurance requires you to accurately indicate the value of the items in your house. The idea came to me when doing this for myself. &lt;/p&gt;
&lt;p&gt;What if I could write a simple program that allowed me to create a list of rooms in my house and for each room a list of items along with their dollar values? &lt;/p&gt;
&lt;h3&gt;House Inventory Tracker Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a list of rooms (doesn't have to use the list type).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each room in your rooms list needs to contain at least 5 items (ie, TV, couch, table, etc) and the relative dollar value of each item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write will print out each room along with the individual items and values. This needs to be properly formatted, eg: no printing a dict as is.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus&lt;/h3&gt;
&lt;p&gt;These are bonus features. Not required but cool to try if you're interested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create some sort of program shell with a menu system around this. ie, "Which room would you like to list out?"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're really game, allow users to create rooms and update information. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You could even make an API with Flask or your preferred framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print the total dollar value of each room and the entire house.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have persistent storage of the data. sqlite3 = stdlib and light-weight, but feel free to use your preferred DB / module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 08
# open inventory.py (just a blank file for this challenge)
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="app"></category><category term="inventory"></category><category term="APIs"></category><category term="Flask"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis - Review</title><link href="https://pybit.es/codechallenge07_review.html" rel="alternate"></link><published>2017-02-26T00:50:00+01:00</published><updated>2017-02-26T00:50:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-26:/codechallenge07_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge07.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solution / learning&lt;/h2&gt;
&lt;h3&gt;Getting the data&lt;/h3&gt;
&lt;p&gt;First we let the &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/getting_data.py"&gt;data gathering script we provided&lt;/a&gt; run for 5 days and 10 hours. As promised we would do the analysis on &lt;a href="http://www.imdb.com/title/tt4465564/"&gt;50 shades of darker&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup python getting_data.py &lt;span class="m"&gt;50&lt;/span&gt; shades darker &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It ran Mon Feb 20 09:13 - Sat Feb 25 19:25 and collected &amp;gt; 10K tweets, storing them in data_1487581986.json&lt;/p&gt;
&lt;p&gt;We kept it simple, question to be answered: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there overly positive or negative talk about 50 shades of darker on Twitter?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Enter TextBlob&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; is a Python (2 and 3) library for processing textual data. It provides a simple API for diving into common natural language processing (NLP) tasks such as part-of-speech tagging, noun phrase extraction, sentiment analysis, classification, translation, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It makes sentiment analysis very easy. &lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Our script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/07/sentiment.py"&gt;here&lt;/a&gt;. What we did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Import required libraries: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to follow along, create a virtual env and do a pip install -r requirements.txt (from subdirectory 07, after having cloned the challenges repo).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each retrieved tweet (and its meta data) was stored as json by the data collector script. This generator retrieves them from the input file (further down):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_tweets(input_file):
    with open(input_file) as f:
        for line in f.readlines():
            yield json.loads(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://textblob.readthedocs.io/en/dev/quickstart.html"&gt;TextBlob Quickstart&lt;/a&gt; offers an easy API for sentiment analysis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sentiment property returns a namedtuple of the form Sentiment(polarity, subjectivity). The polarity score is a float within the range [-1.0, 1.0].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we defined:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_sentiment(polarity):
    if polarity &amp;lt; 0:
        return &amp;quot;negative&amp;quot;
    elif polarity == 0:
        return &amp;quot;neutral&amp;quot;
    else:
        return &amp;quot;positive&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We pass the script the data_1487581986.json file we collected on our server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    if len(sys.argv) &amp;lt; 2:
        print(&amp;#39;please provide json data file&amp;#39;)
        sys.exit(1)

    input_file = sys.argv[1]

    tweets = get_tweets(input_file)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use a defaultdict to store the sentiments. We use a collections.defaultdict + set here (over the simpler collections.Counter) for two reasons: 1. ignore duplicate tweets, 2. store the texts for further inspection (see further down).&lt;/p&gt;
&lt;p&gt;This really shows the magic of external libraries and a nice API: few lines of code, hiding complexity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    sentiments = defaultdict(set)

    for tw in tweets:
        text = dict(tw)[&amp;#39;text&amp;#39;].lower()
        blob = TextBlob(text)
        sent = get_sentiment(blob.sentiment.polarity)
        sentiments[sent].add(text)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate percentages and print the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    total = sum(len(i) for i in sentiments.values())

    perc_pos = len(sentiments[&amp;quot;positive&amp;quot;]) / total * 100
    perc_neg = len(sentiments[&amp;quot;negative&amp;quot;]) / total * 100
    perc_neu = len(sentiments[&amp;quot;neutral&amp;quot;]) / total * 100

    print(&amp;quot;Analyzed {} tweets&amp;quot;.format(total))
    print(&amp;quot;Positive: {:.2f}%&amp;quot;.format(perc_pos))
    print(&amp;quot;Negative: {:.2f}%&amp;quot;.format(perc_neg))
    print(&amp;quot;Neutral: {:.2f}%&amp;quot;.format(perc_neu))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The verdict&lt;/h3&gt;
&lt;p&gt;People talk mostly positive about the movie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; python sentiment.py data_1487581986.json
Analyzed &lt;span class="m"&gt;10053&lt;/span&gt; tweets
Positive: &lt;span class="m"&gt;33&lt;/span&gt;.85%
Negative: &lt;span class="m"&gt;13&lt;/span&gt;.86%
Neutral: &lt;span class="m"&gt;52&lt;/span&gt;.29%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Would be nice to break this down further, maybe by region. We wanted to look at gender, but this data was not provided by the Twitter API. &lt;/p&gt;
&lt;h3&gt;Some anonymous examples&lt;/h3&gt;
&lt;p&gt;We peaked at some tweets for validation. As you see it's not 100% correct (doubts marked with '?'), but it does give you a good indication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;neutral
-- 50 shades darker though.. oouuu. 🙆🏽
-- ❤🤴🏼❤ — watching 50 shades darker...
-- still don&amp;#39;t know what to think of 50 shades darker🤔🤔
---

positive
-- can&amp;#39;t get over how amazing 50 shades darker is 😍
-- i enjoyed 50 shades darker very much
?-- that 50 shades darker was kind of sorry
---

negative
?-- still haven&amp;#39;t seen 50 shades darker :(  
-- 50 shades darker might be the worst movie i&amp;#39;ve ever seen ...
-- 50 shades darker was terrible god i wish i could get those 2 hours back
---
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://realpython.com/blog/python/twitter-sentiment-python-docker-elasticsearch-kibana/"&gt;This great article by Real Python&lt;/a&gt; shows another Twitter Sentiment Analysis example adding Docker, Elasticsearch, Kibana to the mix. &lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="Twitter"></category><category term="sentiment"></category><category term="TextBlob"></category></entry><entry><title>Code Challenge 07 - Twitter Sentiment Analysis</title><link href="https://pybit.es/codechallenge07.html" rel="alternate"></link><published>2017-02-20T00:01:00+01:00</published><updated>2017-02-20T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-20:/codechallenge07.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will do a sentiment analysis of a recently released movie, is it well received or not?&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Perform a sentiment analysis on a popular topic on Twitter&lt;/h3&gt;
&lt;p&gt;A new week, more coding! You are free to pick a topic. This can be a trend, news or movie. We will take latter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do Tweeters react on &lt;a href="http://www.imdb.com/title/tt4465564/?ref_=nv_sr_1"&gt;Fifty Shades Darker&lt;/a&gt;, positive or negative?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Getting ready&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Register an Twitter app if not done already to get keys, put those in config.py (copying the config-template.py)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a virtual environment and pip install Twython (to follow along with our approach just do pip install -r requirements.txt)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have provided a getting_data.py script (from &lt;a href="https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/getting_data.py"&gt;Joel Grus&lt;/a&gt;) that uses the Twitter &lt;a href="https://dev.twitter.com/streaming/overview"&gt;Streaming APIs&lt;/a&gt; to collect tweets, run it as follows. It takes 1000 tweets, adjust as necessary (this is also an experiment for us!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python getting_data.py Fifty Shades Darker
&lt;span class="c1"&gt;# replacing with your topic of interest&lt;/span&gt;
&lt;span class="c1"&gt;# generates data_unix_timestamp.json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you prefer Tweepy, you can use this &lt;a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/"&gt;article/ script&lt;/a&gt; (and pip install that library ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script you will write is sentiment.py, it contains some code to read the stored json back in memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python sentiment.py data_1487544849.json
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clean up the data, we did some of this in &lt;a href="http://pybit.es/codechallenge05_review.html"&gt;part 2&lt;/a&gt; of this challenge series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The sentiment analysis ... is the audience positive or negative? We will try &lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;TextBlob&lt;/a&gt; for this, use any (Python) tools you prefer ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git
$ git fetch upstream
# if not on master:
$ git checkout master
$ git merge upstream/master
$ cd 07
$ cp sentiment-template.py sentiment.py
# if you want to follow along with our recommended libraries (assuming py &amp;gt;= 3.3)
$ python -m venv venv 
$ source venv/bin/activate&amp;#39;
$ pip install -r requirements.txt
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction - Review</title><link href="https://pybit.es/codechallenge06_review.html" rel="alternate"></link><published>2017-02-17T16:00:00+01:00</published><updated>2017-02-17T16:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-17:/codechallenge06_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge06.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Possible solutions / learning&lt;/h2&gt;
&lt;h3&gt;1. Moving average using PyPI's RSS&lt;/h3&gt;
&lt;p&gt;My first approach was to take the &lt;a href="https://pypi.python.org/pypi?%3Aaction=packages_rss"&gt;PyPI New RSS feed&lt;/a&gt; and take the average of time between adding packages. The script is &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi100k.py"&gt;here&lt;/a&gt;. The problem though is that the RSS feed has only 40 items, not much data. However when I put it in a cronjob and left it running for a week I got pretty similar results: it will happen somewhere at the beginning of March:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep Result pypi.log |sed &amp;#39;s/,.* \[Main.*: /   /g&amp;#39;
2017-02-09 16:09:13   2017-02-25 13:52:23.701848
2017-02-10 15:57:03   2017-02-26 03:50:38.528795
2017-02-11 15:57:03   2017-03-09 23:10:14.631885
2017-02-12 15:57:03   2017-03-05 22:31:50.575452
2017-02-13 15:57:03   2017-02-27 07:02:47.599206
2017-02-14 15:57:03   2017-02-21 20:41:34.775090
2017-02-15 15:57:03   2017-02-25 00:01:30.304754
2017-02-16 15:57:03   2017-03-01 12:52:38.659931
2017-02-17 08:00:33   2017-03-01 09:38:01.360349
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another source to use if you go this route is &lt;a href="https://wiki.python.org/moin/PyPIXmlRpc"&gt;PyPI's XML-RPC methods&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Using scipy.interpolate on Webarchive data&lt;/h3&gt;
&lt;p&gt;I was pointed to the &lt;a href="http://web.archive.org/web/20131025235716/https://pypi.python.org/pypi"&gt;Web Archive&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/learnpython/comments/5trx9z/challenge_when_does_pypi_reach_100k_packages/"&gt;Reddit&lt;/a&gt;. This is how you get snapshots of the PyPI page over time == a set of date points and how many packages there were at each time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m venv venv &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; source venv/bin/activate
$ pip install waybackpack
# take 4 years of data (half a GB, delete when done)
$ waybackpack https://pypi.python.org/pypi -d pypi-snapshots --from-date 20130214 --to-date 20170214
# few days went by, adjusted end date to 20170217 today
#
# prep the data
$ cd pypi-snapshots
# sometimes unix is all you need ;)
$ find . -name &amp;#39;pypi&amp;#39;|xargs grep &amp;quot;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;[0-9][0-9]*&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&amp;quot;| perl -pe &amp;#39;s/.*?(\d+)\/.*&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;(\d+)&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;\/strong&amp;gt;/\1:\2/g&amp;#39; &amp;gt; ../data.txt
$ head -2 data.txt
20130214002304:28061
20130216031420:28108
$ tail -2 data.txt
20170215124232:98825
20170216124236:98907
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This data (and all scripts) are on our &lt;a href="https://github.com/pybites/challenges/tree/solutions/06"&gt;solutions branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I made &lt;a href="https://github.com/pybites/challenges/blob/solutions/06/pypi_pred_webarchive.ipynb"&gt;this notebook&lt;/a&gt; with the analysis. I used &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline"&gt;scipy.interpolate - UnivariateSpline&lt;/a&gt; to do the extrapolation, I found this &lt;a href="http://stackoverflow.com/questions/2745329/how-to-make-scipy-interpolate-give-an-extrapolated-result-beyond-the-input-range"&gt;here&lt;/a&gt; (Joma's answer).&lt;/p&gt;
&lt;h2&gt;My prediction&lt;/h2&gt;
&lt;p&gt;As you can see from the notebook I am getting: 1st of March 8:37 PM. First of the month, nice date. And consistent with the first method.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the result" src="https://pybit.es/images/pypi100k.png"&gt;&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;What was your solution? Feel free to share in the comments below.&lt;/p&gt;
&lt;p&gt;We hope you enjoy these challenges. Please provide us feedback if we can improve anything ...&lt;/p&gt;
&lt;p&gt;If you have an interesting challenge you want us to feature, don't hesitate to reach out to us.&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we return to the Twitter API to do a sentiment analysis! Stay tuned ...&lt;/p&gt;
&lt;h2&gt;Update 9th of March 2016&lt;/h2&gt;
&lt;p&gt;OK so turns out the 1st of March was a bit optimistic, predicting is hard :)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://twitter.com/raymondh/status/836826095026647042"&gt;best / winning solution&lt;/a&gt; with nice Bokeh visuals can be found &lt;a href="https://pypi-package-count.herokuapp.com/"&gt;here&lt;/a&gt;. Although it displays the current date now, it had the right predicted date of the 4th of March before 100K was reached. &lt;/p&gt;
&lt;p&gt;PyBites celebrated closely after hitting this important milestone:&lt;/p&gt;
&lt;script src='//platform.twitter.com/widgets.js'&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It's official! PyPI has hit 100,000 packages! Woohoo!! &lt;a href="https://twitter.com/search/#Python" target="_blank"&gt;#Python&lt;/a&gt; &lt;a href="https://twitter.com/search/#milestone" target="_blank"&gt;#milestone&lt;/a&gt; &lt;a href="https://twitter.com/@TalkPython" target="_blank"&gt;@TalkPython&lt;/a&gt; &lt;a href="https://twitter.com/@pybites" target="_blank"&gt;@pybites&lt;/a&gt; &lt;a href="https://t.co/jqDoWsjfyR" title="https://t.co/jqDoWsjfyR" target="_blank"&gt;https://t.co/jqDoWsjfyR&lt;/a&gt;&lt;/p&gt;— Pybites (@pybites) &lt;a href="https://twitter.com/pybites/status/838178449999081472" data-datetime="2017-03-05T00:04:49+00:00"&gt;March 05, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt="printscreen of milestone" src="https://pbs.twimg.com/media/C6HQjnMUwAEjBhK.png"&gt;&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category><category term="scipy"></category><category term="numpy"></category><category term="matplotlib"></category></entry><entry><title>Code Challenge 06 - PyPI 100K Packages Prediction</title><link href="https://pybit.es/codechallenge06.html" rel="alternate"></link><published>2017-02-13T08:40:00+01:00</published><updated>2017-02-13T08:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-13:/codechallenge06.html</id><summary type="html">&lt;p&gt;A new week, more coding! In this challenge you will make a prediction when PyPI will reach the 100.000 packages milestone.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;A milestone right around the corner&lt;/h3&gt;
&lt;p&gt;A new week, more coding! &lt;/p&gt;
&lt;p&gt;We are grabbing this challenge from &lt;a href="https://twitter.com/raymondh/status/829474817082433536"&gt;Raymond Hettinger's tweet&lt;/a&gt; (EAFP):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python data extrapolation contest: Tweet your prediction of the exact date and time(UTC) that http://pypi.python.org  hits 100,000 packages&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted answers (tweet replies) were very different which made us curious. As it's a prediction there won't be one right answer of course. We challenge you to find a data set to make your prediction. We are curious what you will come up with ...&lt;/p&gt;
&lt;h3&gt;To follow along with our challenges&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# cp pypi100k-template.py pypi100k.py
# code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: there is no best solution, only learning more/ better Python. We're looking forward reviewing our and your solutions end of this week. Good luck and have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="pypi"></category><category term="prediction"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters - Review</title><link href="https://pybit.es/codechallenge05_review.html" rel="alternate"></link><published>2017-02-10T23:00:00+01:00</published><updated>2017-02-10T23:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-10:/codechallenge05_review.html</id><summary type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's end of the week again so we review the &lt;a href="http://pybit.es/codechallenge05.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;This week's challenge was really hard. We looked at &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt; to calculate similarity between Twitter users.&lt;/p&gt;
&lt;p&gt;Below what we got. Any feedback welcome. Code is &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we tweaked usertweets.py from last week to download 200 tweets of 15 users and store them as csv files in the data/ subdirectory. Users are mostly Pythonistas, but also some unrelated. We changed the solution a bit: instead of comparing only two users, we rank similarity of one user of the set against all others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We load all tweets per user in with get_user_tokens() and tokenize them with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tokenize_text(words):
    words = [word for word in words if len(word) &amp;gt; 4 and word not in STOPWORDS]
    words = [word for word in words if _is_ascii(word)]
    words = [word for word in words if not IS_LINK_OBJ.search(word)]
    return words
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where IS_LINK_OBJ discards links and mentions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IS_LINK_OBJ = re.compile(r&amp;#39;^(?:@|https?://)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get stopwords from nltk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="n"&gt;STOPWORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The underscore methods are helpers. We assigned lambdas to variables, but flake8 complained, so better methods :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then we use Gensim to compare a user against the set. This took quite some effort, hopefully our method is correct, the results (see further down) look promosing. We partially used &lt;a href="http://stackoverflow.com/questions/22433884/python-gensim-how-to-calculate-document-similarity-using-the-lda-model"&gt;this thread&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gensim&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# globbing csv files in data/ or provided with sys.argv[1:]&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LdaModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;id2word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatrixSimilarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_bow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_bow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vec_lda&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sims&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff_users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full code &lt;a href="https://github.com/pybites/challenges/blob/solutions/05/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interestingly this model worked kind of ok, but got different results upon running and not much polarity. It turned out that the sample Twitter set (200 tweets per user) was too small, so we created a data/new directory and used &lt;a href="https://gist.github.com/yanofsky/5436496"&gt;yanofsky's awesome tweet_dumper&lt;/a&gt; to get 3200 tweets per user. &lt;/p&gt;
&lt;p&gt;Data set before vs after:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wc -l *&lt;span class="p"&gt;|&lt;/span&gt;grep total
    &lt;span class="m"&gt;3618&lt;/span&gt; total
$ wc -l new/*&lt;span class="p"&gt;|&lt;/span&gt;grep total
   &lt;span class="m"&gt;45573&lt;/span&gt; total
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This did not make sense due to small data set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py Pybonacci
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.999743 -&amp;gt; nothing to &lt;span class="k"&gt;do&lt;/span&gt; yet almost &lt;span class="m"&gt;1&lt;/span&gt;.0 ?!
github &lt;span class="m"&gt;0&lt;/span&gt;.999743
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.455312
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new data set, although the script takes longer to run, now the results are much better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# not much Python: 
$ python similar_tweeters.py paugasol
jsonmez 0.739746
Schwarzenegger 0.739746
tferriss 0.739746
cine_tv_es 0.631373
gvanrossum 0.631373
treyhunner 0.631373
bbelderbos 0.206394
dbader_org 0.206394
newsafaribooks 0.206394
techmoneykids 0.113994
github 0.0983753
lifehacker 0.0983753
pybites 0.056072
importpython 0.0432182
PythonEggs 0.0432182
raymondh 0.0432182

# more Py
$ python similar_tweeters.py pybites
dbader_org 0.936956
importpython 0.936956
PythonEggs 0.936956
tferriss 0.936956 -&amp;gt; not sure about this one
bbelderbos 0.367078
techmoneykids 0.340996
github 0.320053
newsafaribooks 0.320053
gvanrossum 0.138829
jsonmez 0.138829
lifehacker 0.138829
Schwarzenegger 0.138829
treyhunner 0.138829
raymondh 0.0201458
cine_tv_es 0.0
paugasol 0.0

# results change upon second run - comment if you know why / how to fix or improve?
$ python similar_tweeters.py pybites
importpython 0.890289
newsafaribooks 0.890289
PythonEggs 0.890289
bbelderbos 0.506814
techmoneykids 0.443702
jsonmez 0.426503
paugasol 0.426503
Schwarzenegger 0.426503
tferriss 0.426503
github 0.138233
gvanrossum 0.138233
treyhunner 0.138233
dbader_org 0.100782 -&amp;gt; was high last run ?!
lifehacker 0.0658598
raymondh 0.0658598
cine_tv_es 0.0451122
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running one more, my personal Twitter. Also a lot of Python at the top, jsonmez/ tferriss/ pybites I have mentioned/retweeted more than once. This looks pretty good ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python similar_tweeters.py bbelderbos
dbader_org &lt;span class="m"&gt;0&lt;/span&gt;.985021
gvanrossum &lt;span class="m"&gt;0&lt;/span&gt;.985021
importpython &lt;span class="m"&gt;0&lt;/span&gt;.985021
jsonmez &lt;span class="m"&gt;0&lt;/span&gt;.985021
pybites &lt;span class="m"&gt;0&lt;/span&gt;.985021
PythonEggs &lt;span class="m"&gt;0&lt;/span&gt;.985021
tferriss &lt;span class="m"&gt;0&lt;/span&gt;.985021
treyhunner &lt;span class="m"&gt;0&lt;/span&gt;.985021
techmoneykids &lt;span class="m"&gt;0&lt;/span&gt;.275167
newsafaribooks &lt;span class="m"&gt;0&lt;/span&gt;.149423
paugasol &lt;span class="m"&gt;0&lt;/span&gt;.149423
Schwarzenegger &lt;span class="m"&gt;0&lt;/span&gt;.149423
raymondh &lt;span class="m"&gt;0&lt;/span&gt;.142598
cine_tv_es &lt;span class="m"&gt;0&lt;/span&gt;.064402
github &lt;span class="m"&gt;0&lt;/span&gt;.064402
lifehacker &lt;span class="m"&gt;0&lt;/span&gt;.0570781
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was not an easy challenge! However we learned a lot: our first NLP exploration, playing with a relatively complex library and discovering the data science part of it: the quality of your input data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we pause a bit from Twitter doing something new and original on Monday, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="learning"></category><category term="nlp"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="gensim"></category><category term="nltk"></category></entry><entry><title>Code Challenge 05 - Twitter data analysis Part 2: Similar Tweeters</title><link href="https://pybit.es/codechallenge05.html" rel="alternate"></link><published>2017-02-06T00:01:00+01:00</published><updated>2017-02-06T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-06:/codechallenge05.html</id><summary type="html">&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Birds of a feather&lt;/h3&gt;
&lt;p&gt;A new week, more coding! In Part 2 of our Twitter data analysis we challenge you to find out how similar two tweeters are ...&lt;/p&gt;
&lt;h3&gt;Challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a script that receives two command line args: user1 and user2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ similar_tweeters.py bbelderbos pybites
&lt;span class="c1"&gt;# ... some index of similarity ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the last n tweets of these users. You can use the code of &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokenize the words in the tweets, filtering out stop words, URLs, digits, punctuation, words that only occur once or are less than 3 characters (and/or other noise ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the main subjects the users tweet about. You could use &lt;a href="https://radimrehurek.com/gensim/"&gt;Gensim&lt;/a&gt;, an NLP package for Topic Modeling. However feel free to take your own approach! We are dropping the helper template and external libs (requirements.txt) for this challenge, we'd love to see different approaches to this problem ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the subjects and come up with a similarity score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stay in sync with PyBites challenges repo&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
# ... no helper template for this challenge ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing our and your solutions on Friday.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="twitterapi"></category><category term="Twitter"></category><category term="NLP"></category><category term="similarity"></category><category term="Gensim"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data - Review</title><link href="https://pybit.es/codechallenge04_review.html" rel="alternate"></link><published>2017-02-03T17:00:00+01:00</published><updated>2017-02-03T17:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-02-03:/codechallenge04_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge04.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/04/usertweets.py"&gt;here&lt;/a&gt; and detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stdlib imports, pip install tweepy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we generated our keys through the Twitter API and put them in config.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define some constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEST_DIR = &amp;#39;data&amp;#39;
EXT = &amp;#39;csv&amp;#39;
NUM_TWEETS = 100
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we build a tweepy api object. First we had this in the constructor (init), but second thought we set it up as a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
API = tweepy.API(auth)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we use a namedtuple to define Tweet: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tweet = namedtuple(&amp;#39;Tweet&amp;#39;, &amp;#39;id_str created_at text&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are awesome for simple classes to store data without behaviour!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we define the class, Python3 best practice is to explicitly inherit from object: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the constructor gets the handle and an optional max_id, latter is to get a fixed set of tweets which we used in test_usertweets.py: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __init__(self, handle, max_id=None):
        self.handle = handle
        self.max_id = max_id
        self.output_file = &amp;#39;{}.{}&amp;#39;.format(os.path.join(DEST_DIR, self.handle), EXT)
        self._tweets = list(self._get_tweets())
        self._save_tweets()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we get the tweets with the _get_tweets() helper. It returns a generator of Tweet namedtuple objects containing only the get id_str, created_at and text attributes (you get a lot more returned from the Twitter API!): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _get_tweets(self):
        tweets = API.user_timeline(self.handle, count=NUM_TWEETS, max_id=self.max_id)
        return (Tweet(s.id_str, s.created_at, s.text.replace(&amp;#39;\n&amp;#39;, &amp;#39;&amp;#39;)) for s in tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the helper _save_tweets saves tweets to a CSV file. We choose to do it in the constructor, but you can of course take the underscore (_) out and call it explicitly: obj.save_tweets():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def _save_tweets(self):
        with open(self.output_file, &amp;#39;w&amp;#39;) as f:
            writer = csv.writer(f)
            writer.writerow(Tweet._fields)
            writer.writerows(self._tweets)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implementing len and getitem lets you iterate over the tweets (see our &lt;a href="http://pybit.es/python-data-model.html"&gt;data model post&lt;/a&gt;) as done in the for loop under __main__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __len__(self):
        return len(self._tweets)

    def __getitem__(self, pos):
        return self._tweets[pos]

if __name__ == &amp;quot;__main__&amp;quot;:

    for handle in (&amp;#39;pybites&amp;#39;, &amp;#39;techmoneykids&amp;#39;, &amp;#39;bbelderbos&amp;#39;):
        print(&amp;#39;--- {} ---&amp;#39;.format(handle))
        user = UserTweets(handle)
        for tw in user[:5]:
            print(tw)
        print()
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: twitter data changes and you don't want to call the API (slows tests down, unittests should be fast), need to look at mock ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Next week we use this pre-work to load in tweets of various Twitter users and determine who are most similar using NLP techniques. See you on Monday ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tweets"></category><category term="Twitter"></category><category term="twitterapi"></category><category term="oop"></category><category term="datamodel"></category><category term="csv"></category><category term="namedtuples"></category></entry><entry><title>Code Challenge 04 - Twitter data analysis Part 1: Getting Data</title><link href="https://pybit.es/codechallenge04.html" rel="alternate"></link><published>2017-01-30T00:01:00+01:00</published><updated>2017-01-30T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-30:/codechallenge04.html</id><summary type="html">&lt;p&gt;A new week, a new code challenge! In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Write a class to retrieve tweets from the Twitter API&lt;/h3&gt;
&lt;p&gt;In this 3 part challenge you will analyze Twitter Data. This week we will automate the retrieval of data. In Part 2 we will task you with finding similar tweeters, and for Part 3 you will do a full sentiment analysis.&lt;/p&gt;
&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup virtual environment and install requirements&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;04&lt;/span&gt;
$ python3 -m venv venv
&lt;span class="c1"&gt;# = py3 (might need virtualenv for py2 env)&lt;/span&gt;

$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate 
&lt;span class="c1"&gt;# install tweepy (and its depencencies)&lt;/span&gt;
$ pip install -r requirements.txt

&lt;span class="c1"&gt;# if you want to use another package like twython, feel free to do so&lt;/span&gt;

&lt;span class="c1"&gt;# get your API keys from Twitter - https://apps.twitter.com &lt;/span&gt;
$ cp config-template.py config.py
&lt;span class="c1"&gt;# paste the keys in config.py&lt;/span&gt;

&lt;span class="c1"&gt;# choose a template&lt;/span&gt;
$ cp usertweets-help.py usertweets.py
&lt;span class="c1"&gt;# or &lt;/span&gt;
$ cp usertweets-nohelp.py usertweets.py
&lt;span class="c1"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The challenge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Define a class called UserTweets that takes a Twitter handle / user in its constructor. it also receives an optional max_id parameter to start from a particular tweet id. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a tweepy API object using the tokens imported from config.py (again, you can use another package if you prefer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an instance variable to hold the last 100 tweets of the user. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement len() and getitem() magic (dunder) methods to make the UserTweets object iterable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the generated data as CSV in the data subdirectory: data/some_handle.csv, columns: id_str,created_at,text&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We posted two articles this week you might find useful in this context: &lt;a href="http://pybit.es/oop-primer.html"&gt;oop primer&lt;/a&gt; and &lt;a href="http://pybit.es/python-data-model.html"&gt;Python's data model&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you decide to use Tweepy, you might want to check its &lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html"&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;For developers that like to work towards tests we included test_usertweets.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_usertweets.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example output&lt;/h3&gt;
&lt;p&gt;We used a namedtuple here, this is not required. Also note the tweets can differ, yet in the unittests we test a fix set (using the optional max_id parameter in the constructor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;usertweets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pybites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;825629570992726017&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter digest 2017 week 04 https://t.co/L3njBuBats #python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lrth&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;bbelderb&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;    &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bbelderb&lt;/span&gt;&lt;span class="nd"&gt;@macbook&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pybites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="mi"&gt;825629570992726017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Twitter&lt;/span&gt; &lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;L3njBuBats&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;span class="mi"&gt;825267189162733569&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Challenge&lt;/span&gt; &lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PyBites&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xvcLQBbvup&lt;/span&gt; &lt;span class="c1"&gt;#python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="twitterapi"></category><category term="tweets"></category><category term="Twitter"></category><category term="oop"></category><category term="datamodel"></category><category term="magicmethods"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis - Review</title><link href="https://pybit.es/codechallenge03_review.html" rel="alternate"></link><published>2017-01-27T09:00:00+01:00</published><updated>2017-01-27T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-27:/codechallenge03_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge03.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/03/tags.py"&gt;here&lt;/a&gt; and commented below.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We use the stdlib to its fullest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define constants at the top. We use maketrans to easily extend replacing multiple characters in the future:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPLACE_CHARS = str.maketrans(&amp;#39;-&amp;#39;, &amp;#39; &amp;#39;)
IDENTICAL = 1.0
TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We used a regular expression to show that you can. A better way would be to use a PyPI package like feedparser or BeautifulSoup (see further down). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TAG_HTML = re.compile(r&amp;#39;&lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;([^&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;]+)&lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&amp;#39;)

def get_tags():
    &amp;quot;&amp;quot;&amp;quot;Find all tags (TAG_HTML) in RSS_FEED.
    Replace dash with whitespace (REPLACE_CHARS)&amp;quot;&amp;quot;&amp;quot;
    with open(RSS_FEED) as f:
        tags = TAG_HTML.findall(f.read().lower())
    return [tag.translate(REPLACE_CHARS) for tag in tags]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For everything counting related you really want to use collections.Counter and its most_common method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_top_tags(tags):
    &amp;quot;&amp;quot;&amp;quot;Get the TOP_NUMBER of most common tags&amp;quot;&amp;quot;&amp;quot;
    return Counter(tags).most_common(TOP_NUMBER)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For similarities we were going to read up on &lt;a href="http://www.nltk.org/"&gt;NLTK&lt;/a&gt; but stdlib has difflib.SequenceMatcher which makes this very easy (found &lt;a href="http://stackoverflow.com/questions/17388213/find-the-similarity-percent-between-two-strings"&gt;on Stackoverflow&lt;/a&gt;). We gained quite some performance first matching the first char between tags, but this assumes the first char is always the same. If you don't want that, take that check out. We use itertools.product instead of a double for loop. Lastly yield makes get_similarities a generator which we find more Pythonic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_similarities(tags):
    &amp;quot;&amp;quot;&amp;quot;Find set of tags pairs with similarity ratio of &amp;gt; SIMILAR&amp;quot;&amp;quot;&amp;quot;
    for pair in product(tags, tags):
        # performance enhancements 1.992s -&amp;gt; 0.144s
        if pair[0][0] != pair[1][0]:
            continue
        pair = tuple(sorted(pair))  # set needs hashable type
        similarity = SequenceMatcher(None, *pair).ratio()
        if SIMILAR &amp;lt; similarity &amp;lt; IDENTICAL:
            yield pair
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The calling code was given, printing it here for completeness:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    tags = get_tags()
    top_tags = get_top_tags(tags)
    print(&amp;#39;* Top {} tags:&amp;#39;.format(TOP_NUMBER))
    for tag, count in top_tags:
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(tag, count))
    similar_tags = dict(get_similarities(tags))
    print()
    print(&amp;#39;* Similar tags:&amp;#39;)
    for singular, plural in similar_tags.items():
        print(&amp;#39;{:&amp;lt;20} {}&amp;#39;.format(singular, plural))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests pass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout solutions
$ python test_tags.py 
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.153s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Code challenges != Python's 'preferably only one way'&lt;/h2&gt;
&lt;p&gt;We know '&amp;gt;&amp;gt;&amp;gt; import this' says: "There should be one-- and preferably only one --obvious way to do it." and usually there is. Yet for our challenges we encourage people to be creative and not stick to the template + tests per se (we improve the code challenge format as we learn ...). &lt;/p&gt;
&lt;p&gt;For example Jeffrey parses our feed directly in &lt;a href="https://gist.github.com/jrjames83/eeda4324116dde12ea8d45c47a151ab0"&gt;his solution&lt;/a&gt; with requests and BeautifulSoup not stripping off the dash. This is great addition to our solution, using PyPI whenever you can is recommended. Also by parsing the live feed he created us a tool to run this check every now and then (thanks Jeffrey). We like to see different solutions.&lt;/p&gt;
&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a fresh new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="tags"></category><category term="similarity"></category><category term="blog"></category></entry><entry><title>Code Challenge 03 - PyBites Blog Tag Analysis</title><link href="https://pybit.es/codechallenge03.html" rel="alternate"></link><published>2017-01-23T00:01:00+01:00</published><updated>2017-01-23T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-23:/codechallenge03.html</id><summary type="html">&lt;p&gt;Our new code challenge is up: PyBites blog tag analysis. This week you will parse our RSS feed looking for the most common tags and the ones we possibly should merge based on similarity ratio. Enjoy!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given our RSS feed what tags does PyBites mostly use and which tags should be merged (based on similarity)?&lt;/h3&gt;
&lt;p&gt;Example output: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python tags.py

* Top &lt;span class="m"&gt;10&lt;/span&gt; tags:
python               &lt;span class="m"&gt;10&lt;/span&gt;
learning             &lt;span class="m"&gt;7&lt;/span&gt;
tips                 &lt;span class="m"&gt;6&lt;/span&gt;
tricks               &lt;span class="m"&gt;5&lt;/span&gt;
github               &lt;span class="m"&gt;5&lt;/span&gt;
cleancode            &lt;span class="m"&gt;5&lt;/span&gt;
best practices       &lt;span class="m"&gt;5&lt;/span&gt;
pythonic             &lt;span class="m"&gt;4&lt;/span&gt;
collections          &lt;span class="m"&gt;4&lt;/span&gt;
beginners            &lt;span class="m"&gt;4&lt;/span&gt;

* Similar tags:
game                 games
challenge            challenges
generator            generators
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;03&lt;/span&gt;
$ cp tags-help.py tags.py
&lt;span class="c1"&gt;# or:&lt;/span&gt;
$ cp tags-nohelp.py tags.py
&lt;span class="c1"&gt;# code&lt;/span&gt;

&lt;span class="c1"&gt;# run the unittests (optional)&lt;/span&gt;
$ python test_tags.py
...
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;3&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.155s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we update our blog regularly we provided a recent copy of our feed in the 03 directory: rss.xml. We also provided a copy of tags.html for verification (used by unittests in test_tags.py).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both templates provide 3 constants you should use: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TOP_NUMBER = 10
RSS_FEED = &amp;#39;rss.xml&amp;#39;
SIMILAR = 0.87
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rest is documented in the methods docstrings. Again use tags-help.py if you need more guidance, tags-nohelp.py is for the more experienced and/or if you want more freedom. Same goes for tests: use them if you need them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Talking about freedom feel free to use our &lt;a href="http://pybit.es/feeds/all.rss.xml"&gt;live feed&lt;/a&gt; but then the tests will probably break.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hint: for word similarity feel free to use NLTK, or your favorite language processing tool. However, stdlib does provide a nice way to do this. Using this method we came to 0.87 as a threshold to for example not mark 'python' and 'pythonic' as similar. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="codechallenges"></category><category term="github"></category><category term="learning"></category><category term="blog"></category><category term="tags"></category><category term="Counter"></category><category term="similarity"></category><category term="regex"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game - Review</title><link href="https://pybit.es/codechallenge02_review.html" rel="alternate"></link><published>2017-01-20T09:00:00+01:00</published><updated>2017-01-20T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-20:/codechallenge02_review.html</id><summary type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to sign up, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's Friday again so we review the &lt;a href="http://pybit.es/codechallenge02.html"&gt;code challenge of this week&lt;/a&gt;. It's never late to join, just fork our &lt;a href="https://github.com/pybites/challenges"&gt;challenges repo&lt;/a&gt; and start coding.&lt;/p&gt;
&lt;h2&gt;A possible solution&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/pybites/challenges/blob/solutions/02/game.py"&gt;here&lt;/a&gt; for the complete solution.&lt;/p&gt;
&lt;p&gt;Some learnings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we had the user interface like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        if not set(word) &amp;lt; set(draw):
            print(&amp;#39;One or more characters not in draw, try again&amp;#39;)
            continue
        elif not word.lower() in DICTIONARY:
            print(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
            continue
        return word
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But after learning about &lt;a href="http://pybit.es/error_handling.html"&gt;EAFP (easier to ask for forgiveness than permission)&lt;/a&gt; we thought it was more Pythonic to use exceptions. There was also a bug in the first check above (see comments, great learning!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def input_word(draw):
    while True:
        word = input(&amp;#39;Form a valid word: &amp;#39;).upper()
        try:
            return _validation(word, draw)
        except ValueError as e:
            print(e)
            continue

def _validation(word, draw):
    # thanks Durmus
    for char in word.upper():
        if char in draw:
            draw.remove(char)
        else:
        raise ValueError(&amp;quot;{} is not a valid word!&amp;quot;.format(word))
    if not word.lower() in DICTIONARY:
        raise ValueError(&amp;#39;Not a valid dictionary word, try again&amp;#39;)
    return word
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;random.sample makes it easy to get n number of random letters in one go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def draw_letters():
    return random.sample(POUCH, NUM_LETTERS)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_possible_dict_words - the hardest part. To get all possible letter combinations from the letter draw, you need itertools.permutations, not combinations, because order does matter: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; len(list(itertools.combinations(letters, 2)))
21
&amp;gt;&amp;gt;&amp;gt; len(list(itertools.permutations(letters, 2)))
42
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See also &lt;a href="http://pybit.es/itertools-examples.html"&gt;our post on itertools&lt;/a&gt;. See also Durmus' comment / solution here for an alternative using combinations ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First the helper generator to do the work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _get_permutations_draw(draw):
    for i in range(1, 8):
        yield from list(itertools.permutations(draw, i))  # &amp;gt;= 3.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates all permutation of 1, 2, 3, 4, 5, 6, and 7 letters.&lt;/p&gt;
&lt;p&gt;We store all those in permutations and then use a set operation again to get all valid dictionary words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get_possible_dict_words(draw):
    permutations = [&amp;#39;&amp;#39;.join(word).lower() for word in _get_permutations_draw(draw)]
    return set(permutations) &amp;amp; set(DICTIONARY)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the calc_word_value and max_word_value methods from &lt;a href="http://pybit.es/codechallenge01.html"&gt;challenge 01&lt;/a&gt; to calculate which word has the most value. &lt;/p&gt;
&lt;p&gt;The rest is main() calling the methods and outputting (as was provided in the template).&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;We got a request in the comments for tests to verify the work. Good idea, they are &lt;a href="https://github.com/pybites/challenges/blob/master/02/test_game.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python test_game.py 
......
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.056s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Its fun (addictive?) to play :)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: T, I, I, G, T, T, L
Form a valid word: tig
Word chosen: TIG (value: 4)
Optimal word possible: gilt (value: 5)
You scored: 80.0
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: O, N, V, R, A, Z, H
Form a valid word: zar
Word chosen: ZAR (value: 12)
Optimal word possible: zonar (value: 14)
You scored: 85.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: E, P, A, E, I, O, A
Form a valid word: pi
Word chosen: PI (value: 4)
Optimal word possible: apio (value: 6)
You scored: 66.7
[bbelderb@macbook 02 (master)]$ python game.py 
Letters drawn: B, R, C, O, O, E, O
Form a valid word: broc
Not a valid dictionary word, try again
Form a valid word: f
One or more characters not in draw, try again
Form a valid word: bore
Word chosen: BORE (value: 6)
Optimal word possible: boce (value: 8)
You scored: 75.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Any issues or feedback?&lt;/h2&gt;
&lt;p&gt;What did you learn this challenge? Feel free to share you code in the comments below. &lt;/p&gt;
&lt;p&gt;How are you experiencing these challenges? You like the format? What can we do differently and/or better?&lt;/p&gt;
&lt;h2&gt;next(challenges)&lt;/h2&gt;
&lt;p&gt;Monday we will be back with a new challenge, stay tuned ...&lt;/p&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt; if you already forked it.&lt;/p&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="github"></category><category term="learning"></category><category term="game"></category><category term="scrabble"></category><category term="itertools"></category></entry><entry><title>Code Challenge 02 - Word Values Part II - A Simple Game</title><link href="https://pybit.es/codechallenge02.html" rel="alternate"></link><published>2017-01-16T00:01:00+01:00</published><updated>2017-01-16T00:01:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-16:/codechallenge02.html</id><summary type="html">&lt;p&gt;Using what we've learned the last challenge this week we build a simple Scrabble-like game: given a random set of 7 letters build the most valuable word. Good luck!&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week, each one of you has a homework assignment ... - Tyler Durden (Fight club)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Given a random set of 7 letters build the most valuable word&lt;/h3&gt;
&lt;p&gt;Using what we've learned &lt;a href="http://pybit.es/codechallenge01.html"&gt;the last challenge&lt;/a&gt; this week we build a simple Scrabble-like game (without board):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Letters drawn: G, A, R, Y, T, E, V
Form a valid word: gary  &amp;lt;&amp;lt; user input
Word chosen: GARY (value: 8)
Optimal word possible: GARVEY (value: 13)
You scored: 61.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get ready&lt;/h3&gt;
&lt;p&gt;Start coding by &lt;a href="https://github.com/pybites/challenges"&gt;forking our challenges repo&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/pybites/challenges
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you already forked it &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming using ssh key
$ git remote add upstream git@github.com:pybites/challenges.git 
$ git fetch upstream
# if not on master: 
$ git checkout master 
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use one of the templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;
$ cp game-TEMPLATE.py game.py
&lt;span class="c1"&gt;# code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Requirements / steps&lt;/h3&gt;
&lt;p&gt;Last time we provided unittests and a guiding template. We received feedback that this was a bit too stringent. Therefore we provide two templates this time: game-help.py and game-nohelp.py&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We load in the necessary data structures to focus on the game:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that DICTIONARY is a set for O(1) lookups&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LETTER_VALUES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POUCH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Draw 7 random letters from POUCH.&lt;/p&gt;
&lt;p&gt;As said POUCH is given and contains a distribution of Scrabble letters so that the player gets enough vowels (equally drawing A-Z makes it extremely hard because you need more vowels to make words):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;C&amp;#39;,
&amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;D&amp;#39;, ...]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask the player to form a word with one or more of the 7 letters of the draw. Validate input for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1) all letters of word are in draw;
2) word is in DICTIONARY.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the word value and show it to the player.&lt;/p&gt;
&lt;p&gt;To focus on this challenge we re-use two methods from the previous challenge for this: calc_word_value and max_word_value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate the optimal word (= max word value) checking all permutations of the 7 letters of the draw, cross-checking the DICTIONARY set for valid ones. This is a bit more advanced, but allows you to score the player (next).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show the player what the optimal word and its value is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give the player a score based on the previous steps, basically: player_score / optimal_score.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bonus (not required)&lt;/h3&gt;
&lt;p&gt;The optimal solution calculation might be a bit difficult for some, that's why we stop here. But if you are feeling creative you might consider expanding this game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keep scores in a shelve (file, db) and notify the player when a new record is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with hints and bonuses: hints cost x points, give a bonus of y points, for example when a 7 letter word is created (complete draw exhausted).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a simple web, mobile app or pygame.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Good luck!&lt;/h3&gt;
&lt;p&gt;Remember: there is no best solution, only learning more and better Python.&lt;/p&gt;
&lt;p&gt;Enjoy and we're looking forward reviewing on Friday all the cool / creative / Pythonic stuff you come up with.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Again to start coding &lt;a href="https://github.com/pybites/challenges"&gt;fork our challenges repo&lt;/a&gt; or &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;sync it&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;About PyBites Code Challenges&lt;/h3&gt;
&lt;p&gt;More background in our &lt;a href="http://pybit.es/codechallenge01.html"&gt;first challenge article&lt;/a&gt;.&lt;/p&gt;</content><category term="scrabble"></category><category term="codechallenges"></category><category term="github"></category><category term="fork"></category><category term="learning"></category><category term="game"></category><category term="itertools"></category><category term="random"></category><category term="sets"></category></entry><entry><title>Code Challenge 01 - Word Values Part I - Review</title><link href="https://pybit.es/codechallenge01_review.html" rel="alternate"></link><published>2017-01-13T12:40:00+01:00</published><updated>2017-01-13T12:40:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-13:/codechallenge01_review.html</id><summary type="html">&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's Friday so we review the code challenge of this week. We describe our learning and a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Thanks for coding with us!&lt;/h2&gt;
&lt;p&gt;Wow! We have been amazed by the great response on &lt;a href="https://github.com/pybites/challenges"&gt;github&lt;/a&gt; and &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;HN&lt;/a&gt;. It's so cool to see &lt;a href="https://github.com/pybites/challenges/network/members"&gt;many developers&lt;/a&gt; jump on this :) &lt;/p&gt;
&lt;p&gt;This is awesome!&lt;/p&gt;
&lt;p&gt;&lt;img alt="awesome response on github, 70 forks as of this writing" src="https://pybit.es/images/awesome-response.png"&gt;&lt;/p&gt;
&lt;p&gt;It's Friday so we review the code challenge of this week. We describe our learning, a possible solution. We will also digest comments left on the &lt;a href="http://pybit.es/codechallenge01.html"&gt;Monday post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Process and learning&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Julian&lt;/h3&gt;
&lt;p&gt;It's funny, going into this challenge I actually thought it was going to be easy! I was wrong!
The concept was simple enough and I had a decent idea as to how I was going to write the program. I hit a wall however, when I realised I had to code my answer within the framework of the unittest. &lt;/p&gt;
&lt;p&gt;As a newbie programmer, having to almost "restrict" my code to work with the unittest was quite difficult.
Furthermore, working with the external data.py file also added a little complexity. I'm definitely used to having all data and variables located in the local file I'm working on.&lt;/p&gt;
&lt;p&gt;Probably the biggest pain point was trying to work with the LETTER_SCORES dict:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LETTER_SCORES = {letter: score for score, letters in scrabble_scores
                              for letter in letters.split()}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The for loop within the dict threw me off completely and I spent what felt like hours trying to make sense of it. It wasn't until Bob expanded it out into multiple lines of code that it finally made sense.&lt;/p&gt;
&lt;p&gt;On the flip side, I was pleasantly surprised with myself when I got the load_words() function working. I recalled Bob's comment on my code that I could use 'with' (context manager) to open an external file. Doing this made it much simpler.&lt;/p&gt;
&lt;p&gt;Working on the max_word_value() function was equally as satisfying as it was much more familiar coding ... but that may not be a good thing.&lt;/p&gt;
&lt;p&gt;In the end I wasn't actually able to get the program working. Not my proudest moment but definitely an eye opener as to how much further I have to go with my code. I'll hopefully have time this weekend to take another look - maybe a fresh look after a day off will highlight something I missed earlier!&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/hobojoe1848/challenges/tree/master/01"&gt;here&lt;/a&gt; if you're interested! Be gentle!&lt;/p&gt;
&lt;p&gt;Going forward with these challenges, I think we'll try and shake it up a little. Not make it "mandatory" to code the program within the unittest framework which should allow us to get a more diverse code base from the community.&lt;/p&gt;
&lt;p&gt;Overall, while difficult for me and even frustrating at times, I definitely enjoyed the challenge. It forced me to learn to read code I'd never seen before and rethink the way I write it myself.&lt;/p&gt;
&lt;h2&gt;Possible solution and Python idioms&lt;/h2&gt;
&lt;h3&gt;&amp;gt;&amp;gt;&amp;gt; Bob&lt;/h3&gt;
&lt;p&gt;This was a good exercise. As Julian said we might leave out unittests next time to make it less stringent and make up other requirements like max LOC. We also will provide two template files: beginner (more hand-holding) and advanced (almost blank file). You will see it on Monday ...&lt;/p&gt;
&lt;p&gt;My code is &lt;a href="https://github.com/bbelderbos/challenges/tree/solutions/01"&gt;here&lt;/a&gt;. Some comments:&lt;/p&gt;
&lt;h4&gt;load_words()&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def load_words():
    with open(DICTIONARY) as f:
        return [word.strip() for word in f.read().split()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, "with" is the way to go to open files. Initially I had return f.read().split() but then I saw the comment of &lt;a href="http://pybit.es/codechallenge01.html"&gt;sesh00&lt;/a&gt;: he used a list comprehension to make sure each word had whitespace stripped which is a good approach.&lt;/p&gt;
&lt;h4&gt;calc_word_value(word)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def calc_word_value(word):
    return sum(LETTER_SCORES.get(char.upper(), 0) for char in word)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dictionary. You can access values by using letter keys as LETTER_SCORES['A'] etc, but what if there is a non-valid character? There were two words with '-' in it so they would cause a KeyError. Using the dict get() method you can give it a default value of 0. Safety first: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Za&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; 
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Christophe&lt;/span&gt;
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pierre&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jean-Christophe&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LETTER_SCORES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For another more verbose (cleaner?) way to write this see &lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scores = [LETTER_SCORES[letter] for letter in letters 
            if letter in LETTER_SCORES.keys()]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I use sum() to add up all letter values. You can give it a list comprehension but also a generator which is best practice (lazy loading):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# sum with list comprehension
&amp;gt;&amp;gt;&amp;gt; sum([LETTER_SCORES.get(c.upper(), 0) for c in word])
31
# or with a generator, just drop the []
&amp;gt;&amp;gt;&amp;gt; sum(LETTER_SCORES.get(c.upper(), 0) for c in word)
31
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can totally write just a for loop and sum to a total variable. And as a beginner I encourage you to actually do this to get a feel for how an iterator works internally.&lt;/p&gt;
&lt;h4&gt;max_word_value(words)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def max_word_value(words=None):
    return max(words or load_words(), key=lambda w: calc_word_value(w))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might be advanced to a beginner. To pass the unittests you have to account for two scenarios: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A word list is given, if not load the default dictionary, I do this in one statement with or, using default arg None for words.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a criteria for max.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The max builtin calculates the max of an iterator, very convenient here. The cool thing is that it takes a key optional argument (like the sorted() builtin) which you can give a function to 'max on'. &lt;/p&gt;
&lt;p&gt;In this case I don't want to max on for example len of word, but on the word value, so we re-use calc_word_value() here. For more details on this I recommend reading &lt;a href="https://dbader.org/blog/python-min-max-and-nested-lists"&gt;this great article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PyBites digest of comments on Monday's challenge post&lt;/h2&gt;
&lt;p&gt;Thanks for &lt;a href="http://pybit.es/codechallenge01.html#disqus_thread"&gt;your comments&lt;/a&gt;. We are really stoked to learn about all these different approaches. Also you cannot read enough other developers' code, it's a great way to learn fast!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We already mentioned &lt;a href="https://github.com/sesh/challenges/blob/master/01/wordvalue.py"&gt;Sesh' solution&lt;/a&gt;, similar to ours, yet still some minor differences / improvements. Queston for the comments (anybody?): words=load_words() as default arg to max_word_value(), probably not a problem here, but doesn't that fall under the &lt;a href="http://docs.python-guide.org/en/latest/writing/gotchas/"&gt;Mutable Default Arguments gotcha&lt;/a&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ukaratay/challenges/blob/master/01/wordvalue.py"&gt;ukaratay solution&lt;/a&gt; is also similar, but he uses upper() on the word = 1 call instead my multiple calls for each char = better. Tiny details but they matter when you add them up and when things scale.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return sum(LETTER_SCORES.get(char, 0) for char in word.upper())
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/alhart2015/challenges/blob/master/01/wordvalue.py"&gt;alhart2015 solution&lt;/a&gt; is a great addition, specially max_word_value() has a longer format, probably easier to read to people just starting out in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jrjames83/pybit-es-01/blob/master/01%20Scrabble%20Solution.ipynb"&gt;check out this notebook&lt;/a&gt;, Jeffrey James shared a complete Pandas solution. The cool thing about this approach is that it calculates the score for each dictionary word and loads it into a Pandas dataframe which he uses to show us the relationship between word length and score, interesting. Well done and thanks Jeffrey!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="codechallenges"></category><category term="code review"></category><category term="HN"></category><category term="github"></category><category term="learning"></category><category term="max"></category><category term="generators"></category><category term="scrabble"></category><category term="refactoring"></category></entry><entry><title>Code Challenge 01 - Word Values Part I</title><link href="https://pybit.es/codechallenge01.html" rel="alternate"></link><published>2017-01-09T09:00:00+01:00</published><updated>2017-01-09T09:00:00+01:00</updated><author><name>PyBites</name></author><id>tag:pybit.es,2017-01-09:/codechallenge01.html</id><summary type="html">&lt;p&gt;Our first weekly code challenge is to calculate the (language) dictionary word that would have the most value in Scrabble. Enjoy and let us know if you like this format.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Welcome to PyBites Code Challenges&lt;/h2&gt;
&lt;p&gt;Starting today every Monday we release a code challenge here on our blog.
On Friday we publish one or more solutions.&lt;/p&gt;
&lt;p&gt;The goal is to have us and our readers work on the solution during the week.&lt;/p&gt;
&lt;p&gt;To keep it simple we don't accept pull-requests at this time.
Just &lt;a href="https://github.com/pybites/challenges"&gt;fork our repo&lt;/a&gt; and work on your solution locally.&lt;/p&gt;
&lt;p&gt;To have the tests pass import the right module, do this when you have a local clone of the fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;challenge_number&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;this &lt;span class="nv"&gt;week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
$ cp name-template name.py
&lt;span class="c1"&gt;# code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to share your solution just share your commit link in the comments of our Friday review post. 
(Monday post = questions / Friday post = solutions + reflection).&lt;/p&gt;
&lt;p&gt;Check &lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;this link&lt;/a&gt; how to keep your fork in sync with our repo.&lt;/p&gt;
&lt;p&gt;Remember, we don't strive for the 'best' solution, it's not a competition.
We do of course strive to have good Pythonic solutions so any feedback is welcome, but do respect the newby / learner.
Again, learning more + better Python is the main objective. &lt;/p&gt;
&lt;p&gt;Finally we believe fixing code challenges is a very effective way to become a better programmer.&lt;/p&gt;
&lt;h2&gt;Ready for a code challenge? Read on ...&lt;/h2&gt;
&lt;p&gt;This week you will write a script to calculate the (language) dictionary word that would have the most value in Scrabble. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read in dictionary.txt (a copy of /usr/share/dict/words on my Mac) and calculate the word that has the most value in Scrabble based on LETTER_SCORES which is imported in wordvalue-template.py.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See the full code challenge &lt;a href="https://github.com/pybites/challenges/tree/master/01"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be a two-part code challenge. Next week you will expand on this building a simple command line game. Something like giving a user a bunch of letters and let him/her create a high-value word (like Scrabble but without the board).&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/challenges"&gt;Fork our repo&lt;/a&gt; and get coding ... have fun!&lt;/p&gt;
&lt;h2&gt;Like this idea?&lt;/h2&gt;
&lt;p&gt;Any feedback or comments are welcome below or &lt;a href="https://news.ycombinator.com/item?id=13352447"&gt;on HN&lt;/a&gt;. Thanks for trying!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;Bob + Julian &lt;/p&gt;</content><category term="scrabble"></category><category term="tdd"></category><category term="codechallenges"></category><category term="github"></category><category term="learning"></category></entry><entry><title>Code Challenge Pilot - code review</title><link href="https://pybit.es/challenge_pilot_codereview.html" rel="alternate"></link><published>2017-01-05T09:00:00+01:00</published><updated>2017-01-05T09:00:00+01:00</updated><author><name>Bob</name></author><id>tag:pybit.es,2017-01-05:/challenge_pilot_codereview.html</id><summary type="html">&lt;p&gt;In this post I review the code of challenge # 1 and refactor it to make it more Pythonic.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;First of all we have to praise Julian for learning by challenge, &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;submitting his code to github&lt;/a&gt; for review, starting out as a coder this takes tremendous courage. Quick round of applause please ...&lt;/p&gt;
&lt;p&gt;The flip-side though is that he will learn super fast his way, he is on his way to become a Python ninja :)&lt;/p&gt;
&lt;p&gt;As described in &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;the previous article&lt;/a&gt; our first challenge was to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parse a copy of the loggedin &lt;a href="https://watchandcode.com/p/practical-javascript"&gt;practical JS course page&lt;/a&gt; calculating the total course time. We focussed on the html parsing, not scraping for now (we will use BeautifulSoup in a future post for sure!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The submitted code is &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Refactoring 1.0 - making it more Pythonic&lt;/h2&gt;
&lt;p&gt;Enter the code review.&lt;/p&gt;
&lt;p&gt;Github's &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; lets you browse all the commits. This is very convenient and it shows the benefit (best practice) of making git commits as small as possible. This actually made it very easy to show all refactorings in chronological order, which I will do in a bit.&lt;/p&gt;
&lt;h3&gt;Before we dive in ...&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that starting 5a34e5a, I ran the script before each commit to see if my assert would work (regression). &lt;/p&gt;
&lt;p&gt;For convenience I use this shortcut in my .vimrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nmap ,p :w&amp;lt;CR&amp;gt;:!python3.6 %&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I love this shortcut. This way I can just press comma+p and it saves the script and runs it, this saves a lot of cycles as you do this over and over (run tests -&amp;gt; refactor -&amp;gt; run tests). &lt;/p&gt;
&lt;p&gt;Ah and yes, you &lt;a href="http://pybit.es/3.6_new.html"&gt;probably want to try 3.6 by now&lt;/a&gt; ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly below could be picky (sorry), but I just want to point out as many things as possible to get the most out of this exercise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Again see the &lt;a href="https://github.com/pybites/blog_code/commits/master/katas/course_time"&gt;history link&lt;/a&gt; or clone our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and go through it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git log --oneline --reverse 66fb7c7fe..9876f968b
$ git show &amp;lt;commit-hash&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commit by commit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1f4dc534d43ec2c8582a890a15fb54486b58af39"&gt;1f4dc53 add jul challenge script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9dcbd27ed348a5d9da0f9e68e2164fcfb7a7a6cd"&gt;9dcbd27 added html to kata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First I added the script to our &lt;a href="https://github.com/pybites/blog_code/tree/master/katas"&gt;katas&lt;/a&gt; folder of our &lt;a href="https://github.com/pybites/blog_code"&gt;blog_code repo&lt;/a&gt; and the copy+paste of the page content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/ce498d71e0316b2ecf7c4c9884fb988ba3a32c5d"&gt;ce498d7 add assert for regression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you refactor always have your tests at hand to make sure you don't mess anything up. This was just a small script so an assert was enough, whatever you use (unittest, pytest, ...) the tests need to perform fast, because you run them often (every step).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assert str(total_hours) == &amp;#39;6.841944444444445&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/5a34e5a7d4ff1bf2251851aabc18c736a62aeecc"&gt;5a34e5a add calling code in main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I added the &lt;a href="https://docs.python.org/3/library/__main__.html"&gt;Top-level script environment&lt;/a&gt; to prevent the prints to run if the module is imported: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/dad9b5537a989a1aed02a61f685ead874e12794e"&gt;dad9b55 no need to pass file around, we have a constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The search_file() method was called with an argument called 'file', but the constant 'HTML_FILE' was already defined, so could just use that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9d682fa943bf3ab461b6f48dba50b646491b12e5"&gt;9d682fa extract time_regex into constant&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was defined in search_file, being a constant I moved it to the top of the file and used PEP8's uppercase convention:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIME_REGEX = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/57334a65de1b8a01aa852f222141f9e36e0a558c"&gt;57334a6 use open in with block to auto-close file handle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open(HTML_FILE).read() was used without close(). Best practice for reading files is using a with block (aka &lt;a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager"&gt;contextmanager&lt;/a&gt;): &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(HTML_FILE) as f:
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/1147bd08424a1c638661bc840bf6851c8d579873"&gt;1147bd0 no need for range, can just loop over duration iterator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is probably an inherited C (or other language) style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No list indexing needed, in Python you can just iterate over a sequence very easily with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for mm_ss in durations:
    minutes, seconds = mm_ss.strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/bc6ee8a93a4f622687f8811ed571da1ef30c38c7"&gt;bc6ee8a can use shortcut += for summing&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_minutes = sum_minutes + int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be shortened to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_minutes += int(minutes)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9ff89d123165167c0fde3f0163f1e54fca2f22c3"&gt;9ff89d1 better method name for getting all timestamps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I renamed method search_file() to get_all_timestamps() to better express what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f5db0134ec7e614e9992720fca5dea5cd15f2e12"&gt;f5db013 no need to predeclare time_list at module level&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_list = [] declaration at the top was redundant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;f862652 one return value from time_calculation, so convert all to seconds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;time_calculation() returned minutes and seconds, it's best practices to have one return value from a function, so I refactored it to count seconds. Of course I had to update the prints in &lt;strong&gt;main&lt;/strong&gt;, but this commit made the design cleaner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/f86265222406cd83da4836e4207d99d4be9e9e2c"&gt;752394b match method name last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Renamed time_calculation() to calc_duration() which I found a bit more concise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/026b9c545250247981382d4c31b6327b11113b94"&gt;026b9c5 update comments after last refactoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deleted 'min(s)' (minutes) from comments as we went for second counting only since commit f862652.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e4fad918f34174d58889916a85cfe6972b3db467"&gt;e4fad91 strip comments as code is pretty self explanatory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Decided to strip comments completely because the code expresses well what it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/76d1b297ede0871fe285babe6e841dc532e62eaf"&gt;76d1b29 strivariable rename&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oops on the commit message. Renamed time_list to video_timings to better express what the variable stores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/d026a7f0c7999821e07b16a46255207e6ccd0da4"&gt;d026a7f do adding/summing on one line&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN
sum_seconds += int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was still happening twice, so made that a one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sum_seconds += int(minutes) * SECONDS_IN_MIN + int(seconds)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/e45ce53e3407e25a648225829f2086e8a9020011"&gt;e45ce53 extract colon seperator into constant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I see any literal values, either numeric or strings, I extract them into constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MM_SS_SEP = &amp;#39;:&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/pybites/blog_code/commit/9876f968b49745b599e4bc9716802677956c8b46"&gt;9876f96 removed whitespaces to comply with pep8 (used flake8 vim plugin)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lastly I ran flake8, which we mentioned &lt;a href="http://pybit.es/pep8.html"&gt;in our PEP8 article&lt;/a&gt;, to check for style violations, in this case only some whitespaces and a blank line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Julian, very well done on the challenge man, you are making good progress.&lt;/p&gt;
&lt;p&gt;I hope this inspires you and the readers to think about making code as Pythonic and clean as possible, because the extra time upfront saves a lot of time later on.&lt;/p&gt;
&lt;p&gt;Any feedback or questions use the comments below, or if code specific: use the comment box Github has for each commit. &lt;/p&gt;
&lt;p&gt;These refactorings are suggestions, I am learning too, so any improvements are welcome ...&lt;/p&gt;
&lt;h2&gt;About Code challenges&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://pybit.es/js_time_scraper_ch.html"&gt;Julian explained&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We plan to do a code challenge here once a week. Stay tuned.&lt;/p&gt;
&lt;p&gt;If you like this subscribe below of follow us on &lt;a href="https://twitter.com/pybites"&gt;Twitter&lt;/a&gt;. Thanks for reading.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Bob&lt;/p&gt;</content><category term="codechallenges"></category><category term="refactoring"></category><category term="code review"></category><category term="bestpractices"></category><category term="pythonic"></category><category term="git"></category><category term="Github"></category><category term="git flow"></category><category term="vim"></category><category term="assert"></category></entry><entry><title>Code Challenge Pilot - calculate total time JS course</title><link href="https://pybit.es/js_time_scraper_ch.html" rel="alternate"></link><published>2017-01-04T20:01:00+01:00</published><updated>2017-01-04T20:01:00+01:00</updated><author><name>Julian</name></author><id>tag:pybit.es,2017-01-04:/js_time_scraper_ch.html</id><summary type="html">&lt;p&gt;Coding Challenge to create a web scraper that calculates the total time of a Javascript Course.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bob and I thought it'd be interesting to do some code challenges. That is, Bob specifies the challenge and I complete it. Bob then goes through my code and makes any necessary edits/improvements to make it more Pythonic.&lt;/p&gt;
&lt;p&gt;This will not only improve my Python and his code review skills but should also (hopefully!) provide you with something interesting or at least entertaining, to read.&lt;/p&gt;
&lt;p&gt;Feel free to give any feedback or improvements of your own in the comments below!&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Bob discovered a free, online &lt;a href="https://watchandcode.com/courses/enrolled/practical-javascript"&gt;Javascript Course&lt;/a&gt; that he felt would be useful to us. On creating an account you're faced with the below course content list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="JS Course Content Listing" src="images/js_course_screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;The problem is that while each module/video displays its own duration, there's no course total time listed anywhere.&lt;/p&gt;
&lt;p&gt;Enter the Challenge: Create a web scraper that parses the page and then calculates the total course time.&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;My&lt;/em&gt; final code can be located &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;). Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Limitations and Complications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main content page is behind a login. How the heck was I supposed to automate a scraper to log into the site with my creds and then pull the page?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I manually right-clicked and selected 'Save As' (on Windows) to save the page as an html file but when I tried to parse the file with BeautifulSoup I consistently hit an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;I initially wanted to use BeautifulSoup for this but as I kept hitting the aforementioned error and was running out of time (sleep!) I decided to keep it simple, albeit a little manual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I highlighted the entire page and saved it as plain text into a file titled "content.html".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The program is to be created in the same directory as the content.html file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key Moments and Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The program could have easily been a single, huge block of code but I decided it was best to split each 'job' into a different function. There are 2 functions in total:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Read in the HTML file and search it using my time regex
def search_file(file)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#Strip out the brackets and the colon to calculate the mins and seconds
def time_calculation(durations)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Creating the time search regex. This was the real challenge for me! While I'd used regex before it was definitely a challenge to search for a time string. The complexity was in coding the regex to search for both single minutes and double digit minutes, eg: 7:43 and 10:43. (As the times are all within ()s on the page, it was easier to include the braces in the regex):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;time_regex = re.compile(r&amp;#39;\(\d+:\d+\)&amp;#39;) #Creating the regex
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Stripping away the unecessary bits so I could work with the raw numbers. I used the strip() and split() methods for this. Admittedly, I was stoked when I realised I could use them both in one line of code (it's the small wins). This was done within a for loop to iterate over the list created by the regex search:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#For loop to strip brackets/colon and assign the mins/seconds
for i in range(len(durations)):
    minutes, seconds = durations[i].strip(&amp;#39;()&amp;#39;).split(&amp;#39;:&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;The program eventually worked! I was able to calculate that the course took roughly 6.8hrs to complete.&lt;/p&gt;
&lt;h2&gt;Thoughts and Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I was bummed I didn't actually get the traditional web scrape working at the time. I would like to figure out where I went wrong with that so I can use BeautifulSoup to properly scrape the content.html file. (I'd already found the css I needed to search damnit!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 30 lines of code in this program. I believe there are lines that can be refactored to do multiple assignments and calculations on a single line. Eg: The for loop that strips the brackets and colon also adds the mins and seconds - I'm sure it can be improved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion and Next Step&lt;/h2&gt;
&lt;p&gt;As annoyed as I got at certain points, I actually enjoyed this. Problem wise it's as simple as they come but it forced me to revisit the basics of regex and string manipulation.&lt;/p&gt;
&lt;p&gt;As I write this I'm getting github commit notifications of Bob refactoring and commenting so I know he's hard at work making my code as Pythonic as possible.
Tomorrow's post will be his feedback... go easy on me brother!&lt;/p&gt;
&lt;p&gt;(Again, find &lt;em&gt;my&lt;/em&gt; code for this challenge &lt;a href="https://github.com/pybites/blog_code/blob/1f4dc534d43ec2c8582a890a15fb54486b58af39/katas/course_time/js_course_time_scraper.py"&gt;here&lt;/a&gt;. Update: our code review is &lt;a href="http://pybit.es/challenge01_codereview.html"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Keep Calm and Code in Python!&lt;/p&gt;
&lt;p&gt;-- Julian&lt;/p&gt;</content><category term="codechallenges"></category><category term="learning"></category><category term="python"></category><category term="beginners"></category><category term="code"></category></entry></feed>